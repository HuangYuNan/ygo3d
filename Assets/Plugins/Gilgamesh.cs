// Generated by ProtoGen, Version=2.4.1.555, Culture=neutral, PublicKeyToken=17b3b1f090c3ea48.  DO NOT EDIT!
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace protos {
  
  namespace Proto {
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Gilgamesh {
    
      #region Extension registration
      public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
      }
      #endregion
      #region Static variables
      internal static pbd::MessageDescriptor internal__static_protos_Gilgamesh__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::protos.Gilgamesh, global::protos.Gilgamesh.Builder> internal__static_protos_Gilgamesh__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_protos_Public__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::protos.Public, global::protos.Public.Builder> internal__static_protos_Public__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_protos_Public_RoomOption__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::protos.Public.Types.RoomOption, global::protos.Public.Types.RoomOption.Builder> internal__static_protos_Public_RoomOption__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_protos_Public_Room__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::protos.Public.Types.Room, global::protos.Public.Types.Room.Builder> internal__static_protos_Public_Room__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_protos_Public_Chat__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::protos.Public.Types.Chat, global::protos.Public.Types.Chat.Builder> internal__static_protos_Public_Chat__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_protos_Public_Stc__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::protos.Public.Types.Stc, global::protos.Public.Types.Stc.Builder> internal__static_protos_Public_Stc__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_protos_Public_Stc_LoginResponse__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::protos.Public.Types.Stc.Types.LoginResponse, global::protos.Public.Types.Stc.Types.LoginResponse.Builder> internal__static_protos_Public_Stc_LoginResponse__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_protos_Public_Stc_RegisterResponse__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::protos.Public.Types.Stc.Types.RegisterResponse, global::protos.Public.Types.Stc.Types.RegisterResponse.Builder> internal__static_protos_Public_Stc_RegisterResponse__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_protos_Public_Stc_Hall__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::protos.Public.Types.Stc.Types.Hall, global::protos.Public.Types.Stc.Types.Hall.Builder> internal__static_protos_Public_Stc_Hall__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_protos_Public_Stc_Hall_RoomList__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::protos.Public.Types.Stc.Types.Hall.Types.RoomList, global::protos.Public.Types.Stc.Types.Hall.Types.RoomList.Builder> internal__static_protos_Public_Stc_Hall_RoomList__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_protos_Public_Stc_Hall_RoomCreated__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::protos.Public.Types.Stc.Types.Hall.Types.RoomCreated, global::protos.Public.Types.Stc.Types.Hall.Types.RoomCreated.Builder> internal__static_protos_Public_Stc_Hall_RoomCreated__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_protos_Public_Stc_Hall_RoomDestoried__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::protos.Public.Types.Stc.Types.Hall.Types.RoomDestoried, global::protos.Public.Types.Stc.Types.Hall.Types.RoomDestoried.Builder> internal__static_protos_Public_Stc_Hall_RoomDestoried__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_protos_Public_Stc_Hall_RoomStateChanged__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::protos.Public.Types.Stc.Types.Hall.Types.RoomStateChanged, global::protos.Public.Types.Stc.Types.Hall.Types.RoomStateChanged.Builder> internal__static_protos_Public_Stc_Hall_RoomStateChanged__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_protos_Public_Stc_Hall_YouEnterHall__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::protos.Public.Types.Stc.Types.Hall.Types.YouEnterHall, global::protos.Public.Types.Stc.Types.Hall.Types.YouEnterHall.Builder> internal__static_protos_Public_Stc_Hall_YouEnterHall__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_protos_Public_Stc_Hall_YouLeaveHall__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::protos.Public.Types.Stc.Types.Hall.Types.YouLeaveHall, global::protos.Public.Types.Stc.Types.Hall.Types.YouLeaveHall.Builder> internal__static_protos_Public_Stc_Hall_YouLeaveHall__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_protos_Public_Stc_Duel__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::protos.Public.Types.Stc.Types.Duel, global::protos.Public.Types.Stc.Types.Duel.Builder> internal__static_protos_Public_Stc_Duel__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_protos_Public_Cts__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::protos.Public.Types.Cts, global::protos.Public.Types.Cts.Builder> internal__static_protos_Public_Cts__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_protos_Public_Cts_Login__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::protos.Public.Types.Cts.Types.Login, global::protos.Public.Types.Cts.Types.Login.Builder> internal__static_protos_Public_Cts_Login__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_protos_Public_Cts_Register__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::protos.Public.Types.Cts.Types.Register, global::protos.Public.Types.Cts.Types.Register.Builder> internal__static_protos_Public_Cts_Register__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_protos_Public_Cts_Hall__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::protos.Public.Types.Cts.Types.Hall, global::protos.Public.Types.Cts.Types.Hall.Builder> internal__static_protos_Public_Cts_Hall__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_protos_Public_Cts_Hall_CreateRoom__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::protos.Public.Types.Cts.Types.Hall.Types.CreateRoom, global::protos.Public.Types.Cts.Types.Hall.Types.CreateRoom.Builder> internal__static_protos_Public_Cts_Hall_CreateRoom__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_protos_Public_Cts_Hall_EnterRoom__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::protos.Public.Types.Cts.Types.Hall.Types.EnterRoom, global::protos.Public.Types.Cts.Types.Hall.Types.EnterRoom.Builder> internal__static_protos_Public_Cts_Hall_EnterRoom__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_protos_Public_Cts_Duel__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::protos.Public.Types.Cts.Types.Duel, global::protos.Public.Types.Cts.Types.Duel.Builder> internal__static_protos_Public_Cts_Duel__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_protos_Internal__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::protos.Internal, global::protos.Internal.Builder> internal__static_protos_Internal__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_protos_Internal_Global__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::protos.Internal.Types.Global, global::protos.Internal.Types.Global.Builder> internal__static_protos_Internal_Global__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_protos_Internal_Global_Locker__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::protos.Internal.Types.Global.Types.Locker, global::protos.Internal.Types.Global.Types.Locker.Builder> internal__static_protos_Internal_Global_Locker__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_protos_Internal_Global_Locker_Acquire__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::protos.Internal.Types.Global.Types.Locker.Types.Acquire, global::protos.Internal.Types.Global.Types.Locker.Types.Acquire.Builder> internal__static_protos_Internal_Global_Locker_Acquire__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_protos_Internal_Global_Online__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::protos.Internal.Types.Global.Types.Online, global::protos.Internal.Types.Global.Types.Online.Builder> internal__static_protos_Internal_Global_Online__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_protos_Internal_Global_Online_Query__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::protos.Internal.Types.Global.Types.Online.Types.Query, global::protos.Internal.Types.Global.Types.Online.Types.Query.Builder> internal__static_protos_Internal_Global_Online_Query__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_protos_Internal_Global_Online_QueryResponse__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::protos.Internal.Types.Global.Types.Online.Types.QueryResponse, global::protos.Internal.Types.Global.Types.Online.Types.QueryResponse.Builder> internal__static_protos_Internal_Global_Online_QueryResponse__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_protos_Internal_Global_Online_Set__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::protos.Internal.Types.Global.Types.Online.Types.Set, global::protos.Internal.Types.Global.Types.Online.Types.Set.Builder> internal__static_protos_Internal_Global_Online_Set__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_protos_Internal_Gate__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::protos.Internal.Types.Gate, global::protos.Internal.Types.Gate.Builder> internal__static_protos_Internal_Gate__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_protos_Internal_Gate_Kick__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::protos.Internal.Types.Gate.Types.Kick, global::protos.Internal.Types.Gate.Types.Kick.Builder> internal__static_protos_Internal_Gate_Kick__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_protos_Internal_Hall__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::protos.Internal.Types.Hall, global::protos.Internal.Types.Hall.Builder> internal__static_protos_Internal_Hall__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_protos_Internal_Hall_Enter__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::protos.Internal.Types.Hall.Types.Enter, global::protos.Internal.Types.Hall.Types.Enter.Builder> internal__static_protos_Internal_Hall_Enter__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_protos_Internal_Hall_Leave__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::protos.Internal.Types.Hall.Types.Leave, global::protos.Internal.Types.Hall.Types.Leave.Builder> internal__static_protos_Internal_Hall_Leave__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_protos_Internal_Hall_CreateRoom__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::protos.Internal.Types.Hall.Types.CreateRoom, global::protos.Internal.Types.Hall.Types.CreateRoom.Builder> internal__static_protos_Internal_Hall_CreateRoom__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_protos_Internal_Hall_EnterRoom__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::protos.Internal.Types.Hall.Types.EnterRoom, global::protos.Internal.Types.Hall.Types.EnterRoom.Builder> internal__static_protos_Internal_Hall_EnterRoom__FieldAccessorTable;
      #endregion
      #region Descriptor
      public static pbd::FileDescriptor Descriptor {
        get { return descriptor; }
      }
      private static pbd::FileDescriptor descriptor;
      
      static Gilgamesh() {
        byte[] descriptorData = global::System.Convert.FromBase64String(
            string.Concat(
              "Cg9naWxnYW1lc2gucHJvdG8SBnByb3RvcyIzCglHaWxnYW1lc2gSEgoEVHlw", 
              "ZRgBIAEoCVIEdHlwZRISCgREYXRhGAIgASgMUgRkYXRhIsQKCgZQdWJsaWMa", 
              "+gEKClJvb21PcHRpb24SEgoETmFtZRgBIAEoCVIEbmFtZRIaCghQYXNzd29y", 
              "ZBgCIAEoCVIIcGFzc3dvcmQSDgoCTHAYAyABKA1SAmxwEhwKCUhhbmRDb3Vu", 
              "dBgEIAEoDVIJaGFuZENvdW50EhwKCURyYXdDb3VudBgFIAEoDVIJZHJhd0Nv", 
              "dW50EisKBE1vZGUYBiABKA4yFy5wcm90b3MuUHVibGljLlJvb21Nb2RlUgRt", 
              "b2RlEisKBFJ1bGUYByABKA4yFy5wcm90b3MuUHVibGljLlJvb21SdWxlUgRy", 
              "dWxlEhYKBkxGTGlzdBgIIAEoDVIGbEZMaXN0Gq8BCgRSb29tEg4KAklkGAEg", 
              "ASgEUgJpZBIxCgZPcHRpb24YAiABKAsyGS5wcm90b3MuUHVibGljLlJvb21P", 
              "cHRpb25SBm9wdGlvbhIYCgdQbGF5ZXJzGAMgAygJUgdwbGF5ZXJzEhoKCFZp", 
              "c2l0b3JzGAQgAygJUgh2aXNpdG9ycxIuCgVTdGF0ZRgFIAEoDjIYLnByb3Rv", 
              "cy5QdWJsaWMuUm9vbVN0YXRlUgVzdGF0ZRosCgRDaGF0EhIKBEZyb20YASAB", 
              "KAlSBGZyb20SEAoDTXNnGAIgASgJUgNtc2cangMKA1N0Yxo9Cg1Mb2dpblJl", 
              "c3BvbnNlEhQKBVN0YXRlGAEgASgIUgVzdGF0ZRIWCgZSZWFzb24YAiABKAlS", 
              "BnJlYXNvbhpAChBSZWdpc3RlclJlc3BvbnNlEhQKBVN0YXRlGAEgASgIUgVz", 
              "dGF0ZRIWCgZSZWFzb24YAiABKAlSBnJlYXNvbhr5AQoESGFsbBo7CghSb29t", 
              "TGlzdBIvCghSb29tTGlzdBgBIAMoCzITLnByb3Rvcy5QdWJsaWMuUm9vbVII", 
              "cm9vbUxpc3QaNgoLUm9vbUNyZWF0ZWQSJwoEUm9vbRgBIAEoCzITLnByb3Rv", 
              "cy5QdWJsaWMuUm9vbVIEcm9vbRofCg1Sb29tRGVzdG9yaWVkEg4KAklkGAEg", 
              "ASgEUgJpZBo7ChBSb29tU3RhdGVDaGFuZ2VkEicKBFJvb20YASABKAsyEy5w", 
              "cm90b3MuUHVibGljLlJvb21SBHJvb20aDgoMWW91RW50ZXJIYWxsGg4KDFlv", 
              "dUxlYXZlSGFsbBoaCgREdWVsEhIKBERhdGEYASABKAxSBGRhdGEapQIKA0N0", 
              "cxo9CgVMb2dpbhIYCgdBY2NvdW50GAEgASgJUgdhY2NvdW50EhoKCFBhc3N3", 
              "b3JkGAIgASgMUghwYXNzd29yZBpACghSZWdpc3RlchIYCgdBY2NvdW50GAEg", 
              "ASgJUgdhY2NvdW50EhoKCFBhc3N3b3JkGAIgASgMUghwYXNzd29yZBqAAQoE", 
              "SGFsbBo/CgpDcmVhdGVSb29tEjEKBk9wdGlvbhgBIAEoCzIZLnByb3Rvcy5Q", 
              "dWJsaWMuUm9vbU9wdGlvblIGb3B0aW9uGjcKCUVudGVyUm9vbRIOCgJJZBgB", 
              "IAEoBFICaWQSGgoIUGFzc3dvcmQYAiABKAlSCHBhc3N3b3JkGhoKBER1ZWwS", 
              "EgoERGF0YRgBIAEoDFIEZGF0YSIqCghSb29tTW9kZRIKCgZTaW5nbGUQABIJ", 
              "CgVNYXRjaBABEgcKA1RhZxACIigKCFJvb21SdWxlEgcKA09jZxAAEgcKA1Rj", 
              "ZxABEgoKBk9jZ1RjZxACIj4KCVJvb21TdGF0ZRIICgRJbml0EAASCQoFUmVh", 
              "ZHkQARISCg5SZWFkeUNvbXBsZXRlZBACEggKBER1ZWwQAyKzBAoISW50ZXJu", 
              "YWwahwIKBkdsb2JhbBpBCgZMb2NrZXIaNwoHQWNxdWlyZRIYCgdBY2NvdW50", 
              "GAEgASgJUgdhY2NvdW50EhIKBGxvY2sYAiABKAhSBGxvY2sauQEKBk9ubGlu", 
              "ZRohCgVRdWVyeRIYCgdBY2NvdW50GAEgASgJUgdhY2NvdW50GlUKDVF1ZXJ5", 
              "UmVzcG9uc2USFAoFU3RhdGUYASABKAhSBXN0YXRlEhQKBVdoZXJlGAIgASgJ", 
              "UgV3aGVyZRIYCgdTZXNzaW9uGAMgASgEUgdzZXNzaW9uGjUKA1NldBIYCgdB", 
              "Y2NvdW50GAEgASgJUgdhY2NvdW50EhQKBVN0YXRlGAIgASgIUgVzdGF0ZRoo", 
              "CgRHYXRlGiAKBEtpY2sSGAoHU2Vzc2lvbhgBIAEoBFIHc2Vzc2lvbhryAQoE", 
              "SGFsbBohCgVFbnRlchIYCgdBY2NvdW50GAEgASgJUgdhY2NvdW50GiEKBUxl", 
              "YXZlEhgKB0FjY291bnQYASABKAlSB2FjY291bnQaWQoKQ3JlYXRlUm9vbRIY", 
              "CgdBY2NvdW50GAEgASgJUgdhY2NvdW50EjEKBk9wdGlvbhgCIAEoCzIZLnBy", 
              "b3Rvcy5QdWJsaWMuUm9vbU9wdGlvblIGb3B0aW9uGkkKCUVudGVyUm9vbRIY", 
              "CgdBY2NvdW50GAEgASgJUgdhY2NvdW50EiIKDFJvb21QYXNzd29yZBgCIAEo", 
            "CVIMcm9vbVBhc3N3b3JkYgZwcm90bzM="));
        pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
          descriptor = root;
          internal__static_protos_Gilgamesh__Descriptor = Descriptor.MessageTypes[0];
          internal__static_protos_Gilgamesh__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::protos.Gilgamesh, global::protos.Gilgamesh.Builder>(internal__static_protos_Gilgamesh__Descriptor,
                  new string[] { "Type", "Data", });
          internal__static_protos_Public__Descriptor = Descriptor.MessageTypes[1];
          internal__static_protos_Public__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::protos.Public, global::protos.Public.Builder>(internal__static_protos_Public__Descriptor,
                  new string[] { });
          internal__static_protos_Public_RoomOption__Descriptor = internal__static_protos_Public__Descriptor.NestedTypes[0];
          internal__static_protos_Public_RoomOption__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::protos.Public.Types.RoomOption, global::protos.Public.Types.RoomOption.Builder>(internal__static_protos_Public_RoomOption__Descriptor,
                  new string[] { "Name", "Password", "Lp", "HandCount", "DrawCount", "Mode", "Rule", "LFList", });
          internal__static_protos_Public_Room__Descriptor = internal__static_protos_Public__Descriptor.NestedTypes[1];
          internal__static_protos_Public_Room__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::protos.Public.Types.Room, global::protos.Public.Types.Room.Builder>(internal__static_protos_Public_Room__Descriptor,
                  new string[] { "Id", "Option", "Players", "Visitors", "State", });
          internal__static_protos_Public_Chat__Descriptor = internal__static_protos_Public__Descriptor.NestedTypes[2];
          internal__static_protos_Public_Chat__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::protos.Public.Types.Chat, global::protos.Public.Types.Chat.Builder>(internal__static_protos_Public_Chat__Descriptor,
                  new string[] { "From", "Msg", });
          internal__static_protos_Public_Stc__Descriptor = internal__static_protos_Public__Descriptor.NestedTypes[3];
          internal__static_protos_Public_Stc__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::protos.Public.Types.Stc, global::protos.Public.Types.Stc.Builder>(internal__static_protos_Public_Stc__Descriptor,
                  new string[] { });
          internal__static_protos_Public_Stc_LoginResponse__Descriptor = internal__static_protos_Public_Stc__Descriptor.NestedTypes[0];
          internal__static_protos_Public_Stc_LoginResponse__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::protos.Public.Types.Stc.Types.LoginResponse, global::protos.Public.Types.Stc.Types.LoginResponse.Builder>(internal__static_protos_Public_Stc_LoginResponse__Descriptor,
                  new string[] { "State", "Reason", });
          internal__static_protos_Public_Stc_RegisterResponse__Descriptor = internal__static_protos_Public_Stc__Descriptor.NestedTypes[1];
          internal__static_protos_Public_Stc_RegisterResponse__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::protos.Public.Types.Stc.Types.RegisterResponse, global::protos.Public.Types.Stc.Types.RegisterResponse.Builder>(internal__static_protos_Public_Stc_RegisterResponse__Descriptor,
                  new string[] { "State", "Reason", });
          internal__static_protos_Public_Stc_Hall__Descriptor = internal__static_protos_Public_Stc__Descriptor.NestedTypes[2];
          internal__static_protos_Public_Stc_Hall__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::protos.Public.Types.Stc.Types.Hall, global::protos.Public.Types.Stc.Types.Hall.Builder>(internal__static_protos_Public_Stc_Hall__Descriptor,
                  new string[] { });
          internal__static_protos_Public_Stc_Hall_RoomList__Descriptor = internal__static_protos_Public_Stc_Hall__Descriptor.NestedTypes[0];
          internal__static_protos_Public_Stc_Hall_RoomList__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::protos.Public.Types.Stc.Types.Hall.Types.RoomList, global::protos.Public.Types.Stc.Types.Hall.Types.RoomList.Builder>(internal__static_protos_Public_Stc_Hall_RoomList__Descriptor,
                  new string[] { "RoomList_", });
          internal__static_protos_Public_Stc_Hall_RoomCreated__Descriptor = internal__static_protos_Public_Stc_Hall__Descriptor.NestedTypes[1];
          internal__static_protos_Public_Stc_Hall_RoomCreated__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::protos.Public.Types.Stc.Types.Hall.Types.RoomCreated, global::protos.Public.Types.Stc.Types.Hall.Types.RoomCreated.Builder>(internal__static_protos_Public_Stc_Hall_RoomCreated__Descriptor,
                  new string[] { "Room", });
          internal__static_protos_Public_Stc_Hall_RoomDestoried__Descriptor = internal__static_protos_Public_Stc_Hall__Descriptor.NestedTypes[2];
          internal__static_protos_Public_Stc_Hall_RoomDestoried__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::protos.Public.Types.Stc.Types.Hall.Types.RoomDestoried, global::protos.Public.Types.Stc.Types.Hall.Types.RoomDestoried.Builder>(internal__static_protos_Public_Stc_Hall_RoomDestoried__Descriptor,
                  new string[] { "Id", });
          internal__static_protos_Public_Stc_Hall_RoomStateChanged__Descriptor = internal__static_protos_Public_Stc_Hall__Descriptor.NestedTypes[3];
          internal__static_protos_Public_Stc_Hall_RoomStateChanged__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::protos.Public.Types.Stc.Types.Hall.Types.RoomStateChanged, global::protos.Public.Types.Stc.Types.Hall.Types.RoomStateChanged.Builder>(internal__static_protos_Public_Stc_Hall_RoomStateChanged__Descriptor,
                  new string[] { "Room", });
          internal__static_protos_Public_Stc_Hall_YouEnterHall__Descriptor = internal__static_protos_Public_Stc_Hall__Descriptor.NestedTypes[4];
          internal__static_protos_Public_Stc_Hall_YouEnterHall__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::protos.Public.Types.Stc.Types.Hall.Types.YouEnterHall, global::protos.Public.Types.Stc.Types.Hall.Types.YouEnterHall.Builder>(internal__static_protos_Public_Stc_Hall_YouEnterHall__Descriptor,
                  new string[] { });
          internal__static_protos_Public_Stc_Hall_YouLeaveHall__Descriptor = internal__static_protos_Public_Stc_Hall__Descriptor.NestedTypes[5];
          internal__static_protos_Public_Stc_Hall_YouLeaveHall__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::protos.Public.Types.Stc.Types.Hall.Types.YouLeaveHall, global::protos.Public.Types.Stc.Types.Hall.Types.YouLeaveHall.Builder>(internal__static_protos_Public_Stc_Hall_YouLeaveHall__Descriptor,
                  new string[] { });
          internal__static_protos_Public_Stc_Duel__Descriptor = internal__static_protos_Public_Stc__Descriptor.NestedTypes[3];
          internal__static_protos_Public_Stc_Duel__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::protos.Public.Types.Stc.Types.Duel, global::protos.Public.Types.Stc.Types.Duel.Builder>(internal__static_protos_Public_Stc_Duel__Descriptor,
                  new string[] { "Data", });
          internal__static_protos_Public_Cts__Descriptor = internal__static_protos_Public__Descriptor.NestedTypes[4];
          internal__static_protos_Public_Cts__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::protos.Public.Types.Cts, global::protos.Public.Types.Cts.Builder>(internal__static_protos_Public_Cts__Descriptor,
                  new string[] { });
          internal__static_protos_Public_Cts_Login__Descriptor = internal__static_protos_Public_Cts__Descriptor.NestedTypes[0];
          internal__static_protos_Public_Cts_Login__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::protos.Public.Types.Cts.Types.Login, global::protos.Public.Types.Cts.Types.Login.Builder>(internal__static_protos_Public_Cts_Login__Descriptor,
                  new string[] { "Account", "Password", });
          internal__static_protos_Public_Cts_Register__Descriptor = internal__static_protos_Public_Cts__Descriptor.NestedTypes[1];
          internal__static_protos_Public_Cts_Register__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::protos.Public.Types.Cts.Types.Register, global::protos.Public.Types.Cts.Types.Register.Builder>(internal__static_protos_Public_Cts_Register__Descriptor,
                  new string[] { "Account", "Password", });
          internal__static_protos_Public_Cts_Hall__Descriptor = internal__static_protos_Public_Cts__Descriptor.NestedTypes[2];
          internal__static_protos_Public_Cts_Hall__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::protos.Public.Types.Cts.Types.Hall, global::protos.Public.Types.Cts.Types.Hall.Builder>(internal__static_protos_Public_Cts_Hall__Descriptor,
                  new string[] { });
          internal__static_protos_Public_Cts_Hall_CreateRoom__Descriptor = internal__static_protos_Public_Cts_Hall__Descriptor.NestedTypes[0];
          internal__static_protos_Public_Cts_Hall_CreateRoom__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::protos.Public.Types.Cts.Types.Hall.Types.CreateRoom, global::protos.Public.Types.Cts.Types.Hall.Types.CreateRoom.Builder>(internal__static_protos_Public_Cts_Hall_CreateRoom__Descriptor,
                  new string[] { "Option", });
          internal__static_protos_Public_Cts_Hall_EnterRoom__Descriptor = internal__static_protos_Public_Cts_Hall__Descriptor.NestedTypes[1];
          internal__static_protos_Public_Cts_Hall_EnterRoom__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::protos.Public.Types.Cts.Types.Hall.Types.EnterRoom, global::protos.Public.Types.Cts.Types.Hall.Types.EnterRoom.Builder>(internal__static_protos_Public_Cts_Hall_EnterRoom__Descriptor,
                  new string[] { "Id", "Password", });
          internal__static_protos_Public_Cts_Duel__Descriptor = internal__static_protos_Public_Cts__Descriptor.NestedTypes[3];
          internal__static_protos_Public_Cts_Duel__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::protos.Public.Types.Cts.Types.Duel, global::protos.Public.Types.Cts.Types.Duel.Builder>(internal__static_protos_Public_Cts_Duel__Descriptor,
                  new string[] { "Data", });
          internal__static_protos_Internal__Descriptor = Descriptor.MessageTypes[2];
          internal__static_protos_Internal__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::protos.Internal, global::protos.Internal.Builder>(internal__static_protos_Internal__Descriptor,
                  new string[] { });
          internal__static_protos_Internal_Global__Descriptor = internal__static_protos_Internal__Descriptor.NestedTypes[0];
          internal__static_protos_Internal_Global__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::protos.Internal.Types.Global, global::protos.Internal.Types.Global.Builder>(internal__static_protos_Internal_Global__Descriptor,
                  new string[] { });
          internal__static_protos_Internal_Global_Locker__Descriptor = internal__static_protos_Internal_Global__Descriptor.NestedTypes[0];
          internal__static_protos_Internal_Global_Locker__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::protos.Internal.Types.Global.Types.Locker, global::protos.Internal.Types.Global.Types.Locker.Builder>(internal__static_protos_Internal_Global_Locker__Descriptor,
                  new string[] { });
          internal__static_protos_Internal_Global_Locker_Acquire__Descriptor = internal__static_protos_Internal_Global_Locker__Descriptor.NestedTypes[0];
          internal__static_protos_Internal_Global_Locker_Acquire__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::protos.Internal.Types.Global.Types.Locker.Types.Acquire, global::protos.Internal.Types.Global.Types.Locker.Types.Acquire.Builder>(internal__static_protos_Internal_Global_Locker_Acquire__Descriptor,
                  new string[] { "Account", "Lock", });
          internal__static_protos_Internal_Global_Online__Descriptor = internal__static_protos_Internal_Global__Descriptor.NestedTypes[1];
          internal__static_protos_Internal_Global_Online__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::protos.Internal.Types.Global.Types.Online, global::protos.Internal.Types.Global.Types.Online.Builder>(internal__static_protos_Internal_Global_Online__Descriptor,
                  new string[] { });
          internal__static_protos_Internal_Global_Online_Query__Descriptor = internal__static_protos_Internal_Global_Online__Descriptor.NestedTypes[0];
          internal__static_protos_Internal_Global_Online_Query__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::protos.Internal.Types.Global.Types.Online.Types.Query, global::protos.Internal.Types.Global.Types.Online.Types.Query.Builder>(internal__static_protos_Internal_Global_Online_Query__Descriptor,
                  new string[] { "Account", });
          internal__static_protos_Internal_Global_Online_QueryResponse__Descriptor = internal__static_protos_Internal_Global_Online__Descriptor.NestedTypes[1];
          internal__static_protos_Internal_Global_Online_QueryResponse__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::protos.Internal.Types.Global.Types.Online.Types.QueryResponse, global::protos.Internal.Types.Global.Types.Online.Types.QueryResponse.Builder>(internal__static_protos_Internal_Global_Online_QueryResponse__Descriptor,
                  new string[] { "State", "Where", "Session", });
          internal__static_protos_Internal_Global_Online_Set__Descriptor = internal__static_protos_Internal_Global_Online__Descriptor.NestedTypes[2];
          internal__static_protos_Internal_Global_Online_Set__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::protos.Internal.Types.Global.Types.Online.Types.Set, global::protos.Internal.Types.Global.Types.Online.Types.Set.Builder>(internal__static_protos_Internal_Global_Online_Set__Descriptor,
                  new string[] { "Account", "State", });
          internal__static_protos_Internal_Gate__Descriptor = internal__static_protos_Internal__Descriptor.NestedTypes[1];
          internal__static_protos_Internal_Gate__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::protos.Internal.Types.Gate, global::protos.Internal.Types.Gate.Builder>(internal__static_protos_Internal_Gate__Descriptor,
                  new string[] { });
          internal__static_protos_Internal_Gate_Kick__Descriptor = internal__static_protos_Internal_Gate__Descriptor.NestedTypes[0];
          internal__static_protos_Internal_Gate_Kick__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::protos.Internal.Types.Gate.Types.Kick, global::protos.Internal.Types.Gate.Types.Kick.Builder>(internal__static_protos_Internal_Gate_Kick__Descriptor,
                  new string[] { "Session", });
          internal__static_protos_Internal_Hall__Descriptor = internal__static_protos_Internal__Descriptor.NestedTypes[2];
          internal__static_protos_Internal_Hall__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::protos.Internal.Types.Hall, global::protos.Internal.Types.Hall.Builder>(internal__static_protos_Internal_Hall__Descriptor,
                  new string[] { });
          internal__static_protos_Internal_Hall_Enter__Descriptor = internal__static_protos_Internal_Hall__Descriptor.NestedTypes[0];
          internal__static_protos_Internal_Hall_Enter__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::protos.Internal.Types.Hall.Types.Enter, global::protos.Internal.Types.Hall.Types.Enter.Builder>(internal__static_protos_Internal_Hall_Enter__Descriptor,
                  new string[] { "Account", });
          internal__static_protos_Internal_Hall_Leave__Descriptor = internal__static_protos_Internal_Hall__Descriptor.NestedTypes[1];
          internal__static_protos_Internal_Hall_Leave__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::protos.Internal.Types.Hall.Types.Leave, global::protos.Internal.Types.Hall.Types.Leave.Builder>(internal__static_protos_Internal_Hall_Leave__Descriptor,
                  new string[] { "Account", });
          internal__static_protos_Internal_Hall_CreateRoom__Descriptor = internal__static_protos_Internal_Hall__Descriptor.NestedTypes[2];
          internal__static_protos_Internal_Hall_CreateRoom__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::protos.Internal.Types.Hall.Types.CreateRoom, global::protos.Internal.Types.Hall.Types.CreateRoom.Builder>(internal__static_protos_Internal_Hall_CreateRoom__Descriptor,
                  new string[] { "Account", "Option", });
          internal__static_protos_Internal_Hall_EnterRoom__Descriptor = internal__static_protos_Internal_Hall__Descriptor.NestedTypes[3];
          internal__static_protos_Internal_Hall_EnterRoom__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::protos.Internal.Types.Hall.Types.EnterRoom, global::protos.Internal.Types.Hall.Types.EnterRoom.Builder>(internal__static_protos_Internal_Hall_EnterRoom__Descriptor,
                  new string[] { "Account", "RoomPassword", });
          pb::ExtensionRegistry registry = pb::ExtensionRegistry.CreateInstance();
          RegisterAllExtensions(registry);
          return registry;
        };
        pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
            new pbd::FileDescriptor[] {
            }, assigner);
      }
      #endregion
      
    }
  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Gilgamesh : pb::GeneratedMessage<Gilgamesh, Gilgamesh.Builder> {
    private Gilgamesh() { }
    private static readonly Gilgamesh defaultInstance = new Gilgamesh().MakeReadOnly();
    private static readonly string[] _gilgameshFieldNames = new string[] { "Data", "Type" };
    private static readonly uint[] _gilgameshFieldTags = new uint[] { 18, 10 };
    public static Gilgamesh DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Gilgamesh DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Gilgamesh ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::protos.Proto.Gilgamesh.internal__static_protos_Gilgamesh__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Gilgamesh, Gilgamesh.Builder> InternalFieldAccessors {
      get { return global::protos.Proto.Gilgamesh.internal__static_protos_Gilgamesh__FieldAccessorTable; }
    }
    
    public const int TypeFieldNumber = 1;
    private bool hasType;
    private string type_ = "";
    public bool HasType {
      get { return hasType; }
    }
    public string Type {
      get { return type_; }
    }
    
    public const int DataFieldNumber = 2;
    private bool hasData;
    private pb::ByteString data_ = pb::ByteString.Empty;
    public bool HasData {
      get { return hasData; }
    }
    public pb::ByteString Data {
      get { return data_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _gilgameshFieldNames;
      if (hasType) {
        output.WriteString(1, field_names[1], Type);
      }
      if (hasData) {
        output.WriteBytes(2, field_names[0], Data);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasType) {
        size += pb::CodedOutputStream.ComputeStringSize(1, Type);
      }
      if (hasData) {
        size += pb::CodedOutputStream.ComputeBytesSize(2, Data);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static Gilgamesh ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Gilgamesh ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Gilgamesh ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Gilgamesh ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Gilgamesh ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Gilgamesh ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Gilgamesh ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Gilgamesh ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Gilgamesh ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Gilgamesh ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Gilgamesh MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Gilgamesh prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<Gilgamesh, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Gilgamesh cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Gilgamesh result;
      
      private Gilgamesh PrepareBuilder() {
        if (resultIsReadOnly) {
          Gilgamesh original = result;
          result = new Gilgamesh();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Gilgamesh MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::protos.Gilgamesh.Descriptor; }
      }
      
      public override Gilgamesh DefaultInstanceForType {
        get { return global::protos.Gilgamesh.DefaultInstance; }
      }
      
      public override Gilgamesh BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Gilgamesh) {
          return MergeFrom((Gilgamesh) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Gilgamesh other) {
        if (other == global::protos.Gilgamesh.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasType) {
          Type = other.Type;
        }
        if (other.HasData) {
          Data = other.Data;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_gilgameshFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _gilgameshFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasType = input.ReadString(ref result.type_);
              break;
            }
            case 18: {
              result.hasData = input.ReadBytes(ref result.data_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasType {
        get { return result.hasType; }
      }
      public string Type {
        get { return result.Type; }
        set { SetType(value); }
      }
      public Builder SetType(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasType = true;
        result.type_ = value;
        return this;
      }
      public Builder ClearType() {
        PrepareBuilder();
        result.hasType = false;
        result.type_ = "";
        return this;
      }
      
      public bool HasData {
        get { return result.hasData; }
      }
      public pb::ByteString Data {
        get { return result.Data; }
        set { SetData(value); }
      }
      public Builder SetData(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasData = true;
        result.data_ = value;
        return this;
      }
      public Builder ClearData() {
        PrepareBuilder();
        result.hasData = false;
        result.data_ = pb::ByteString.Empty;
        return this;
      }
    }
    static Gilgamesh() {
      object.ReferenceEquals(global::protos.Proto.Gilgamesh.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Public : pb::GeneratedMessage<Public, Public.Builder> {
    private Public() { }
    private static readonly Public defaultInstance = new Public().MakeReadOnly();
    private static readonly string[] _publicFieldNames = new string[] {  };
    private static readonly uint[] _publicFieldTags = new uint[] {  };
    public static Public DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Public DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Public ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::protos.Proto.Gilgamesh.internal__static_protos_Public__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Public, Public.Builder> InternalFieldAccessors {
      get { return global::protos.Proto.Gilgamesh.internal__static_protos_Public__FieldAccessorTable; }
    }
    
    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      public enum RoomMode {
        Single = 0,
        Match = 1,
        Tag = 2,
      }
      
      public enum RoomRule {
        Ocg = 0,
        Tcg = 1,
        OcgTcg = 2,
      }
      
      public enum RoomState {
        Init = 0,
        Ready = 1,
        ReadyCompleted = 2,
        Duel = 3,
      }
      
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class RoomOption : pb::GeneratedMessage<RoomOption, RoomOption.Builder> {
        private RoomOption() { }
        private static readonly RoomOption defaultInstance = new RoomOption().MakeReadOnly();
        private static readonly string[] _roomOptionFieldNames = new string[] { "DrawCount", "HandCount", "LFList", "Lp", "Mode", "Name", "Password", "Rule" };
        private static readonly uint[] _roomOptionFieldTags = new uint[] { 40, 32, 64, 24, 48, 10, 18, 56 };
        public static RoomOption DefaultInstance {
          get { return defaultInstance; }
        }
        
        public override RoomOption DefaultInstanceForType {
          get { return DefaultInstance; }
        }
        
        protected override RoomOption ThisMessage {
          get { return this; }
        }
        
        public static pbd::MessageDescriptor Descriptor {
          get { return global::protos.Proto.Gilgamesh.internal__static_protos_Public_RoomOption__Descriptor; }
        }
        
        protected override pb::FieldAccess.FieldAccessorTable<RoomOption, RoomOption.Builder> InternalFieldAccessors {
          get { return global::protos.Proto.Gilgamesh.internal__static_protos_Public_RoomOption__FieldAccessorTable; }
        }
        
        public const int NameFieldNumber = 1;
        private bool hasName;
        private string name_ = "";
        public bool HasName {
          get { return hasName; }
        }
        public string Name {
          get { return name_; }
        }
        
        public const int PasswordFieldNumber = 2;
        private bool hasPassword;
        private string password_ = "";
        public bool HasPassword {
          get { return hasPassword; }
        }
        public string Password {
          get { return password_; }
        }
        
        public const int LpFieldNumber = 3;
        private bool hasLp;
        private uint lp_;
        public bool HasLp {
          get { return hasLp; }
        }
        [global::System.CLSCompliant(false)]
        public uint Lp {
          get { return lp_; }
        }
        
        public const int HandCountFieldNumber = 4;
        private bool hasHandCount;
        private uint handCount_;
        public bool HasHandCount {
          get { return hasHandCount; }
        }
        [global::System.CLSCompliant(false)]
        public uint HandCount {
          get { return handCount_; }
        }
        
        public const int DrawCountFieldNumber = 5;
        private bool hasDrawCount;
        private uint drawCount_;
        public bool HasDrawCount {
          get { return hasDrawCount; }
        }
        [global::System.CLSCompliant(false)]
        public uint DrawCount {
          get { return drawCount_; }
        }
        
        public const int ModeFieldNumber = 6;
        private bool hasMode;
        private global::protos.Public.Types.RoomMode mode_ = global::protos.Public.Types.RoomMode.Single;
        public bool HasMode {
          get { return hasMode; }
        }
        public global::protos.Public.Types.RoomMode Mode {
          get { return mode_; }
        }
        
        public const int RuleFieldNumber = 7;
        private bool hasRule;
        private global::protos.Public.Types.RoomRule rule_ = global::protos.Public.Types.RoomRule.Ocg;
        public bool HasRule {
          get { return hasRule; }
        }
        public global::protos.Public.Types.RoomRule Rule {
          get { return rule_; }
        }
        
        public const int LFListFieldNumber = 8;
        private bool hasLFList;
        private uint lFList_;
        public bool HasLFList {
          get { return hasLFList; }
        }
        [global::System.CLSCompliant(false)]
        public uint LFList {
          get { return lFList_; }
        }
        
        public override bool IsInitialized {
          get {
            return true;
          }
        }
        
        public override void WriteTo(pb::ICodedOutputStream output) {
          CalcSerializedSize();
          string[] field_names = _roomOptionFieldNames;
          if (hasName) {
            output.WriteString(1, field_names[5], Name);
          }
          if (hasPassword) {
            output.WriteString(2, field_names[6], Password);
          }
          if (hasLp) {
            output.WriteUInt32(3, field_names[3], Lp);
          }
          if (hasHandCount) {
            output.WriteUInt32(4, field_names[1], HandCount);
          }
          if (hasDrawCount) {
            output.WriteUInt32(5, field_names[0], DrawCount);
          }
          if (hasMode) {
            output.WriteEnum(6, field_names[4], (int) Mode, Mode);
          }
          if (hasRule) {
            output.WriteEnum(7, field_names[7], (int) Rule, Rule);
          }
          if (hasLFList) {
            output.WriteUInt32(8, field_names[2], LFList);
          }
          UnknownFields.WriteTo(output);
        }
        
        private int memoizedSerializedSize = -1;
        public override int SerializedSize {
          get {
            int size = memoizedSerializedSize;
            if (size != -1) return size;
            return CalcSerializedSize();
          }
        }
        
        private int CalcSerializedSize() {
          int size = memoizedSerializedSize;
          if (size != -1) return size;
          
          size = 0;
          if (hasName) {
            size += pb::CodedOutputStream.ComputeStringSize(1, Name);
          }
          if (hasPassword) {
            size += pb::CodedOutputStream.ComputeStringSize(2, Password);
          }
          if (hasLp) {
            size += pb::CodedOutputStream.ComputeUInt32Size(3, Lp);
          }
          if (hasHandCount) {
            size += pb::CodedOutputStream.ComputeUInt32Size(4, HandCount);
          }
          if (hasDrawCount) {
            size += pb::CodedOutputStream.ComputeUInt32Size(5, DrawCount);
          }
          if (hasMode) {
            size += pb::CodedOutputStream.ComputeEnumSize(6, (int) Mode);
          }
          if (hasRule) {
            size += pb::CodedOutputStream.ComputeEnumSize(7, (int) Rule);
          }
          if (hasLFList) {
            size += pb::CodedOutputStream.ComputeUInt32Size(8, LFList);
          }
          size += UnknownFields.SerializedSize;
          memoizedSerializedSize = size;
          return size;
        }
        public static RoomOption ParseFrom(pb::ByteString data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static RoomOption ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static RoomOption ParseFrom(byte[] data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static RoomOption ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static RoomOption ParseFrom(global::System.IO.Stream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static RoomOption ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static RoomOption ParseDelimitedFrom(global::System.IO.Stream input) {
          return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static RoomOption ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static RoomOption ParseFrom(pb::ICodedInputStream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static RoomOption ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private RoomOption MakeReadOnly() {
          return this;
        }
        
        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(RoomOption prototype) {
          return new Builder(prototype);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Builder : pb::GeneratedBuilder<RoomOption, Builder> {
          protected override Builder ThisBuilder {
            get { return this; }
          }
          public Builder() {
            result = DefaultInstance;
            resultIsReadOnly = true;
          }
          internal Builder(RoomOption cloneFrom) {
            result = cloneFrom;
            resultIsReadOnly = true;
          }
          
          private bool resultIsReadOnly;
          private RoomOption result;
          
          private RoomOption PrepareBuilder() {
            if (resultIsReadOnly) {
              RoomOption original = result;
              result = new RoomOption();
              resultIsReadOnly = false;
              MergeFrom(original);
            }
            return result;
          }
          
          public override bool IsInitialized {
            get { return result.IsInitialized; }
          }
          
          protected override RoomOption MessageBeingBuilt {
            get { return PrepareBuilder(); }
          }
          
          public override Builder Clear() {
            result = DefaultInstance;
            resultIsReadOnly = true;
            return this;
          }
          
          public override Builder Clone() {
            if (resultIsReadOnly) {
              return new Builder(result);
            } else {
              return new Builder().MergeFrom(result);
            }
          }
          
          public override pbd::MessageDescriptor DescriptorForType {
            get { return global::protos.Public.Types.RoomOption.Descriptor; }
          }
          
          public override RoomOption DefaultInstanceForType {
            get { return global::protos.Public.Types.RoomOption.DefaultInstance; }
          }
          
          public override RoomOption BuildPartial() {
            if (resultIsReadOnly) {
              return result;
            }
            resultIsReadOnly = true;
            return result.MakeReadOnly();
          }
          
          public override Builder MergeFrom(pb::IMessage other) {
            if (other is RoomOption) {
              return MergeFrom((RoomOption) other);
            } else {
              base.MergeFrom(other);
              return this;
            }
          }
          
          public override Builder MergeFrom(RoomOption other) {
            if (other == global::protos.Public.Types.RoomOption.DefaultInstance) return this;
            PrepareBuilder();
            if (other.HasName) {
              Name = other.Name;
            }
            if (other.HasPassword) {
              Password = other.Password;
            }
            if (other.HasLp) {
              Lp = other.Lp;
            }
            if (other.HasHandCount) {
              HandCount = other.HandCount;
            }
            if (other.HasDrawCount) {
              DrawCount = other.DrawCount;
            }
            if (other.HasMode) {
              Mode = other.Mode;
            }
            if (other.HasRule) {
              Rule = other.Rule;
            }
            if (other.HasLFList) {
              LFList = other.LFList;
            }
            this.MergeUnknownFields(other.UnknownFields);
            return this;
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input) {
            return MergeFrom(input, pb::ExtensionRegistry.Empty);
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
            PrepareBuilder();
            pb::UnknownFieldSet.Builder unknownFields = null;
            uint tag;
            string field_name;
            while (input.ReadTag(out tag, out field_name)) {
              if(tag == 0 && field_name != null) {
                int field_ordinal = global::System.Array.BinarySearch(_roomOptionFieldNames, field_name, global::System.StringComparer.Ordinal);
                if(field_ordinal >= 0)
                  tag = _roomOptionFieldTags[field_ordinal];
                else {
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  continue;
                }
              }
              switch (tag) {
                case 0: {
                  throw pb::InvalidProtocolBufferException.InvalidTag();
                }
                default: {
                  if (pb::WireFormat.IsEndGroupTag(tag)) {
                    if (unknownFields != null) {
                      this.UnknownFields = unknownFields.Build();
                    }
                    return this;
                  }
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  break;
                }
                case 10: {
                  result.hasName = input.ReadString(ref result.name_);
                  break;
                }
                case 18: {
                  result.hasPassword = input.ReadString(ref result.password_);
                  break;
                }
                case 24: {
                  result.hasLp = input.ReadUInt32(ref result.lp_);
                  break;
                }
                case 32: {
                  result.hasHandCount = input.ReadUInt32(ref result.handCount_);
                  break;
                }
                case 40: {
                  result.hasDrawCount = input.ReadUInt32(ref result.drawCount_);
                  break;
                }
                case 48: {
                  object unknown;
                  if(input.ReadEnum(ref result.mode_, out unknown)) {
                    result.hasMode = true;
                  } else if(unknown is int) {
                    if (unknownFields == null) {
                      unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                    }
                    unknownFields.MergeVarintField(6, (ulong)(int)unknown);
                  }
                  break;
                }
                case 56: {
                  object unknown;
                  if(input.ReadEnum(ref result.rule_, out unknown)) {
                    result.hasRule = true;
                  } else if(unknown is int) {
                    if (unknownFields == null) {
                      unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                    }
                    unknownFields.MergeVarintField(7, (ulong)(int)unknown);
                  }
                  break;
                }
                case 64: {
                  result.hasLFList = input.ReadUInt32(ref result.lFList_);
                  break;
                }
              }
            }
            
            if (unknownFields != null) {
              this.UnknownFields = unknownFields.Build();
            }
            return this;
          }
          
          
          public bool HasName {
            get { return result.hasName; }
          }
          public string Name {
            get { return result.Name; }
            set { SetName(value); }
          }
          public Builder SetName(string value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasName = true;
            result.name_ = value;
            return this;
          }
          public Builder ClearName() {
            PrepareBuilder();
            result.hasName = false;
            result.name_ = "";
            return this;
          }
          
          public bool HasPassword {
            get { return result.hasPassword; }
          }
          public string Password {
            get { return result.Password; }
            set { SetPassword(value); }
          }
          public Builder SetPassword(string value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasPassword = true;
            result.password_ = value;
            return this;
          }
          public Builder ClearPassword() {
            PrepareBuilder();
            result.hasPassword = false;
            result.password_ = "";
            return this;
          }
          
          public bool HasLp {
            get { return result.hasLp; }
          }
          [global::System.CLSCompliant(false)]
          public uint Lp {
            get { return result.Lp; }
            set { SetLp(value); }
          }
          [global::System.CLSCompliant(false)]
          public Builder SetLp(uint value) {
            PrepareBuilder();
            result.hasLp = true;
            result.lp_ = value;
            return this;
          }
          public Builder ClearLp() {
            PrepareBuilder();
            result.hasLp = false;
            result.lp_ = 0;
            return this;
          }
          
          public bool HasHandCount {
            get { return result.hasHandCount; }
          }
          [global::System.CLSCompliant(false)]
          public uint HandCount {
            get { return result.HandCount; }
            set { SetHandCount(value); }
          }
          [global::System.CLSCompliant(false)]
          public Builder SetHandCount(uint value) {
            PrepareBuilder();
            result.hasHandCount = true;
            result.handCount_ = value;
            return this;
          }
          public Builder ClearHandCount() {
            PrepareBuilder();
            result.hasHandCount = false;
            result.handCount_ = 0;
            return this;
          }
          
          public bool HasDrawCount {
            get { return result.hasDrawCount; }
          }
          [global::System.CLSCompliant(false)]
          public uint DrawCount {
            get { return result.DrawCount; }
            set { SetDrawCount(value); }
          }
          [global::System.CLSCompliant(false)]
          public Builder SetDrawCount(uint value) {
            PrepareBuilder();
            result.hasDrawCount = true;
            result.drawCount_ = value;
            return this;
          }
          public Builder ClearDrawCount() {
            PrepareBuilder();
            result.hasDrawCount = false;
            result.drawCount_ = 0;
            return this;
          }
          
          public bool HasMode {
           get { return result.hasMode; }
          }
          public global::protos.Public.Types.RoomMode Mode {
            get { return result.Mode; }
            set { SetMode(value); }
          }
          public Builder SetMode(global::protos.Public.Types.RoomMode value) {
            PrepareBuilder();
            result.hasMode = true;
            result.mode_ = value;
            return this;
          }
          public Builder ClearMode() {
            PrepareBuilder();
            result.hasMode = false;
            result.mode_ = global::protos.Public.Types.RoomMode.Single;
            return this;
          }
          
          public bool HasRule {
           get { return result.hasRule; }
          }
          public global::protos.Public.Types.RoomRule Rule {
            get { return result.Rule; }
            set { SetRule(value); }
          }
          public Builder SetRule(global::protos.Public.Types.RoomRule value) {
            PrepareBuilder();
            result.hasRule = true;
            result.rule_ = value;
            return this;
          }
          public Builder ClearRule() {
            PrepareBuilder();
            result.hasRule = false;
            result.rule_ = global::protos.Public.Types.RoomRule.Ocg;
            return this;
          }
          
          public bool HasLFList {
            get { return result.hasLFList; }
          }
          [global::System.CLSCompliant(false)]
          public uint LFList {
            get { return result.LFList; }
            set { SetLFList(value); }
          }
          [global::System.CLSCompliant(false)]
          public Builder SetLFList(uint value) {
            PrepareBuilder();
            result.hasLFList = true;
            result.lFList_ = value;
            return this;
          }
          public Builder ClearLFList() {
            PrepareBuilder();
            result.hasLFList = false;
            result.lFList_ = 0;
            return this;
          }
        }
        static RoomOption() {
          object.ReferenceEquals(global::protos.Proto.Gilgamesh.Descriptor, null);
        }
      }
      
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class Room : pb::GeneratedMessage<Room, Room.Builder> {
        private Room() { }
        private static readonly Room defaultInstance = new Room().MakeReadOnly();
        private static readonly string[] _roomFieldNames = new string[] { "Id", "Option", "Players", "State", "Visitors" };
        private static readonly uint[] _roomFieldTags = new uint[] { 8, 18, 26, 40, 34 };
        public static Room DefaultInstance {
          get { return defaultInstance; }
        }
        
        public override Room DefaultInstanceForType {
          get { return DefaultInstance; }
        }
        
        protected override Room ThisMessage {
          get { return this; }
        }
        
        public static pbd::MessageDescriptor Descriptor {
          get { return global::protos.Proto.Gilgamesh.internal__static_protos_Public_Room__Descriptor; }
        }
        
        protected override pb::FieldAccess.FieldAccessorTable<Room, Room.Builder> InternalFieldAccessors {
          get { return global::protos.Proto.Gilgamesh.internal__static_protos_Public_Room__FieldAccessorTable; }
        }
        
        public const int IdFieldNumber = 1;
        private bool hasId;
        private ulong id_;
        public bool HasId {
          get { return hasId; }
        }
        [global::System.CLSCompliant(false)]
        public ulong Id {
          get { return id_; }
        }
        
        public const int OptionFieldNumber = 2;
        private bool hasOption;
        private global::protos.Public.Types.RoomOption option_;
        public bool HasOption {
          get { return hasOption; }
        }
        public global::protos.Public.Types.RoomOption Option {
          get { return option_ ?? global::protos.Public.Types.RoomOption.DefaultInstance; }
        }
        
        public const int PlayersFieldNumber = 3;
        private pbc::PopsicleList<string> players_ = new pbc::PopsicleList<string>();
        public scg::IList<string> PlayersList {
          get { return pbc::Lists.AsReadOnly(players_); }
        }
        public int PlayersCount {
          get { return players_.Count; }
        }
        public string GetPlayers(int index) {
          return players_[index];
        }
        
        public const int VisitorsFieldNumber = 4;
        private pbc::PopsicleList<string> visitors_ = new pbc::PopsicleList<string>();
        public scg::IList<string> VisitorsList {
          get { return pbc::Lists.AsReadOnly(visitors_); }
        }
        public int VisitorsCount {
          get { return visitors_.Count; }
        }
        public string GetVisitors(int index) {
          return visitors_[index];
        }
        
        public const int StateFieldNumber = 5;
        private bool hasState;
        private global::protos.Public.Types.RoomState state_ = global::protos.Public.Types.RoomState.Init;
        public bool HasState {
          get { return hasState; }
        }
        public global::protos.Public.Types.RoomState State {
          get { return state_; }
        }
        
        public override bool IsInitialized {
          get {
            return true;
          }
        }
        
        public override void WriteTo(pb::ICodedOutputStream output) {
          CalcSerializedSize();
          string[] field_names = _roomFieldNames;
          if (hasId) {
            output.WriteUInt64(1, field_names[0], Id);
          }
          if (hasOption) {
            output.WriteMessage(2, field_names[1], Option);
          }
          if (players_.Count > 0) {
            output.WriteStringArray(3, field_names[2], players_);
          }
          if (visitors_.Count > 0) {
            output.WriteStringArray(4, field_names[4], visitors_);
          }
          if (hasState) {
            output.WriteEnum(5, field_names[3], (int) State, State);
          }
          UnknownFields.WriteTo(output);
        }
        
        private int memoizedSerializedSize = -1;
        public override int SerializedSize {
          get {
            int size = memoizedSerializedSize;
            if (size != -1) return size;
            return CalcSerializedSize();
          }
        }
        
        private int CalcSerializedSize() {
          int size = memoizedSerializedSize;
          if (size != -1) return size;
          
          size = 0;
          if (hasId) {
            size += pb::CodedOutputStream.ComputeUInt64Size(1, Id);
          }
          if (hasOption) {
            size += pb::CodedOutputStream.ComputeMessageSize(2, Option);
          }
          {
            int dataSize = 0;
            foreach (string element in PlayersList) {
              dataSize += pb::CodedOutputStream.ComputeStringSizeNoTag(element);
            }
            size += dataSize;
            size += 1 * players_.Count;
          }
          {
            int dataSize = 0;
            foreach (string element in VisitorsList) {
              dataSize += pb::CodedOutputStream.ComputeStringSizeNoTag(element);
            }
            size += dataSize;
            size += 1 * visitors_.Count;
          }
          if (hasState) {
            size += pb::CodedOutputStream.ComputeEnumSize(5, (int) State);
          }
          size += UnknownFields.SerializedSize;
          memoizedSerializedSize = size;
          return size;
        }
        public static Room ParseFrom(pb::ByteString data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static Room ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static Room ParseFrom(byte[] data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static Room ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static Room ParseFrom(global::System.IO.Stream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static Room ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static Room ParseDelimitedFrom(global::System.IO.Stream input) {
          return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static Room ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static Room ParseFrom(pb::ICodedInputStream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static Room ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private Room MakeReadOnly() {
          players_.MakeReadOnly();
          visitors_.MakeReadOnly();
          return this;
        }
        
        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(Room prototype) {
          return new Builder(prototype);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Builder : pb::GeneratedBuilder<Room, Builder> {
          protected override Builder ThisBuilder {
            get { return this; }
          }
          public Builder() {
            result = DefaultInstance;
            resultIsReadOnly = true;
          }
          internal Builder(Room cloneFrom) {
            result = cloneFrom;
            resultIsReadOnly = true;
          }
          
          private bool resultIsReadOnly;
          private Room result;
          
          private Room PrepareBuilder() {
            if (resultIsReadOnly) {
              Room original = result;
              result = new Room();
              resultIsReadOnly = false;
              MergeFrom(original);
            }
            return result;
          }
          
          public override bool IsInitialized {
            get { return result.IsInitialized; }
          }
          
          protected override Room MessageBeingBuilt {
            get { return PrepareBuilder(); }
          }
          
          public override Builder Clear() {
            result = DefaultInstance;
            resultIsReadOnly = true;
            return this;
          }
          
          public override Builder Clone() {
            if (resultIsReadOnly) {
              return new Builder(result);
            } else {
              return new Builder().MergeFrom(result);
            }
          }
          
          public override pbd::MessageDescriptor DescriptorForType {
            get { return global::protos.Public.Types.Room.Descriptor; }
          }
          
          public override Room DefaultInstanceForType {
            get { return global::protos.Public.Types.Room.DefaultInstance; }
          }
          
          public override Room BuildPartial() {
            if (resultIsReadOnly) {
              return result;
            }
            resultIsReadOnly = true;
            return result.MakeReadOnly();
          }
          
          public override Builder MergeFrom(pb::IMessage other) {
            if (other is Room) {
              return MergeFrom((Room) other);
            } else {
              base.MergeFrom(other);
              return this;
            }
          }
          
          public override Builder MergeFrom(Room other) {
            if (other == global::protos.Public.Types.Room.DefaultInstance) return this;
            PrepareBuilder();
            if (other.HasId) {
              Id = other.Id;
            }
            if (other.HasOption) {
              MergeOption(other.Option);
            }
            if (other.players_.Count != 0) {
              result.players_.Add(other.players_);
            }
            if (other.visitors_.Count != 0) {
              result.visitors_.Add(other.visitors_);
            }
            if (other.HasState) {
              State = other.State;
            }
            this.MergeUnknownFields(other.UnknownFields);
            return this;
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input) {
            return MergeFrom(input, pb::ExtensionRegistry.Empty);
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
            PrepareBuilder();
            pb::UnknownFieldSet.Builder unknownFields = null;
            uint tag;
            string field_name;
            while (input.ReadTag(out tag, out field_name)) {
              if(tag == 0 && field_name != null) {
                int field_ordinal = global::System.Array.BinarySearch(_roomFieldNames, field_name, global::System.StringComparer.Ordinal);
                if(field_ordinal >= 0)
                  tag = _roomFieldTags[field_ordinal];
                else {
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  continue;
                }
              }
              switch (tag) {
                case 0: {
                  throw pb::InvalidProtocolBufferException.InvalidTag();
                }
                default: {
                  if (pb::WireFormat.IsEndGroupTag(tag)) {
                    if (unknownFields != null) {
                      this.UnknownFields = unknownFields.Build();
                    }
                    return this;
                  }
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  break;
                }
                case 8: {
                  result.hasId = input.ReadUInt64(ref result.id_);
                  break;
                }
                case 18: {
                  global::protos.Public.Types.RoomOption.Builder subBuilder = global::protos.Public.Types.RoomOption.CreateBuilder();
                  if (result.hasOption) {
                    subBuilder.MergeFrom(Option);
                  }
                  input.ReadMessage(subBuilder, extensionRegistry);
                  Option = subBuilder.BuildPartial();
                  break;
                }
                case 26: {
                  input.ReadStringArray(tag, field_name, result.players_);
                  break;
                }
                case 34: {
                  input.ReadStringArray(tag, field_name, result.visitors_);
                  break;
                }
                case 40: {
                  object unknown;
                  if(input.ReadEnum(ref result.state_, out unknown)) {
                    result.hasState = true;
                  } else if(unknown is int) {
                    if (unknownFields == null) {
                      unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                    }
                    unknownFields.MergeVarintField(5, (ulong)(int)unknown);
                  }
                  break;
                }
              }
            }
            
            if (unknownFields != null) {
              this.UnknownFields = unknownFields.Build();
            }
            return this;
          }
          
          
          public bool HasId {
            get { return result.hasId; }
          }
          [global::System.CLSCompliant(false)]
          public ulong Id {
            get { return result.Id; }
            set { SetId(value); }
          }
          [global::System.CLSCompliant(false)]
          public Builder SetId(ulong value) {
            PrepareBuilder();
            result.hasId = true;
            result.id_ = value;
            return this;
          }
          public Builder ClearId() {
            PrepareBuilder();
            result.hasId = false;
            result.id_ = 0UL;
            return this;
          }
          
          public bool HasOption {
           get { return result.hasOption; }
          }
          public global::protos.Public.Types.RoomOption Option {
            get { return result.Option; }
            set { SetOption(value); }
          }
          public Builder SetOption(global::protos.Public.Types.RoomOption value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasOption = true;
            result.option_ = value;
            return this;
          }
          public Builder SetOption(global::protos.Public.Types.RoomOption.Builder builderForValue) {
            pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
            PrepareBuilder();
            result.hasOption = true;
            result.option_ = builderForValue.Build();
            return this;
          }
          public Builder MergeOption(global::protos.Public.Types.RoomOption value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            if (result.hasOption &&
                result.option_ != global::protos.Public.Types.RoomOption.DefaultInstance) {
                result.option_ = global::protos.Public.Types.RoomOption.CreateBuilder(result.option_).MergeFrom(value).BuildPartial();
            } else {
              result.option_ = value;
            }
            result.hasOption = true;
            return this;
          }
          public Builder ClearOption() {
            PrepareBuilder();
            result.hasOption = false;
            result.option_ = null;
            return this;
          }
          
          public pbc::IPopsicleList<string> PlayersList {
            get { return PrepareBuilder().players_; }
          }
          public int PlayersCount {
            get { return result.PlayersCount; }
          }
          public string GetPlayers(int index) {
            return result.GetPlayers(index);
          }
          public Builder SetPlayers(int index, string value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.players_[index] = value;
            return this;
          }
          public Builder AddPlayers(string value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.players_.Add(value);
            return this;
          }
          public Builder AddRangePlayers(scg::IEnumerable<string> values) {
            PrepareBuilder();
            result.players_.Add(values);
            return this;
          }
          public Builder ClearPlayers() {
            PrepareBuilder();
            result.players_.Clear();
            return this;
          }
          
          public pbc::IPopsicleList<string> VisitorsList {
            get { return PrepareBuilder().visitors_; }
          }
          public int VisitorsCount {
            get { return result.VisitorsCount; }
          }
          public string GetVisitors(int index) {
            return result.GetVisitors(index);
          }
          public Builder SetVisitors(int index, string value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.visitors_[index] = value;
            return this;
          }
          public Builder AddVisitors(string value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.visitors_.Add(value);
            return this;
          }
          public Builder AddRangeVisitors(scg::IEnumerable<string> values) {
            PrepareBuilder();
            result.visitors_.Add(values);
            return this;
          }
          public Builder ClearVisitors() {
            PrepareBuilder();
            result.visitors_.Clear();
            return this;
          }
          
          public bool HasState {
           get { return result.hasState; }
          }
          public global::protos.Public.Types.RoomState State {
            get { return result.State; }
            set { SetState(value); }
          }
          public Builder SetState(global::protos.Public.Types.RoomState value) {
            PrepareBuilder();
            result.hasState = true;
            result.state_ = value;
            return this;
          }
          public Builder ClearState() {
            PrepareBuilder();
            result.hasState = false;
            result.state_ = global::protos.Public.Types.RoomState.Init;
            return this;
          }
        }
        static Room() {
          object.ReferenceEquals(global::protos.Proto.Gilgamesh.Descriptor, null);
        }
      }
      
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class Chat : pb::GeneratedMessage<Chat, Chat.Builder> {
        private Chat() { }
        private static readonly Chat defaultInstance = new Chat().MakeReadOnly();
        private static readonly string[] _chatFieldNames = new string[] { "From", "Msg" };
        private static readonly uint[] _chatFieldTags = new uint[] { 10, 18 };
        public static Chat DefaultInstance {
          get { return defaultInstance; }
        }
        
        public override Chat DefaultInstanceForType {
          get { return DefaultInstance; }
        }
        
        protected override Chat ThisMessage {
          get { return this; }
        }
        
        public static pbd::MessageDescriptor Descriptor {
          get { return global::protos.Proto.Gilgamesh.internal__static_protos_Public_Chat__Descriptor; }
        }
        
        protected override pb::FieldAccess.FieldAccessorTable<Chat, Chat.Builder> InternalFieldAccessors {
          get { return global::protos.Proto.Gilgamesh.internal__static_protos_Public_Chat__FieldAccessorTable; }
        }
        
        public const int FromFieldNumber = 1;
        private bool hasFrom;
        private string from_ = "";
        public bool HasFrom {
          get { return hasFrom; }
        }
        public string From {
          get { return from_; }
        }
        
        public const int MsgFieldNumber = 2;
        private bool hasMsg;
        private string msg_ = "";
        public bool HasMsg {
          get { return hasMsg; }
        }
        public string Msg {
          get { return msg_; }
        }
        
        public override bool IsInitialized {
          get {
            return true;
          }
        }
        
        public override void WriteTo(pb::ICodedOutputStream output) {
          CalcSerializedSize();
          string[] field_names = _chatFieldNames;
          if (hasFrom) {
            output.WriteString(1, field_names[0], From);
          }
          if (hasMsg) {
            output.WriteString(2, field_names[1], Msg);
          }
          UnknownFields.WriteTo(output);
        }
        
        private int memoizedSerializedSize = -1;
        public override int SerializedSize {
          get {
            int size = memoizedSerializedSize;
            if (size != -1) return size;
            return CalcSerializedSize();
          }
        }
        
        private int CalcSerializedSize() {
          int size = memoizedSerializedSize;
          if (size != -1) return size;
          
          size = 0;
          if (hasFrom) {
            size += pb::CodedOutputStream.ComputeStringSize(1, From);
          }
          if (hasMsg) {
            size += pb::CodedOutputStream.ComputeStringSize(2, Msg);
          }
          size += UnknownFields.SerializedSize;
          memoizedSerializedSize = size;
          return size;
        }
        public static Chat ParseFrom(pb::ByteString data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static Chat ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static Chat ParseFrom(byte[] data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static Chat ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static Chat ParseFrom(global::System.IO.Stream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static Chat ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static Chat ParseDelimitedFrom(global::System.IO.Stream input) {
          return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static Chat ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static Chat ParseFrom(pb::ICodedInputStream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static Chat ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private Chat MakeReadOnly() {
          return this;
        }
        
        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(Chat prototype) {
          return new Builder(prototype);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Builder : pb::GeneratedBuilder<Chat, Builder> {
          protected override Builder ThisBuilder {
            get { return this; }
          }
          public Builder() {
            result = DefaultInstance;
            resultIsReadOnly = true;
          }
          internal Builder(Chat cloneFrom) {
            result = cloneFrom;
            resultIsReadOnly = true;
          }
          
          private bool resultIsReadOnly;
          private Chat result;
          
          private Chat PrepareBuilder() {
            if (resultIsReadOnly) {
              Chat original = result;
              result = new Chat();
              resultIsReadOnly = false;
              MergeFrom(original);
            }
            return result;
          }
          
          public override bool IsInitialized {
            get { return result.IsInitialized; }
          }
          
          protected override Chat MessageBeingBuilt {
            get { return PrepareBuilder(); }
          }
          
          public override Builder Clear() {
            result = DefaultInstance;
            resultIsReadOnly = true;
            return this;
          }
          
          public override Builder Clone() {
            if (resultIsReadOnly) {
              return new Builder(result);
            } else {
              return new Builder().MergeFrom(result);
            }
          }
          
          public override pbd::MessageDescriptor DescriptorForType {
            get { return global::protos.Public.Types.Chat.Descriptor; }
          }
          
          public override Chat DefaultInstanceForType {
            get { return global::protos.Public.Types.Chat.DefaultInstance; }
          }
          
          public override Chat BuildPartial() {
            if (resultIsReadOnly) {
              return result;
            }
            resultIsReadOnly = true;
            return result.MakeReadOnly();
          }
          
          public override Builder MergeFrom(pb::IMessage other) {
            if (other is Chat) {
              return MergeFrom((Chat) other);
            } else {
              base.MergeFrom(other);
              return this;
            }
          }
          
          public override Builder MergeFrom(Chat other) {
            if (other == global::protos.Public.Types.Chat.DefaultInstance) return this;
            PrepareBuilder();
            if (other.HasFrom) {
              From = other.From;
            }
            if (other.HasMsg) {
              Msg = other.Msg;
            }
            this.MergeUnknownFields(other.UnknownFields);
            return this;
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input) {
            return MergeFrom(input, pb::ExtensionRegistry.Empty);
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
            PrepareBuilder();
            pb::UnknownFieldSet.Builder unknownFields = null;
            uint tag;
            string field_name;
            while (input.ReadTag(out tag, out field_name)) {
              if(tag == 0 && field_name != null) {
                int field_ordinal = global::System.Array.BinarySearch(_chatFieldNames, field_name, global::System.StringComparer.Ordinal);
                if(field_ordinal >= 0)
                  tag = _chatFieldTags[field_ordinal];
                else {
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  continue;
                }
              }
              switch (tag) {
                case 0: {
                  throw pb::InvalidProtocolBufferException.InvalidTag();
                }
                default: {
                  if (pb::WireFormat.IsEndGroupTag(tag)) {
                    if (unknownFields != null) {
                      this.UnknownFields = unknownFields.Build();
                    }
                    return this;
                  }
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  break;
                }
                case 10: {
                  result.hasFrom = input.ReadString(ref result.from_);
                  break;
                }
                case 18: {
                  result.hasMsg = input.ReadString(ref result.msg_);
                  break;
                }
              }
            }
            
            if (unknownFields != null) {
              this.UnknownFields = unknownFields.Build();
            }
            return this;
          }
          
          
          public bool HasFrom {
            get { return result.hasFrom; }
          }
          public string From {
            get { return result.From; }
            set { SetFrom(value); }
          }
          public Builder SetFrom(string value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasFrom = true;
            result.from_ = value;
            return this;
          }
          public Builder ClearFrom() {
            PrepareBuilder();
            result.hasFrom = false;
            result.from_ = "";
            return this;
          }
          
          public bool HasMsg {
            get { return result.hasMsg; }
          }
          public string Msg {
            get { return result.Msg; }
            set { SetMsg(value); }
          }
          public Builder SetMsg(string value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasMsg = true;
            result.msg_ = value;
            return this;
          }
          public Builder ClearMsg() {
            PrepareBuilder();
            result.hasMsg = false;
            result.msg_ = "";
            return this;
          }
        }
        static Chat() {
          object.ReferenceEquals(global::protos.Proto.Gilgamesh.Descriptor, null);
        }
      }
      
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class Stc : pb::GeneratedMessage<Stc, Stc.Builder> {
        private Stc() { }
        private static readonly Stc defaultInstance = new Stc().MakeReadOnly();
        private static readonly string[] _stcFieldNames = new string[] {  };
        private static readonly uint[] _stcFieldTags = new uint[] {  };
        public static Stc DefaultInstance {
          get { return defaultInstance; }
        }
        
        public override Stc DefaultInstanceForType {
          get { return DefaultInstance; }
        }
        
        protected override Stc ThisMessage {
          get { return this; }
        }
        
        public static pbd::MessageDescriptor Descriptor {
          get { return global::protos.Proto.Gilgamesh.internal__static_protos_Public_Stc__Descriptor; }
        }
        
        protected override pb::FieldAccess.FieldAccessorTable<Stc, Stc.Builder> InternalFieldAccessors {
          get { return global::protos.Proto.Gilgamesh.internal__static_protos_Public_Stc__FieldAccessorTable; }
        }
        
        #region Nested types
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static partial class Types {
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
          public sealed partial class LoginResponse : pb::GeneratedMessage<LoginResponse, LoginResponse.Builder> {
            private LoginResponse() { }
            private static readonly LoginResponse defaultInstance = new LoginResponse().MakeReadOnly();
            private static readonly string[] _loginResponseFieldNames = new string[] { "Reason", "State" };
            private static readonly uint[] _loginResponseFieldTags = new uint[] { 18, 8 };
            public static LoginResponse DefaultInstance {
              get { return defaultInstance; }
            }
            
            public override LoginResponse DefaultInstanceForType {
              get { return DefaultInstance; }
            }
            
            protected override LoginResponse ThisMessage {
              get { return this; }
            }
            
            public static pbd::MessageDescriptor Descriptor {
              get { return global::protos.Proto.Gilgamesh.internal__static_protos_Public_Stc_LoginResponse__Descriptor; }
            }
            
            protected override pb::FieldAccess.FieldAccessorTable<LoginResponse, LoginResponse.Builder> InternalFieldAccessors {
              get { return global::protos.Proto.Gilgamesh.internal__static_protos_Public_Stc_LoginResponse__FieldAccessorTable; }
            }
            
            public const int StateFieldNumber = 1;
            private bool hasState;
            private bool state_;
            public bool HasState {
              get { return hasState; }
            }
            public bool State {
              get { return state_; }
            }
            
            public const int ReasonFieldNumber = 2;
            private bool hasReason;
            private string reason_ = "";
            public bool HasReason {
              get { return hasReason; }
            }
            public string Reason {
              get { return reason_; }
            }
            
            public override bool IsInitialized {
              get {
                return true;
              }
            }
            
            public override void WriteTo(pb::ICodedOutputStream output) {
              CalcSerializedSize();
              string[] field_names = _loginResponseFieldNames;
              if (hasState) {
                output.WriteBool(1, field_names[1], State);
              }
              if (hasReason) {
                output.WriteString(2, field_names[0], Reason);
              }
              UnknownFields.WriteTo(output);
            }
            
            private int memoizedSerializedSize = -1;
            public override int SerializedSize {
              get {
                int size = memoizedSerializedSize;
                if (size != -1) return size;
                return CalcSerializedSize();
              }
            }
            
            private int CalcSerializedSize() {
              int size = memoizedSerializedSize;
              if (size != -1) return size;
              
              size = 0;
              if (hasState) {
                size += pb::CodedOutputStream.ComputeBoolSize(1, State);
              }
              if (hasReason) {
                size += pb::CodedOutputStream.ComputeStringSize(2, Reason);
              }
              size += UnknownFields.SerializedSize;
              memoizedSerializedSize = size;
              return size;
            }
            public static LoginResponse ParseFrom(pb::ByteString data) {
              return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
            }
            public static LoginResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
              return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
            }
            public static LoginResponse ParseFrom(byte[] data) {
              return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
            }
            public static LoginResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
              return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
            }
            public static LoginResponse ParseFrom(global::System.IO.Stream input) {
              return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
            }
            public static LoginResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
              return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
            }
            public static LoginResponse ParseDelimitedFrom(global::System.IO.Stream input) {
              return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
            }
            public static LoginResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
              return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
            }
            public static LoginResponse ParseFrom(pb::ICodedInputStream input) {
              return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
            }
            public static LoginResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
              return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
            }
            private LoginResponse MakeReadOnly() {
              return this;
            }
            
            public static Builder CreateBuilder() { return new Builder(); }
            public override Builder ToBuilder() { return CreateBuilder(this); }
            public override Builder CreateBuilderForType() { return new Builder(); }
            public static Builder CreateBuilder(LoginResponse prototype) {
              return new Builder(prototype);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sealed partial class Builder : pb::GeneratedBuilder<LoginResponse, Builder> {
              protected override Builder ThisBuilder {
                get { return this; }
              }
              public Builder() {
                result = DefaultInstance;
                resultIsReadOnly = true;
              }
              internal Builder(LoginResponse cloneFrom) {
                result = cloneFrom;
                resultIsReadOnly = true;
              }
              
              private bool resultIsReadOnly;
              private LoginResponse result;
              
              private LoginResponse PrepareBuilder() {
                if (resultIsReadOnly) {
                  LoginResponse original = result;
                  result = new LoginResponse();
                  resultIsReadOnly = false;
                  MergeFrom(original);
                }
                return result;
              }
              
              public override bool IsInitialized {
                get { return result.IsInitialized; }
              }
              
              protected override LoginResponse MessageBeingBuilt {
                get { return PrepareBuilder(); }
              }
              
              public override Builder Clear() {
                result = DefaultInstance;
                resultIsReadOnly = true;
                return this;
              }
              
              public override Builder Clone() {
                if (resultIsReadOnly) {
                  return new Builder(result);
                } else {
                  return new Builder().MergeFrom(result);
                }
              }
              
              public override pbd::MessageDescriptor DescriptorForType {
                get { return global::protos.Public.Types.Stc.Types.LoginResponse.Descriptor; }
              }
              
              public override LoginResponse DefaultInstanceForType {
                get { return global::protos.Public.Types.Stc.Types.LoginResponse.DefaultInstance; }
              }
              
              public override LoginResponse BuildPartial() {
                if (resultIsReadOnly) {
                  return result;
                }
                resultIsReadOnly = true;
                return result.MakeReadOnly();
              }
              
              public override Builder MergeFrom(pb::IMessage other) {
                if (other is LoginResponse) {
                  return MergeFrom((LoginResponse) other);
                } else {
                  base.MergeFrom(other);
                  return this;
                }
              }
              
              public override Builder MergeFrom(LoginResponse other) {
                if (other == global::protos.Public.Types.Stc.Types.LoginResponse.DefaultInstance) return this;
                PrepareBuilder();
                if (other.HasState) {
                  State = other.State;
                }
                if (other.HasReason) {
                  Reason = other.Reason;
                }
                this.MergeUnknownFields(other.UnknownFields);
                return this;
              }
              
              public override Builder MergeFrom(pb::ICodedInputStream input) {
                return MergeFrom(input, pb::ExtensionRegistry.Empty);
              }
              
              public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
                PrepareBuilder();
                pb::UnknownFieldSet.Builder unknownFields = null;
                uint tag;
                string field_name;
                while (input.ReadTag(out tag, out field_name)) {
                  if(tag == 0 && field_name != null) {
                    int field_ordinal = global::System.Array.BinarySearch(_loginResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
                    if(field_ordinal >= 0)
                      tag = _loginResponseFieldTags[field_ordinal];
                    else {
                      if (unknownFields == null) {
                        unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                      }
                      ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                      continue;
                    }
                  }
                  switch (tag) {
                    case 0: {
                      throw pb::InvalidProtocolBufferException.InvalidTag();
                    }
                    default: {
                      if (pb::WireFormat.IsEndGroupTag(tag)) {
                        if (unknownFields != null) {
                          this.UnknownFields = unknownFields.Build();
                        }
                        return this;
                      }
                      if (unknownFields == null) {
                        unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                      }
                      ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                      break;
                    }
                    case 8: {
                      result.hasState = input.ReadBool(ref result.state_);
                      break;
                    }
                    case 18: {
                      result.hasReason = input.ReadString(ref result.reason_);
                      break;
                    }
                  }
                }
                
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              
              
              public bool HasState {
                get { return result.hasState; }
              }
              public bool State {
                get { return result.State; }
                set { SetState(value); }
              }
              public Builder SetState(bool value) {
                PrepareBuilder();
                result.hasState = true;
                result.state_ = value;
                return this;
              }
              public Builder ClearState() {
                PrepareBuilder();
                result.hasState = false;
                result.state_ = false;
                return this;
              }
              
              public bool HasReason {
                get { return result.hasReason; }
              }
              public string Reason {
                get { return result.Reason; }
                set { SetReason(value); }
              }
              public Builder SetReason(string value) {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasReason = true;
                result.reason_ = value;
                return this;
              }
              public Builder ClearReason() {
                PrepareBuilder();
                result.hasReason = false;
                result.reason_ = "";
                return this;
              }
            }
            static LoginResponse() {
              object.ReferenceEquals(global::protos.Proto.Gilgamesh.Descriptor, null);
            }
          }
          
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
          public sealed partial class RegisterResponse : pb::GeneratedMessage<RegisterResponse, RegisterResponse.Builder> {
            private RegisterResponse() { }
            private static readonly RegisterResponse defaultInstance = new RegisterResponse().MakeReadOnly();
            private static readonly string[] _registerResponseFieldNames = new string[] { "Reason", "State" };
            private static readonly uint[] _registerResponseFieldTags = new uint[] { 18, 8 };
            public static RegisterResponse DefaultInstance {
              get { return defaultInstance; }
            }
            
            public override RegisterResponse DefaultInstanceForType {
              get { return DefaultInstance; }
            }
            
            protected override RegisterResponse ThisMessage {
              get { return this; }
            }
            
            public static pbd::MessageDescriptor Descriptor {
              get { return global::protos.Proto.Gilgamesh.internal__static_protos_Public_Stc_RegisterResponse__Descriptor; }
            }
            
            protected override pb::FieldAccess.FieldAccessorTable<RegisterResponse, RegisterResponse.Builder> InternalFieldAccessors {
              get { return global::protos.Proto.Gilgamesh.internal__static_protos_Public_Stc_RegisterResponse__FieldAccessorTable; }
            }
            
            public const int StateFieldNumber = 1;
            private bool hasState;
            private bool state_;
            public bool HasState {
              get { return hasState; }
            }
            public bool State {
              get { return state_; }
            }
            
            public const int ReasonFieldNumber = 2;
            private bool hasReason;
            private string reason_ = "";
            public bool HasReason {
              get { return hasReason; }
            }
            public string Reason {
              get { return reason_; }
            }
            
            public override bool IsInitialized {
              get {
                return true;
              }
            }
            
            public override void WriteTo(pb::ICodedOutputStream output) {
              CalcSerializedSize();
              string[] field_names = _registerResponseFieldNames;
              if (hasState) {
                output.WriteBool(1, field_names[1], State);
              }
              if (hasReason) {
                output.WriteString(2, field_names[0], Reason);
              }
              UnknownFields.WriteTo(output);
            }
            
            private int memoizedSerializedSize = -1;
            public override int SerializedSize {
              get {
                int size = memoizedSerializedSize;
                if (size != -1) return size;
                return CalcSerializedSize();
              }
            }
            
            private int CalcSerializedSize() {
              int size = memoizedSerializedSize;
              if (size != -1) return size;
              
              size = 0;
              if (hasState) {
                size += pb::CodedOutputStream.ComputeBoolSize(1, State);
              }
              if (hasReason) {
                size += pb::CodedOutputStream.ComputeStringSize(2, Reason);
              }
              size += UnknownFields.SerializedSize;
              memoizedSerializedSize = size;
              return size;
            }
            public static RegisterResponse ParseFrom(pb::ByteString data) {
              return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
            }
            public static RegisterResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
              return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
            }
            public static RegisterResponse ParseFrom(byte[] data) {
              return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
            }
            public static RegisterResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
              return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
            }
            public static RegisterResponse ParseFrom(global::System.IO.Stream input) {
              return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
            }
            public static RegisterResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
              return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
            }
            public static RegisterResponse ParseDelimitedFrom(global::System.IO.Stream input) {
              return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
            }
            public static RegisterResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
              return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
            }
            public static RegisterResponse ParseFrom(pb::ICodedInputStream input) {
              return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
            }
            public static RegisterResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
              return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
            }
            private RegisterResponse MakeReadOnly() {
              return this;
            }
            
            public static Builder CreateBuilder() { return new Builder(); }
            public override Builder ToBuilder() { return CreateBuilder(this); }
            public override Builder CreateBuilderForType() { return new Builder(); }
            public static Builder CreateBuilder(RegisterResponse prototype) {
              return new Builder(prototype);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sealed partial class Builder : pb::GeneratedBuilder<RegisterResponse, Builder> {
              protected override Builder ThisBuilder {
                get { return this; }
              }
              public Builder() {
                result = DefaultInstance;
                resultIsReadOnly = true;
              }
              internal Builder(RegisterResponse cloneFrom) {
                result = cloneFrom;
                resultIsReadOnly = true;
              }
              
              private bool resultIsReadOnly;
              private RegisterResponse result;
              
              private RegisterResponse PrepareBuilder() {
                if (resultIsReadOnly) {
                  RegisterResponse original = result;
                  result = new RegisterResponse();
                  resultIsReadOnly = false;
                  MergeFrom(original);
                }
                return result;
              }
              
              public override bool IsInitialized {
                get { return result.IsInitialized; }
              }
              
              protected override RegisterResponse MessageBeingBuilt {
                get { return PrepareBuilder(); }
              }
              
              public override Builder Clear() {
                result = DefaultInstance;
                resultIsReadOnly = true;
                return this;
              }
              
              public override Builder Clone() {
                if (resultIsReadOnly) {
                  return new Builder(result);
                } else {
                  return new Builder().MergeFrom(result);
                }
              }
              
              public override pbd::MessageDescriptor DescriptorForType {
                get { return global::protos.Public.Types.Stc.Types.RegisterResponse.Descriptor; }
              }
              
              public override RegisterResponse DefaultInstanceForType {
                get { return global::protos.Public.Types.Stc.Types.RegisterResponse.DefaultInstance; }
              }
              
              public override RegisterResponse BuildPartial() {
                if (resultIsReadOnly) {
                  return result;
                }
                resultIsReadOnly = true;
                return result.MakeReadOnly();
              }
              
              public override Builder MergeFrom(pb::IMessage other) {
                if (other is RegisterResponse) {
                  return MergeFrom((RegisterResponse) other);
                } else {
                  base.MergeFrom(other);
                  return this;
                }
              }
              
              public override Builder MergeFrom(RegisterResponse other) {
                if (other == global::protos.Public.Types.Stc.Types.RegisterResponse.DefaultInstance) return this;
                PrepareBuilder();
                if (other.HasState) {
                  State = other.State;
                }
                if (other.HasReason) {
                  Reason = other.Reason;
                }
                this.MergeUnknownFields(other.UnknownFields);
                return this;
              }
              
              public override Builder MergeFrom(pb::ICodedInputStream input) {
                return MergeFrom(input, pb::ExtensionRegistry.Empty);
              }
              
              public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
                PrepareBuilder();
                pb::UnknownFieldSet.Builder unknownFields = null;
                uint tag;
                string field_name;
                while (input.ReadTag(out tag, out field_name)) {
                  if(tag == 0 && field_name != null) {
                    int field_ordinal = global::System.Array.BinarySearch(_registerResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
                    if(field_ordinal >= 0)
                      tag = _registerResponseFieldTags[field_ordinal];
                    else {
                      if (unknownFields == null) {
                        unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                      }
                      ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                      continue;
                    }
                  }
                  switch (tag) {
                    case 0: {
                      throw pb::InvalidProtocolBufferException.InvalidTag();
                    }
                    default: {
                      if (pb::WireFormat.IsEndGroupTag(tag)) {
                        if (unknownFields != null) {
                          this.UnknownFields = unknownFields.Build();
                        }
                        return this;
                      }
                      if (unknownFields == null) {
                        unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                      }
                      ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                      break;
                    }
                    case 8: {
                      result.hasState = input.ReadBool(ref result.state_);
                      break;
                    }
                    case 18: {
                      result.hasReason = input.ReadString(ref result.reason_);
                      break;
                    }
                  }
                }
                
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              
              
              public bool HasState {
                get { return result.hasState; }
              }
              public bool State {
                get { return result.State; }
                set { SetState(value); }
              }
              public Builder SetState(bool value) {
                PrepareBuilder();
                result.hasState = true;
                result.state_ = value;
                return this;
              }
              public Builder ClearState() {
                PrepareBuilder();
                result.hasState = false;
                result.state_ = false;
                return this;
              }
              
              public bool HasReason {
                get { return result.hasReason; }
              }
              public string Reason {
                get { return result.Reason; }
                set { SetReason(value); }
              }
              public Builder SetReason(string value) {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasReason = true;
                result.reason_ = value;
                return this;
              }
              public Builder ClearReason() {
                PrepareBuilder();
                result.hasReason = false;
                result.reason_ = "";
                return this;
              }
            }
            static RegisterResponse() {
              object.ReferenceEquals(global::protos.Proto.Gilgamesh.Descriptor, null);
            }
          }
          
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
          public sealed partial class Hall : pb::GeneratedMessage<Hall, Hall.Builder> {
            private Hall() { }
            private static readonly Hall defaultInstance = new Hall().MakeReadOnly();
            private static readonly string[] _hallFieldNames = new string[] {  };
            private static readonly uint[] _hallFieldTags = new uint[] {  };
            public static Hall DefaultInstance {
              get { return defaultInstance; }
            }
            
            public override Hall DefaultInstanceForType {
              get { return DefaultInstance; }
            }
            
            protected override Hall ThisMessage {
              get { return this; }
            }
            
            public static pbd::MessageDescriptor Descriptor {
              get { return global::protos.Proto.Gilgamesh.internal__static_protos_Public_Stc_Hall__Descriptor; }
            }
            
            protected override pb::FieldAccess.FieldAccessorTable<Hall, Hall.Builder> InternalFieldAccessors {
              get { return global::protos.Proto.Gilgamesh.internal__static_protos_Public_Stc_Hall__FieldAccessorTable; }
            }
            
            #region Nested types
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static partial class Types {
              [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
              public sealed partial class RoomList : pb::GeneratedMessage<RoomList, RoomList.Builder> {
                private RoomList() { }
                private static readonly RoomList defaultInstance = new RoomList().MakeReadOnly();
                private static readonly string[] _roomListFieldNames = new string[] { "RoomList" };
                private static readonly uint[] _roomListFieldTags = new uint[] { 10 };
                public static RoomList DefaultInstance {
                  get { return defaultInstance; }
                }
                
                public override RoomList DefaultInstanceForType {
                  get { return DefaultInstance; }
                }
                
                protected override RoomList ThisMessage {
                  get { return this; }
                }
                
                public static pbd::MessageDescriptor Descriptor {
                  get { return global::protos.Proto.Gilgamesh.internal__static_protos_Public_Stc_Hall_RoomList__Descriptor; }
                }
                
                protected override pb::FieldAccess.FieldAccessorTable<RoomList, RoomList.Builder> InternalFieldAccessors {
                  get { return global::protos.Proto.Gilgamesh.internal__static_protos_Public_Stc_Hall_RoomList__FieldAccessorTable; }
                }
                
                public const int RoomList_FieldNumber = 1;
                private pbc::PopsicleList<global::protos.Public.Types.Room> roomList_ = new pbc::PopsicleList<global::protos.Public.Types.Room>();
                public scg::IList<global::protos.Public.Types.Room> RoomList_List {
                  get { return roomList_; }
                }
                public int RoomList_Count {
                  get { return roomList_.Count; }
                }
                public global::protos.Public.Types.Room GetRoomList_(int index) {
                  return roomList_[index];
                }
                
                public override bool IsInitialized {
                  get {
                    return true;
                  }
                }
                
                public override void WriteTo(pb::ICodedOutputStream output) {
                  CalcSerializedSize();
                  string[] field_names = _roomListFieldNames;
                  if (roomList_.Count > 0) {
                    output.WriteMessageArray(1, field_names[0], roomList_);
                  }
                  UnknownFields.WriteTo(output);
                }
                
                private int memoizedSerializedSize = -1;
                public override int SerializedSize {
                  get {
                    int size = memoizedSerializedSize;
                    if (size != -1) return size;
                    return CalcSerializedSize();
                  }
                }
                
                private int CalcSerializedSize() {
                  int size = memoizedSerializedSize;
                  if (size != -1) return size;
                  
                  size = 0;
                  foreach (global::protos.Public.Types.Room element in RoomList_List) {
                    size += pb::CodedOutputStream.ComputeMessageSize(1, element);
                  }
                  size += UnknownFields.SerializedSize;
                  memoizedSerializedSize = size;
                  return size;
                }
                public static RoomList ParseFrom(pb::ByteString data) {
                  return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
                }
                public static RoomList ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
                  return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
                }
                public static RoomList ParseFrom(byte[] data) {
                  return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
                }
                public static RoomList ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
                  return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
                }
                public static RoomList ParseFrom(global::System.IO.Stream input) {
                  return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
                }
                public static RoomList ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
                  return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
                }
                public static RoomList ParseDelimitedFrom(global::System.IO.Stream input) {
                  return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
                }
                public static RoomList ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
                  return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
                }
                public static RoomList ParseFrom(pb::ICodedInputStream input) {
                  return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
                }
                public static RoomList ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
                  return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
                }
                private RoomList MakeReadOnly() {
                  roomList_.MakeReadOnly();
                  return this;
                }
                
                public static Builder CreateBuilder() { return new Builder(); }
                public override Builder ToBuilder() { return CreateBuilder(this); }
                public override Builder CreateBuilderForType() { return new Builder(); }
                public static Builder CreateBuilder(RoomList prototype) {
                  return new Builder(prototype);
                }
                
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
                public sealed partial class Builder : pb::GeneratedBuilder<RoomList, Builder> {
                  protected override Builder ThisBuilder {
                    get { return this; }
                  }
                  public Builder() {
                    result = DefaultInstance;
                    resultIsReadOnly = true;
                  }
                  internal Builder(RoomList cloneFrom) {
                    result = cloneFrom;
                    resultIsReadOnly = true;
                  }
                  
                  private bool resultIsReadOnly;
                  private RoomList result;
                  
                  private RoomList PrepareBuilder() {
                    if (resultIsReadOnly) {
                      RoomList original = result;
                      result = new RoomList();
                      resultIsReadOnly = false;
                      MergeFrom(original);
                    }
                    return result;
                  }
                  
                  public override bool IsInitialized {
                    get { return result.IsInitialized; }
                  }
                  
                  protected override RoomList MessageBeingBuilt {
                    get { return PrepareBuilder(); }
                  }
                  
                  public override Builder Clear() {
                    result = DefaultInstance;
                    resultIsReadOnly = true;
                    return this;
                  }
                  
                  public override Builder Clone() {
                    if (resultIsReadOnly) {
                      return new Builder(result);
                    } else {
                      return new Builder().MergeFrom(result);
                    }
                  }
                  
                  public override pbd::MessageDescriptor DescriptorForType {
                    get { return global::protos.Public.Types.Stc.Types.Hall.Types.RoomList.Descriptor; }
                  }
                  
                  public override RoomList DefaultInstanceForType {
                    get { return global::protos.Public.Types.Stc.Types.Hall.Types.RoomList.DefaultInstance; }
                  }
                  
                  public override RoomList BuildPartial() {
                    if (resultIsReadOnly) {
                      return result;
                    }
                    resultIsReadOnly = true;
                    return result.MakeReadOnly();
                  }
                  
                  public override Builder MergeFrom(pb::IMessage other) {
                    if (other is RoomList) {
                      return MergeFrom((RoomList) other);
                    } else {
                      base.MergeFrom(other);
                      return this;
                    }
                  }
                  
                  public override Builder MergeFrom(RoomList other) {
                    if (other == global::protos.Public.Types.Stc.Types.Hall.Types.RoomList.DefaultInstance) return this;
                    PrepareBuilder();
                    if (other.roomList_.Count != 0) {
                      result.roomList_.Add(other.roomList_);
                    }
                    this.MergeUnknownFields(other.UnknownFields);
                    return this;
                  }
                  
                  public override Builder MergeFrom(pb::ICodedInputStream input) {
                    return MergeFrom(input, pb::ExtensionRegistry.Empty);
                  }
                  
                  public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
                    PrepareBuilder();
                    pb::UnknownFieldSet.Builder unknownFields = null;
                    uint tag;
                    string field_name;
                    while (input.ReadTag(out tag, out field_name)) {
                      if(tag == 0 && field_name != null) {
                        int field_ordinal = global::System.Array.BinarySearch(_roomListFieldNames, field_name, global::System.StringComparer.Ordinal);
                        if(field_ordinal >= 0)
                          tag = _roomListFieldTags[field_ordinal];
                        else {
                          if (unknownFields == null) {
                            unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                          }
                          ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                          continue;
                        }
                      }
                      switch (tag) {
                        case 0: {
                          throw pb::InvalidProtocolBufferException.InvalidTag();
                        }
                        default: {
                          if (pb::WireFormat.IsEndGroupTag(tag)) {
                            if (unknownFields != null) {
                              this.UnknownFields = unknownFields.Build();
                            }
                            return this;
                          }
                          if (unknownFields == null) {
                            unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                          }
                          ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                          break;
                        }
                        case 10: {
                          input.ReadMessageArray(tag, field_name, result.roomList_, global::protos.Public.Types.Room.DefaultInstance, extensionRegistry);
                          break;
                        }
                      }
                    }
                    
                    if (unknownFields != null) {
                      this.UnknownFields = unknownFields.Build();
                    }
                    return this;
                  }
                  
                  
                  public pbc::IPopsicleList<global::protos.Public.Types.Room> RoomList_List {
                    get { return PrepareBuilder().roomList_; }
                  }
                  public int RoomList_Count {
                    get { return result.RoomList_Count; }
                  }
                  public global::protos.Public.Types.Room GetRoomList_(int index) {
                    return result.GetRoomList_(index);
                  }
                  public Builder SetRoomList_(int index, global::protos.Public.Types.Room value) {
                    pb::ThrowHelper.ThrowIfNull(value, "value");
                    PrepareBuilder();
                    result.roomList_[index] = value;
                    return this;
                  }
                  public Builder SetRoomList_(int index, global::protos.Public.Types.Room.Builder builderForValue) {
                    pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                    PrepareBuilder();
                    result.roomList_[index] = builderForValue.Build();
                    return this;
                  }
                  public Builder AddRoomList_(global::protos.Public.Types.Room value) {
                    pb::ThrowHelper.ThrowIfNull(value, "value");
                    PrepareBuilder();
                    result.roomList_.Add(value);
                    return this;
                  }
                  public Builder AddRoomList_(global::protos.Public.Types.Room.Builder builderForValue) {
                    pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                    PrepareBuilder();
                    result.roomList_.Add(builderForValue.Build());
                    return this;
                  }
                  public Builder AddRangeRoomList_(scg::IEnumerable<global::protos.Public.Types.Room> values) {
                    PrepareBuilder();
                    result.roomList_.Add(values);
                    return this;
                  }
                  public Builder ClearRoomList_() {
                    PrepareBuilder();
                    result.roomList_.Clear();
                    return this;
                  }
                }
                static RoomList() {
                  object.ReferenceEquals(global::protos.Proto.Gilgamesh.Descriptor, null);
                }
              }
              
              [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
              public sealed partial class RoomCreated : pb::GeneratedMessage<RoomCreated, RoomCreated.Builder> {
                private RoomCreated() { }
                private static readonly RoomCreated defaultInstance = new RoomCreated().MakeReadOnly();
                private static readonly string[] _roomCreatedFieldNames = new string[] { "Room" };
                private static readonly uint[] _roomCreatedFieldTags = new uint[] { 10 };
                public static RoomCreated DefaultInstance {
                  get { return defaultInstance; }
                }
                
                public override RoomCreated DefaultInstanceForType {
                  get { return DefaultInstance; }
                }
                
                protected override RoomCreated ThisMessage {
                  get { return this; }
                }
                
                public static pbd::MessageDescriptor Descriptor {
                  get { return global::protos.Proto.Gilgamesh.internal__static_protos_Public_Stc_Hall_RoomCreated__Descriptor; }
                }
                
                protected override pb::FieldAccess.FieldAccessorTable<RoomCreated, RoomCreated.Builder> InternalFieldAccessors {
                  get { return global::protos.Proto.Gilgamesh.internal__static_protos_Public_Stc_Hall_RoomCreated__FieldAccessorTable; }
                }
                
                public const int RoomFieldNumber = 1;
                private bool hasRoom;
                private global::protos.Public.Types.Room room_;
                public bool HasRoom {
                  get { return hasRoom; }
                }
                public global::protos.Public.Types.Room Room {
                  get { return room_ ?? global::protos.Public.Types.Room.DefaultInstance; }
                }
                
                public override bool IsInitialized {
                  get {
                    return true;
                  }
                }
                
                public override void WriteTo(pb::ICodedOutputStream output) {
                  CalcSerializedSize();
                  string[] field_names = _roomCreatedFieldNames;
                  if (hasRoom) {
                    output.WriteMessage(1, field_names[0], Room);
                  }
                  UnknownFields.WriteTo(output);
                }
                
                private int memoizedSerializedSize = -1;
                public override int SerializedSize {
                  get {
                    int size = memoizedSerializedSize;
                    if (size != -1) return size;
                    return CalcSerializedSize();
                  }
                }
                
                private int CalcSerializedSize() {
                  int size = memoizedSerializedSize;
                  if (size != -1) return size;
                  
                  size = 0;
                  if (hasRoom) {
                    size += pb::CodedOutputStream.ComputeMessageSize(1, Room);
                  }
                  size += UnknownFields.SerializedSize;
                  memoizedSerializedSize = size;
                  return size;
                }
                public static RoomCreated ParseFrom(pb::ByteString data) {
                  return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
                }
                public static RoomCreated ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
                  return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
                }
                public static RoomCreated ParseFrom(byte[] data) {
                  return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
                }
                public static RoomCreated ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
                  return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
                }
                public static RoomCreated ParseFrom(global::System.IO.Stream input) {
                  return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
                }
                public static RoomCreated ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
                  return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
                }
                public static RoomCreated ParseDelimitedFrom(global::System.IO.Stream input) {
                  return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
                }
                public static RoomCreated ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
                  return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
                }
                public static RoomCreated ParseFrom(pb::ICodedInputStream input) {
                  return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
                }
                public static RoomCreated ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
                  return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
                }
                private RoomCreated MakeReadOnly() {
                  return this;
                }
                
                public static Builder CreateBuilder() { return new Builder(); }
                public override Builder ToBuilder() { return CreateBuilder(this); }
                public override Builder CreateBuilderForType() { return new Builder(); }
                public static Builder CreateBuilder(RoomCreated prototype) {
                  return new Builder(prototype);
                }
                
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
                public sealed partial class Builder : pb::GeneratedBuilder<RoomCreated, Builder> {
                  protected override Builder ThisBuilder {
                    get { return this; }
                  }
                  public Builder() {
                    result = DefaultInstance;
                    resultIsReadOnly = true;
                  }
                  internal Builder(RoomCreated cloneFrom) {
                    result = cloneFrom;
                    resultIsReadOnly = true;
                  }
                  
                  private bool resultIsReadOnly;
                  private RoomCreated result;
                  
                  private RoomCreated PrepareBuilder() {
                    if (resultIsReadOnly) {
                      RoomCreated original = result;
                      result = new RoomCreated();
                      resultIsReadOnly = false;
                      MergeFrom(original);
                    }
                    return result;
                  }
                  
                  public override bool IsInitialized {
                    get { return result.IsInitialized; }
                  }
                  
                  protected override RoomCreated MessageBeingBuilt {
                    get { return PrepareBuilder(); }
                  }
                  
                  public override Builder Clear() {
                    result = DefaultInstance;
                    resultIsReadOnly = true;
                    return this;
                  }
                  
                  public override Builder Clone() {
                    if (resultIsReadOnly) {
                      return new Builder(result);
                    } else {
                      return new Builder().MergeFrom(result);
                    }
                  }
                  
                  public override pbd::MessageDescriptor DescriptorForType {
                    get { return global::protos.Public.Types.Stc.Types.Hall.Types.RoomCreated.Descriptor; }
                  }
                  
                  public override RoomCreated DefaultInstanceForType {
                    get { return global::protos.Public.Types.Stc.Types.Hall.Types.RoomCreated.DefaultInstance; }
                  }
                  
                  public override RoomCreated BuildPartial() {
                    if (resultIsReadOnly) {
                      return result;
                    }
                    resultIsReadOnly = true;
                    return result.MakeReadOnly();
                  }
                  
                  public override Builder MergeFrom(pb::IMessage other) {
                    if (other is RoomCreated) {
                      return MergeFrom((RoomCreated) other);
                    } else {
                      base.MergeFrom(other);
                      return this;
                    }
                  }
                  
                  public override Builder MergeFrom(RoomCreated other) {
                    if (other == global::protos.Public.Types.Stc.Types.Hall.Types.RoomCreated.DefaultInstance) return this;
                    PrepareBuilder();
                    if (other.HasRoom) {
                      MergeRoom(other.Room);
                    }
                    this.MergeUnknownFields(other.UnknownFields);
                    return this;
                  }
                  
                  public override Builder MergeFrom(pb::ICodedInputStream input) {
                    return MergeFrom(input, pb::ExtensionRegistry.Empty);
                  }
                  
                  public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
                    PrepareBuilder();
                    pb::UnknownFieldSet.Builder unknownFields = null;
                    uint tag;
                    string field_name;
                    while (input.ReadTag(out tag, out field_name)) {
                      if(tag == 0 && field_name != null) {
                        int field_ordinal = global::System.Array.BinarySearch(_roomCreatedFieldNames, field_name, global::System.StringComparer.Ordinal);
                        if(field_ordinal >= 0)
                          tag = _roomCreatedFieldTags[field_ordinal];
                        else {
                          if (unknownFields == null) {
                            unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                          }
                          ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                          continue;
                        }
                      }
                      switch (tag) {
                        case 0: {
                          throw pb::InvalidProtocolBufferException.InvalidTag();
                        }
                        default: {
                          if (pb::WireFormat.IsEndGroupTag(tag)) {
                            if (unknownFields != null) {
                              this.UnknownFields = unknownFields.Build();
                            }
                            return this;
                          }
                          if (unknownFields == null) {
                            unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                          }
                          ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                          break;
                        }
                        case 10: {
                          global::protos.Public.Types.Room.Builder subBuilder = global::protos.Public.Types.Room.CreateBuilder();
                          if (result.hasRoom) {
                            subBuilder.MergeFrom(Room);
                          }
                          input.ReadMessage(subBuilder, extensionRegistry);
                          Room = subBuilder.BuildPartial();
                          break;
                        }
                      }
                    }
                    
                    if (unknownFields != null) {
                      this.UnknownFields = unknownFields.Build();
                    }
                    return this;
                  }
                  
                  
                  public bool HasRoom {
                   get { return result.hasRoom; }
                  }
                  public global::protos.Public.Types.Room Room {
                    get { return result.Room; }
                    set { SetRoom(value); }
                  }
                  public Builder SetRoom(global::protos.Public.Types.Room value) {
                    pb::ThrowHelper.ThrowIfNull(value, "value");
                    PrepareBuilder();
                    result.hasRoom = true;
                    result.room_ = value;
                    return this;
                  }
                  public Builder SetRoom(global::protos.Public.Types.Room.Builder builderForValue) {
                    pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                    PrepareBuilder();
                    result.hasRoom = true;
                    result.room_ = builderForValue.Build();
                    return this;
                  }
                  public Builder MergeRoom(global::protos.Public.Types.Room value) {
                    pb::ThrowHelper.ThrowIfNull(value, "value");
                    PrepareBuilder();
                    if (result.hasRoom &&
                        result.room_ != global::protos.Public.Types.Room.DefaultInstance) {
                        result.room_ = global::protos.Public.Types.Room.CreateBuilder(result.room_).MergeFrom(value).BuildPartial();
                    } else {
                      result.room_ = value;
                    }
                    result.hasRoom = true;
                    return this;
                  }
                  public Builder ClearRoom() {
                    PrepareBuilder();
                    result.hasRoom = false;
                    result.room_ = null;
                    return this;
                  }
                }
                static RoomCreated() {
                  object.ReferenceEquals(global::protos.Proto.Gilgamesh.Descriptor, null);
                }
              }
              
              [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
              public sealed partial class RoomDestoried : pb::GeneratedMessage<RoomDestoried, RoomDestoried.Builder> {
                private RoomDestoried() { }
                private static readonly RoomDestoried defaultInstance = new RoomDestoried().MakeReadOnly();
                private static readonly string[] _roomDestoriedFieldNames = new string[] { "Id" };
                private static readonly uint[] _roomDestoriedFieldTags = new uint[] { 8 };
                public static RoomDestoried DefaultInstance {
                  get { return defaultInstance; }
                }
                
                public override RoomDestoried DefaultInstanceForType {
                  get { return DefaultInstance; }
                }
                
                protected override RoomDestoried ThisMessage {
                  get { return this; }
                }
                
                public static pbd::MessageDescriptor Descriptor {
                  get { return global::protos.Proto.Gilgamesh.internal__static_protos_Public_Stc_Hall_RoomDestoried__Descriptor; }
                }
                
                protected override pb::FieldAccess.FieldAccessorTable<RoomDestoried, RoomDestoried.Builder> InternalFieldAccessors {
                  get { return global::protos.Proto.Gilgamesh.internal__static_protos_Public_Stc_Hall_RoomDestoried__FieldAccessorTable; }
                }
                
                public const int IdFieldNumber = 1;
                private bool hasId;
                private ulong id_;
                public bool HasId {
                  get { return hasId; }
                }
                [global::System.CLSCompliant(false)]
                public ulong Id {
                  get { return id_; }
                }
                
                public override bool IsInitialized {
                  get {
                    return true;
                  }
                }
                
                public override void WriteTo(pb::ICodedOutputStream output) {
                  CalcSerializedSize();
                  string[] field_names = _roomDestoriedFieldNames;
                  if (hasId) {
                    output.WriteUInt64(1, field_names[0], Id);
                  }
                  UnknownFields.WriteTo(output);
                }
                
                private int memoizedSerializedSize = -1;
                public override int SerializedSize {
                  get {
                    int size = memoizedSerializedSize;
                    if (size != -1) return size;
                    return CalcSerializedSize();
                  }
                }
                
                private int CalcSerializedSize() {
                  int size = memoizedSerializedSize;
                  if (size != -1) return size;
                  
                  size = 0;
                  if (hasId) {
                    size += pb::CodedOutputStream.ComputeUInt64Size(1, Id);
                  }
                  size += UnknownFields.SerializedSize;
                  memoizedSerializedSize = size;
                  return size;
                }
                public static RoomDestoried ParseFrom(pb::ByteString data) {
                  return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
                }
                public static RoomDestoried ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
                  return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
                }
                public static RoomDestoried ParseFrom(byte[] data) {
                  return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
                }
                public static RoomDestoried ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
                  return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
                }
                public static RoomDestoried ParseFrom(global::System.IO.Stream input) {
                  return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
                }
                public static RoomDestoried ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
                  return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
                }
                public static RoomDestoried ParseDelimitedFrom(global::System.IO.Stream input) {
                  return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
                }
                public static RoomDestoried ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
                  return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
                }
                public static RoomDestoried ParseFrom(pb::ICodedInputStream input) {
                  return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
                }
                public static RoomDestoried ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
                  return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
                }
                private RoomDestoried MakeReadOnly() {
                  return this;
                }
                
                public static Builder CreateBuilder() { return new Builder(); }
                public override Builder ToBuilder() { return CreateBuilder(this); }
                public override Builder CreateBuilderForType() { return new Builder(); }
                public static Builder CreateBuilder(RoomDestoried prototype) {
                  return new Builder(prototype);
                }
                
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
                public sealed partial class Builder : pb::GeneratedBuilder<RoomDestoried, Builder> {
                  protected override Builder ThisBuilder {
                    get { return this; }
                  }
                  public Builder() {
                    result = DefaultInstance;
                    resultIsReadOnly = true;
                  }
                  internal Builder(RoomDestoried cloneFrom) {
                    result = cloneFrom;
                    resultIsReadOnly = true;
                  }
                  
                  private bool resultIsReadOnly;
                  private RoomDestoried result;
                  
                  private RoomDestoried PrepareBuilder() {
                    if (resultIsReadOnly) {
                      RoomDestoried original = result;
                      result = new RoomDestoried();
                      resultIsReadOnly = false;
                      MergeFrom(original);
                    }
                    return result;
                  }
                  
                  public override bool IsInitialized {
                    get { return result.IsInitialized; }
                  }
                  
                  protected override RoomDestoried MessageBeingBuilt {
                    get { return PrepareBuilder(); }
                  }
                  
                  public override Builder Clear() {
                    result = DefaultInstance;
                    resultIsReadOnly = true;
                    return this;
                  }
                  
                  public override Builder Clone() {
                    if (resultIsReadOnly) {
                      return new Builder(result);
                    } else {
                      return new Builder().MergeFrom(result);
                    }
                  }
                  
                  public override pbd::MessageDescriptor DescriptorForType {
                    get { return global::protos.Public.Types.Stc.Types.Hall.Types.RoomDestoried.Descriptor; }
                  }
                  
                  public override RoomDestoried DefaultInstanceForType {
                    get { return global::protos.Public.Types.Stc.Types.Hall.Types.RoomDestoried.DefaultInstance; }
                  }
                  
                  public override RoomDestoried BuildPartial() {
                    if (resultIsReadOnly) {
                      return result;
                    }
                    resultIsReadOnly = true;
                    return result.MakeReadOnly();
                  }
                  
                  public override Builder MergeFrom(pb::IMessage other) {
                    if (other is RoomDestoried) {
                      return MergeFrom((RoomDestoried) other);
                    } else {
                      base.MergeFrom(other);
                      return this;
                    }
                  }
                  
                  public override Builder MergeFrom(RoomDestoried other) {
                    if (other == global::protos.Public.Types.Stc.Types.Hall.Types.RoomDestoried.DefaultInstance) return this;
                    PrepareBuilder();
                    if (other.HasId) {
                      Id = other.Id;
                    }
                    this.MergeUnknownFields(other.UnknownFields);
                    return this;
                  }
                  
                  public override Builder MergeFrom(pb::ICodedInputStream input) {
                    return MergeFrom(input, pb::ExtensionRegistry.Empty);
                  }
                  
                  public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
                    PrepareBuilder();
                    pb::UnknownFieldSet.Builder unknownFields = null;
                    uint tag;
                    string field_name;
                    while (input.ReadTag(out tag, out field_name)) {
                      if(tag == 0 && field_name != null) {
                        int field_ordinal = global::System.Array.BinarySearch(_roomDestoriedFieldNames, field_name, global::System.StringComparer.Ordinal);
                        if(field_ordinal >= 0)
                          tag = _roomDestoriedFieldTags[field_ordinal];
                        else {
                          if (unknownFields == null) {
                            unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                          }
                          ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                          continue;
                        }
                      }
                      switch (tag) {
                        case 0: {
                          throw pb::InvalidProtocolBufferException.InvalidTag();
                        }
                        default: {
                          if (pb::WireFormat.IsEndGroupTag(tag)) {
                            if (unknownFields != null) {
                              this.UnknownFields = unknownFields.Build();
                            }
                            return this;
                          }
                          if (unknownFields == null) {
                            unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                          }
                          ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                          break;
                        }
                        case 8: {
                          result.hasId = input.ReadUInt64(ref result.id_);
                          break;
                        }
                      }
                    }
                    
                    if (unknownFields != null) {
                      this.UnknownFields = unknownFields.Build();
                    }
                    return this;
                  }
                  
                  
                  public bool HasId {
                    get { return result.hasId; }
                  }
                  [global::System.CLSCompliant(false)]
                  public ulong Id {
                    get { return result.Id; }
                    set { SetId(value); }
                  }
                  [global::System.CLSCompliant(false)]
                  public Builder SetId(ulong value) {
                    PrepareBuilder();
                    result.hasId = true;
                    result.id_ = value;
                    return this;
                  }
                  public Builder ClearId() {
                    PrepareBuilder();
                    result.hasId = false;
                    result.id_ = 0UL;
                    return this;
                  }
                }
                static RoomDestoried() {
                  object.ReferenceEquals(global::protos.Proto.Gilgamesh.Descriptor, null);
                }
              }
              
              [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
              public sealed partial class RoomStateChanged : pb::GeneratedMessage<RoomStateChanged, RoomStateChanged.Builder> {
                private RoomStateChanged() { }
                private static readonly RoomStateChanged defaultInstance = new RoomStateChanged().MakeReadOnly();
                private static readonly string[] _roomStateChangedFieldNames = new string[] { "Room" };
                private static readonly uint[] _roomStateChangedFieldTags = new uint[] { 10 };
                public static RoomStateChanged DefaultInstance {
                  get { return defaultInstance; }
                }
                
                public override RoomStateChanged DefaultInstanceForType {
                  get { return DefaultInstance; }
                }
                
                protected override RoomStateChanged ThisMessage {
                  get { return this; }
                }
                
                public static pbd::MessageDescriptor Descriptor {
                  get { return global::protos.Proto.Gilgamesh.internal__static_protos_Public_Stc_Hall_RoomStateChanged__Descriptor; }
                }
                
                protected override pb::FieldAccess.FieldAccessorTable<RoomStateChanged, RoomStateChanged.Builder> InternalFieldAccessors {
                  get { return global::protos.Proto.Gilgamesh.internal__static_protos_Public_Stc_Hall_RoomStateChanged__FieldAccessorTable; }
                }
                
                public const int RoomFieldNumber = 1;
                private bool hasRoom;
                private global::protos.Public.Types.Room room_;
                public bool HasRoom {
                  get { return hasRoom; }
                }
                public global::protos.Public.Types.Room Room {
                  get { return room_ ?? global::protos.Public.Types.Room.DefaultInstance; }
                }
                
                public override bool IsInitialized {
                  get {
                    return true;
                  }
                }
                
                public override void WriteTo(pb::ICodedOutputStream output) {
                  CalcSerializedSize();
                  string[] field_names = _roomStateChangedFieldNames;
                  if (hasRoom) {
                    output.WriteMessage(1, field_names[0], Room);
                  }
                  UnknownFields.WriteTo(output);
                }
                
                private int memoizedSerializedSize = -1;
                public override int SerializedSize {
                  get {
                    int size = memoizedSerializedSize;
                    if (size != -1) return size;
                    return CalcSerializedSize();
                  }
                }
                
                private int CalcSerializedSize() {
                  int size = memoizedSerializedSize;
                  if (size != -1) return size;
                  
                  size = 0;
                  if (hasRoom) {
                    size += pb::CodedOutputStream.ComputeMessageSize(1, Room);
                  }
                  size += UnknownFields.SerializedSize;
                  memoizedSerializedSize = size;
                  return size;
                }
                public static RoomStateChanged ParseFrom(pb::ByteString data) {
                  return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
                }
                public static RoomStateChanged ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
                  return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
                }
                public static RoomStateChanged ParseFrom(byte[] data) {
                  return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
                }
                public static RoomStateChanged ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
                  return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
                }
                public static RoomStateChanged ParseFrom(global::System.IO.Stream input) {
                  return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
                }
                public static RoomStateChanged ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
                  return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
                }
                public static RoomStateChanged ParseDelimitedFrom(global::System.IO.Stream input) {
                  return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
                }
                public static RoomStateChanged ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
                  return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
                }
                public static RoomStateChanged ParseFrom(pb::ICodedInputStream input) {
                  return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
                }
                public static RoomStateChanged ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
                  return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
                }
                private RoomStateChanged MakeReadOnly() {
                  return this;
                }
                
                public static Builder CreateBuilder() { return new Builder(); }
                public override Builder ToBuilder() { return CreateBuilder(this); }
                public override Builder CreateBuilderForType() { return new Builder(); }
                public static Builder CreateBuilder(RoomStateChanged prototype) {
                  return new Builder(prototype);
                }
                
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
                public sealed partial class Builder : pb::GeneratedBuilder<RoomStateChanged, Builder> {
                  protected override Builder ThisBuilder {
                    get { return this; }
                  }
                  public Builder() {
                    result = DefaultInstance;
                    resultIsReadOnly = true;
                  }
                  internal Builder(RoomStateChanged cloneFrom) {
                    result = cloneFrom;
                    resultIsReadOnly = true;
                  }
                  
                  private bool resultIsReadOnly;
                  private RoomStateChanged result;
                  
                  private RoomStateChanged PrepareBuilder() {
                    if (resultIsReadOnly) {
                      RoomStateChanged original = result;
                      result = new RoomStateChanged();
                      resultIsReadOnly = false;
                      MergeFrom(original);
                    }
                    return result;
                  }
                  
                  public override bool IsInitialized {
                    get { return result.IsInitialized; }
                  }
                  
                  protected override RoomStateChanged MessageBeingBuilt {
                    get { return PrepareBuilder(); }
                  }
                  
                  public override Builder Clear() {
                    result = DefaultInstance;
                    resultIsReadOnly = true;
                    return this;
                  }
                  
                  public override Builder Clone() {
                    if (resultIsReadOnly) {
                      return new Builder(result);
                    } else {
                      return new Builder().MergeFrom(result);
                    }
                  }
                  
                  public override pbd::MessageDescriptor DescriptorForType {
                    get { return global::protos.Public.Types.Stc.Types.Hall.Types.RoomStateChanged.Descriptor; }
                  }
                  
                  public override RoomStateChanged DefaultInstanceForType {
                    get { return global::protos.Public.Types.Stc.Types.Hall.Types.RoomStateChanged.DefaultInstance; }
                  }
                  
                  public override RoomStateChanged BuildPartial() {
                    if (resultIsReadOnly) {
                      return result;
                    }
                    resultIsReadOnly = true;
                    return result.MakeReadOnly();
                  }
                  
                  public override Builder MergeFrom(pb::IMessage other) {
                    if (other is RoomStateChanged) {
                      return MergeFrom((RoomStateChanged) other);
                    } else {
                      base.MergeFrom(other);
                      return this;
                    }
                  }
                  
                  public override Builder MergeFrom(RoomStateChanged other) {
                    if (other == global::protos.Public.Types.Stc.Types.Hall.Types.RoomStateChanged.DefaultInstance) return this;
                    PrepareBuilder();
                    if (other.HasRoom) {
                      MergeRoom(other.Room);
                    }
                    this.MergeUnknownFields(other.UnknownFields);
                    return this;
                  }
                  
                  public override Builder MergeFrom(pb::ICodedInputStream input) {
                    return MergeFrom(input, pb::ExtensionRegistry.Empty);
                  }
                  
                  public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
                    PrepareBuilder();
                    pb::UnknownFieldSet.Builder unknownFields = null;
                    uint tag;
                    string field_name;
                    while (input.ReadTag(out tag, out field_name)) {
                      if(tag == 0 && field_name != null) {
                        int field_ordinal = global::System.Array.BinarySearch(_roomStateChangedFieldNames, field_name, global::System.StringComparer.Ordinal);
                        if(field_ordinal >= 0)
                          tag = _roomStateChangedFieldTags[field_ordinal];
                        else {
                          if (unknownFields == null) {
                            unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                          }
                          ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                          continue;
                        }
                      }
                      switch (tag) {
                        case 0: {
                          throw pb::InvalidProtocolBufferException.InvalidTag();
                        }
                        default: {
                          if (pb::WireFormat.IsEndGroupTag(tag)) {
                            if (unknownFields != null) {
                              this.UnknownFields = unknownFields.Build();
                            }
                            return this;
                          }
                          if (unknownFields == null) {
                            unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                          }
                          ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                          break;
                        }
                        case 10: {
                          global::protos.Public.Types.Room.Builder subBuilder = global::protos.Public.Types.Room.CreateBuilder();
                          if (result.hasRoom) {
                            subBuilder.MergeFrom(Room);
                          }
                          input.ReadMessage(subBuilder, extensionRegistry);
                          Room = subBuilder.BuildPartial();
                          break;
                        }
                      }
                    }
                    
                    if (unknownFields != null) {
                      this.UnknownFields = unknownFields.Build();
                    }
                    return this;
                  }
                  
                  
                  public bool HasRoom {
                   get { return result.hasRoom; }
                  }
                  public global::protos.Public.Types.Room Room {
                    get { return result.Room; }
                    set { SetRoom(value); }
                  }
                  public Builder SetRoom(global::protos.Public.Types.Room value) {
                    pb::ThrowHelper.ThrowIfNull(value, "value");
                    PrepareBuilder();
                    result.hasRoom = true;
                    result.room_ = value;
                    return this;
                  }
                  public Builder SetRoom(global::protos.Public.Types.Room.Builder builderForValue) {
                    pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                    PrepareBuilder();
                    result.hasRoom = true;
                    result.room_ = builderForValue.Build();
                    return this;
                  }
                  public Builder MergeRoom(global::protos.Public.Types.Room value) {
                    pb::ThrowHelper.ThrowIfNull(value, "value");
                    PrepareBuilder();
                    if (result.hasRoom &&
                        result.room_ != global::protos.Public.Types.Room.DefaultInstance) {
                        result.room_ = global::protos.Public.Types.Room.CreateBuilder(result.room_).MergeFrom(value).BuildPartial();
                    } else {
                      result.room_ = value;
                    }
                    result.hasRoom = true;
                    return this;
                  }
                  public Builder ClearRoom() {
                    PrepareBuilder();
                    result.hasRoom = false;
                    result.room_ = null;
                    return this;
                  }
                }
                static RoomStateChanged() {
                  object.ReferenceEquals(global::protos.Proto.Gilgamesh.Descriptor, null);
                }
              }
              
              [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
              public sealed partial class YouEnterHall : pb::GeneratedMessage<YouEnterHall, YouEnterHall.Builder> {
                private YouEnterHall() { }
                private static readonly YouEnterHall defaultInstance = new YouEnterHall().MakeReadOnly();
                private static readonly string[] _youEnterHallFieldNames = new string[] {  };
                private static readonly uint[] _youEnterHallFieldTags = new uint[] {  };
                public static YouEnterHall DefaultInstance {
                  get { return defaultInstance; }
                }
                
                public override YouEnterHall DefaultInstanceForType {
                  get { return DefaultInstance; }
                }
                
                protected override YouEnterHall ThisMessage {
                  get { return this; }
                }
                
                public static pbd::MessageDescriptor Descriptor {
                  get { return global::protos.Proto.Gilgamesh.internal__static_protos_Public_Stc_Hall_YouEnterHall__Descriptor; }
                }
                
                protected override pb::FieldAccess.FieldAccessorTable<YouEnterHall, YouEnterHall.Builder> InternalFieldAccessors {
                  get { return global::protos.Proto.Gilgamesh.internal__static_protos_Public_Stc_Hall_YouEnterHall__FieldAccessorTable; }
                }
                
                public override bool IsInitialized {
                  get {
                    return true;
                  }
                }
                
                public override void WriteTo(pb::ICodedOutputStream output) {
                  CalcSerializedSize();
                  string[] field_names = _youEnterHallFieldNames;
                  UnknownFields.WriteTo(output);
                }
                
                private int memoizedSerializedSize = -1;
                public override int SerializedSize {
                  get {
                    int size = memoizedSerializedSize;
                    if (size != -1) return size;
                    return CalcSerializedSize();
                  }
                }
                
                private int CalcSerializedSize() {
                  int size = memoizedSerializedSize;
                  if (size != -1) return size;
                  
                  size = 0;
                  size += UnknownFields.SerializedSize;
                  memoizedSerializedSize = size;
                  return size;
                }
                public static YouEnterHall ParseFrom(pb::ByteString data) {
                  return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
                }
                public static YouEnterHall ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
                  return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
                }
                public static YouEnterHall ParseFrom(byte[] data) {
                  return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
                }
                public static YouEnterHall ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
                  return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
                }
                public static YouEnterHall ParseFrom(global::System.IO.Stream input) {
                  return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
                }
                public static YouEnterHall ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
                  return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
                }
                public static YouEnterHall ParseDelimitedFrom(global::System.IO.Stream input) {
                  return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
                }
                public static YouEnterHall ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
                  return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
                }
                public static YouEnterHall ParseFrom(pb::ICodedInputStream input) {
                  return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
                }
                public static YouEnterHall ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
                  return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
                }
                private YouEnterHall MakeReadOnly() {
                  return this;
                }
                
                public static Builder CreateBuilder() { return new Builder(); }
                public override Builder ToBuilder() { return CreateBuilder(this); }
                public override Builder CreateBuilderForType() { return new Builder(); }
                public static Builder CreateBuilder(YouEnterHall prototype) {
                  return new Builder(prototype);
                }
                
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
                public sealed partial class Builder : pb::GeneratedBuilder<YouEnterHall, Builder> {
                  protected override Builder ThisBuilder {
                    get { return this; }
                  }
                  public Builder() {
                    result = DefaultInstance;
                    resultIsReadOnly = true;
                  }
                  internal Builder(YouEnterHall cloneFrom) {
                    result = cloneFrom;
                    resultIsReadOnly = true;
                  }
                  
                  private bool resultIsReadOnly;
                  private YouEnterHall result;
                  
                  private YouEnterHall PrepareBuilder() {
                    if (resultIsReadOnly) {
                      YouEnterHall original = result;
                      result = new YouEnterHall();
                      resultIsReadOnly = false;
                      MergeFrom(original);
                    }
                    return result;
                  }
                  
                  public override bool IsInitialized {
                    get { return result.IsInitialized; }
                  }
                  
                  protected override YouEnterHall MessageBeingBuilt {
                    get { return PrepareBuilder(); }
                  }
                  
                  public override Builder Clear() {
                    result = DefaultInstance;
                    resultIsReadOnly = true;
                    return this;
                  }
                  
                  public override Builder Clone() {
                    if (resultIsReadOnly) {
                      return new Builder(result);
                    } else {
                      return new Builder().MergeFrom(result);
                    }
                  }
                  
                  public override pbd::MessageDescriptor DescriptorForType {
                    get { return global::protos.Public.Types.Stc.Types.Hall.Types.YouEnterHall.Descriptor; }
                  }
                  
                  public override YouEnterHall DefaultInstanceForType {
                    get { return global::protos.Public.Types.Stc.Types.Hall.Types.YouEnterHall.DefaultInstance; }
                  }
                  
                  public override YouEnterHall BuildPartial() {
                    if (resultIsReadOnly) {
                      return result;
                    }
                    resultIsReadOnly = true;
                    return result.MakeReadOnly();
                  }
                  
                  public override Builder MergeFrom(pb::IMessage other) {
                    if (other is YouEnterHall) {
                      return MergeFrom((YouEnterHall) other);
                    } else {
                      base.MergeFrom(other);
                      return this;
                    }
                  }
                  
                  public override Builder MergeFrom(YouEnterHall other) {
                    if (other == global::protos.Public.Types.Stc.Types.Hall.Types.YouEnterHall.DefaultInstance) return this;
                    PrepareBuilder();
                    this.MergeUnknownFields(other.UnknownFields);
                    return this;
                  }
                  
                  public override Builder MergeFrom(pb::ICodedInputStream input) {
                    return MergeFrom(input, pb::ExtensionRegistry.Empty);
                  }
                  
                  public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
                    PrepareBuilder();
                    pb::UnknownFieldSet.Builder unknownFields = null;
                    uint tag;
                    string field_name;
                    while (input.ReadTag(out tag, out field_name)) {
                      if(tag == 0 && field_name != null) {
                        int field_ordinal = global::System.Array.BinarySearch(_youEnterHallFieldNames, field_name, global::System.StringComparer.Ordinal);
                        if(field_ordinal >= 0)
                          tag = _youEnterHallFieldTags[field_ordinal];
                        else {
                          if (unknownFields == null) {
                            unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                          }
                          ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                          continue;
                        }
                      }
                      switch (tag) {
                        case 0: {
                          throw pb::InvalidProtocolBufferException.InvalidTag();
                        }
                        default: {
                          if (pb::WireFormat.IsEndGroupTag(tag)) {
                            if (unknownFields != null) {
                              this.UnknownFields = unknownFields.Build();
                            }
                            return this;
                          }
                          if (unknownFields == null) {
                            unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                          }
                          ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                          break;
                        }
                      }
                    }
                    
                    if (unknownFields != null) {
                      this.UnknownFields = unknownFields.Build();
                    }
                    return this;
                  }
                  
                }
                static YouEnterHall() {
                  object.ReferenceEquals(global::protos.Proto.Gilgamesh.Descriptor, null);
                }
              }
              
              [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
              public sealed partial class YouLeaveHall : pb::GeneratedMessage<YouLeaveHall, YouLeaveHall.Builder> {
                private YouLeaveHall() { }
                private static readonly YouLeaveHall defaultInstance = new YouLeaveHall().MakeReadOnly();
                private static readonly string[] _youLeaveHallFieldNames = new string[] {  };
                private static readonly uint[] _youLeaveHallFieldTags = new uint[] {  };
                public static YouLeaveHall DefaultInstance {
                  get { return defaultInstance; }
                }
                
                public override YouLeaveHall DefaultInstanceForType {
                  get { return DefaultInstance; }
                }
                
                protected override YouLeaveHall ThisMessage {
                  get { return this; }
                }
                
                public static pbd::MessageDescriptor Descriptor {
                  get { return global::protos.Proto.Gilgamesh.internal__static_protos_Public_Stc_Hall_YouLeaveHall__Descriptor; }
                }
                
                protected override pb::FieldAccess.FieldAccessorTable<YouLeaveHall, YouLeaveHall.Builder> InternalFieldAccessors {
                  get { return global::protos.Proto.Gilgamesh.internal__static_protos_Public_Stc_Hall_YouLeaveHall__FieldAccessorTable; }
                }
                
                public override bool IsInitialized {
                  get {
                    return true;
                  }
                }
                
                public override void WriteTo(pb::ICodedOutputStream output) {
                  CalcSerializedSize();
                  string[] field_names = _youLeaveHallFieldNames;
                  UnknownFields.WriteTo(output);
                }
                
                private int memoizedSerializedSize = -1;
                public override int SerializedSize {
                  get {
                    int size = memoizedSerializedSize;
                    if (size != -1) return size;
                    return CalcSerializedSize();
                  }
                }
                
                private int CalcSerializedSize() {
                  int size = memoizedSerializedSize;
                  if (size != -1) return size;
                  
                  size = 0;
                  size += UnknownFields.SerializedSize;
                  memoizedSerializedSize = size;
                  return size;
                }
                public static YouLeaveHall ParseFrom(pb::ByteString data) {
                  return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
                }
                public static YouLeaveHall ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
                  return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
                }
                public static YouLeaveHall ParseFrom(byte[] data) {
                  return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
                }
                public static YouLeaveHall ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
                  return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
                }
                public static YouLeaveHall ParseFrom(global::System.IO.Stream input) {
                  return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
                }
                public static YouLeaveHall ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
                  return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
                }
                public static YouLeaveHall ParseDelimitedFrom(global::System.IO.Stream input) {
                  return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
                }
                public static YouLeaveHall ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
                  return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
                }
                public static YouLeaveHall ParseFrom(pb::ICodedInputStream input) {
                  return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
                }
                public static YouLeaveHall ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
                  return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
                }
                private YouLeaveHall MakeReadOnly() {
                  return this;
                }
                
                public static Builder CreateBuilder() { return new Builder(); }
                public override Builder ToBuilder() { return CreateBuilder(this); }
                public override Builder CreateBuilderForType() { return new Builder(); }
                public static Builder CreateBuilder(YouLeaveHall prototype) {
                  return new Builder(prototype);
                }
                
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
                public sealed partial class Builder : pb::GeneratedBuilder<YouLeaveHall, Builder> {
                  protected override Builder ThisBuilder {
                    get { return this; }
                  }
                  public Builder() {
                    result = DefaultInstance;
                    resultIsReadOnly = true;
                  }
                  internal Builder(YouLeaveHall cloneFrom) {
                    result = cloneFrom;
                    resultIsReadOnly = true;
                  }
                  
                  private bool resultIsReadOnly;
                  private YouLeaveHall result;
                  
                  private YouLeaveHall PrepareBuilder() {
                    if (resultIsReadOnly) {
                      YouLeaveHall original = result;
                      result = new YouLeaveHall();
                      resultIsReadOnly = false;
                      MergeFrom(original);
                    }
                    return result;
                  }
                  
                  public override bool IsInitialized {
                    get { return result.IsInitialized; }
                  }
                  
                  protected override YouLeaveHall MessageBeingBuilt {
                    get { return PrepareBuilder(); }
                  }
                  
                  public override Builder Clear() {
                    result = DefaultInstance;
                    resultIsReadOnly = true;
                    return this;
                  }
                  
                  public override Builder Clone() {
                    if (resultIsReadOnly) {
                      return new Builder(result);
                    } else {
                      return new Builder().MergeFrom(result);
                    }
                  }
                  
                  public override pbd::MessageDescriptor DescriptorForType {
                    get { return global::protos.Public.Types.Stc.Types.Hall.Types.YouLeaveHall.Descriptor; }
                  }
                  
                  public override YouLeaveHall DefaultInstanceForType {
                    get { return global::protos.Public.Types.Stc.Types.Hall.Types.YouLeaveHall.DefaultInstance; }
                  }
                  
                  public override YouLeaveHall BuildPartial() {
                    if (resultIsReadOnly) {
                      return result;
                    }
                    resultIsReadOnly = true;
                    return result.MakeReadOnly();
                  }
                  
                  public override Builder MergeFrom(pb::IMessage other) {
                    if (other is YouLeaveHall) {
                      return MergeFrom((YouLeaveHall) other);
                    } else {
                      base.MergeFrom(other);
                      return this;
                    }
                  }
                  
                  public override Builder MergeFrom(YouLeaveHall other) {
                    if (other == global::protos.Public.Types.Stc.Types.Hall.Types.YouLeaveHall.DefaultInstance) return this;
                    PrepareBuilder();
                    this.MergeUnknownFields(other.UnknownFields);
                    return this;
                  }
                  
                  public override Builder MergeFrom(pb::ICodedInputStream input) {
                    return MergeFrom(input, pb::ExtensionRegistry.Empty);
                  }
                  
                  public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
                    PrepareBuilder();
                    pb::UnknownFieldSet.Builder unknownFields = null;
                    uint tag;
                    string field_name;
                    while (input.ReadTag(out tag, out field_name)) {
                      if(tag == 0 && field_name != null) {
                        int field_ordinal = global::System.Array.BinarySearch(_youLeaveHallFieldNames, field_name, global::System.StringComparer.Ordinal);
                        if(field_ordinal >= 0)
                          tag = _youLeaveHallFieldTags[field_ordinal];
                        else {
                          if (unknownFields == null) {
                            unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                          }
                          ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                          continue;
                        }
                      }
                      switch (tag) {
                        case 0: {
                          throw pb::InvalidProtocolBufferException.InvalidTag();
                        }
                        default: {
                          if (pb::WireFormat.IsEndGroupTag(tag)) {
                            if (unknownFields != null) {
                              this.UnknownFields = unknownFields.Build();
                            }
                            return this;
                          }
                          if (unknownFields == null) {
                            unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                          }
                          ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                          break;
                        }
                      }
                    }
                    
                    if (unknownFields != null) {
                      this.UnknownFields = unknownFields.Build();
                    }
                    return this;
                  }
                  
                }
                static YouLeaveHall() {
                  object.ReferenceEquals(global::protos.Proto.Gilgamesh.Descriptor, null);
                }
              }
              
            }
            #endregion
            
            public override bool IsInitialized {
              get {
                return true;
              }
            }
            
            public override void WriteTo(pb::ICodedOutputStream output) {
              CalcSerializedSize();
              string[] field_names = _hallFieldNames;
              UnknownFields.WriteTo(output);
            }
            
            private int memoizedSerializedSize = -1;
            public override int SerializedSize {
              get {
                int size = memoizedSerializedSize;
                if (size != -1) return size;
                return CalcSerializedSize();
              }
            }
            
            private int CalcSerializedSize() {
              int size = memoizedSerializedSize;
              if (size != -1) return size;
              
              size = 0;
              size += UnknownFields.SerializedSize;
              memoizedSerializedSize = size;
              return size;
            }
            public static Hall ParseFrom(pb::ByteString data) {
              return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
            }
            public static Hall ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
              return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
            }
            public static Hall ParseFrom(byte[] data) {
              return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
            }
            public static Hall ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
              return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
            }
            public static Hall ParseFrom(global::System.IO.Stream input) {
              return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
            }
            public static Hall ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
              return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
            }
            public static Hall ParseDelimitedFrom(global::System.IO.Stream input) {
              return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
            }
            public static Hall ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
              return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
            }
            public static Hall ParseFrom(pb::ICodedInputStream input) {
              return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
            }
            public static Hall ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
              return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
            }
            private Hall MakeReadOnly() {
              return this;
            }
            
            public static Builder CreateBuilder() { return new Builder(); }
            public override Builder ToBuilder() { return CreateBuilder(this); }
            public override Builder CreateBuilderForType() { return new Builder(); }
            public static Builder CreateBuilder(Hall prototype) {
              return new Builder(prototype);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sealed partial class Builder : pb::GeneratedBuilder<Hall, Builder> {
              protected override Builder ThisBuilder {
                get { return this; }
              }
              public Builder() {
                result = DefaultInstance;
                resultIsReadOnly = true;
              }
              internal Builder(Hall cloneFrom) {
                result = cloneFrom;
                resultIsReadOnly = true;
              }
              
              private bool resultIsReadOnly;
              private Hall result;
              
              private Hall PrepareBuilder() {
                if (resultIsReadOnly) {
                  Hall original = result;
                  result = new Hall();
                  resultIsReadOnly = false;
                  MergeFrom(original);
                }
                return result;
              }
              
              public override bool IsInitialized {
                get { return result.IsInitialized; }
              }
              
              protected override Hall MessageBeingBuilt {
                get { return PrepareBuilder(); }
              }
              
              public override Builder Clear() {
                result = DefaultInstance;
                resultIsReadOnly = true;
                return this;
              }
              
              public override Builder Clone() {
                if (resultIsReadOnly) {
                  return new Builder(result);
                } else {
                  return new Builder().MergeFrom(result);
                }
              }
              
              public override pbd::MessageDescriptor DescriptorForType {
                get { return global::protos.Public.Types.Stc.Types.Hall.Descriptor; }
              }
              
              public override Hall DefaultInstanceForType {
                get { return global::protos.Public.Types.Stc.Types.Hall.DefaultInstance; }
              }
              
              public override Hall BuildPartial() {
                if (resultIsReadOnly) {
                  return result;
                }
                resultIsReadOnly = true;
                return result.MakeReadOnly();
              }
              
              public override Builder MergeFrom(pb::IMessage other) {
                if (other is Hall) {
                  return MergeFrom((Hall) other);
                } else {
                  base.MergeFrom(other);
                  return this;
                }
              }
              
              public override Builder MergeFrom(Hall other) {
                if (other == global::protos.Public.Types.Stc.Types.Hall.DefaultInstance) return this;
                PrepareBuilder();
                this.MergeUnknownFields(other.UnknownFields);
                return this;
              }
              
              public override Builder MergeFrom(pb::ICodedInputStream input) {
                return MergeFrom(input, pb::ExtensionRegistry.Empty);
              }
              
              public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
                PrepareBuilder();
                pb::UnknownFieldSet.Builder unknownFields = null;
                uint tag;
                string field_name;
                while (input.ReadTag(out tag, out field_name)) {
                  if(tag == 0 && field_name != null) {
                    int field_ordinal = global::System.Array.BinarySearch(_hallFieldNames, field_name, global::System.StringComparer.Ordinal);
                    if(field_ordinal >= 0)
                      tag = _hallFieldTags[field_ordinal];
                    else {
                      if (unknownFields == null) {
                        unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                      }
                      ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                      continue;
                    }
                  }
                  switch (tag) {
                    case 0: {
                      throw pb::InvalidProtocolBufferException.InvalidTag();
                    }
                    default: {
                      if (pb::WireFormat.IsEndGroupTag(tag)) {
                        if (unknownFields != null) {
                          this.UnknownFields = unknownFields.Build();
                        }
                        return this;
                      }
                      if (unknownFields == null) {
                        unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                      }
                      ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                      break;
                    }
                  }
                }
                
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              
            }
            static Hall() {
              object.ReferenceEquals(global::protos.Proto.Gilgamesh.Descriptor, null);
            }
          }
          
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
          public sealed partial class Duel : pb::GeneratedMessage<Duel, Duel.Builder> {
            private Duel() { }
            private static readonly Duel defaultInstance = new Duel().MakeReadOnly();
            private static readonly string[] _duelFieldNames = new string[] { "Data" };
            private static readonly uint[] _duelFieldTags = new uint[] { 10 };
            public static Duel DefaultInstance {
              get { return defaultInstance; }
            }
            
            public override Duel DefaultInstanceForType {
              get { return DefaultInstance; }
            }
            
            protected override Duel ThisMessage {
              get { return this; }
            }
            
            public static pbd::MessageDescriptor Descriptor {
              get { return global::protos.Proto.Gilgamesh.internal__static_protos_Public_Stc_Duel__Descriptor; }
            }
            
            protected override pb::FieldAccess.FieldAccessorTable<Duel, Duel.Builder> InternalFieldAccessors {
              get { return global::protos.Proto.Gilgamesh.internal__static_protos_Public_Stc_Duel__FieldAccessorTable; }
            }
            
            public const int DataFieldNumber = 1;
            private bool hasData;
            private pb::ByteString data_ = pb::ByteString.Empty;
            public bool HasData {
              get { return hasData; }
            }
            public pb::ByteString Data {
              get { return data_; }
            }
            
            public override bool IsInitialized {
              get {
                return true;
              }
            }
            
            public override void WriteTo(pb::ICodedOutputStream output) {
              CalcSerializedSize();
              string[] field_names = _duelFieldNames;
              if (hasData) {
                output.WriteBytes(1, field_names[0], Data);
              }
              UnknownFields.WriteTo(output);
            }
            
            private int memoizedSerializedSize = -1;
            public override int SerializedSize {
              get {
                int size = memoizedSerializedSize;
                if (size != -1) return size;
                return CalcSerializedSize();
              }
            }
            
            private int CalcSerializedSize() {
              int size = memoizedSerializedSize;
              if (size != -1) return size;
              
              size = 0;
              if (hasData) {
                size += pb::CodedOutputStream.ComputeBytesSize(1, Data);
              }
              size += UnknownFields.SerializedSize;
              memoizedSerializedSize = size;
              return size;
            }
            public static Duel ParseFrom(pb::ByteString data) {
              return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
            }
            public static Duel ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
              return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
            }
            public static Duel ParseFrom(byte[] data) {
              return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
            }
            public static Duel ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
              return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
            }
            public static Duel ParseFrom(global::System.IO.Stream input) {
              return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
            }
            public static Duel ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
              return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
            }
            public static Duel ParseDelimitedFrom(global::System.IO.Stream input) {
              return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
            }
            public static Duel ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
              return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
            }
            public static Duel ParseFrom(pb::ICodedInputStream input) {
              return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
            }
            public static Duel ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
              return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
            }
            private Duel MakeReadOnly() {
              return this;
            }
            
            public static Builder CreateBuilder() { return new Builder(); }
            public override Builder ToBuilder() { return CreateBuilder(this); }
            public override Builder CreateBuilderForType() { return new Builder(); }
            public static Builder CreateBuilder(Duel prototype) {
              return new Builder(prototype);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sealed partial class Builder : pb::GeneratedBuilder<Duel, Builder> {
              protected override Builder ThisBuilder {
                get { return this; }
              }
              public Builder() {
                result = DefaultInstance;
                resultIsReadOnly = true;
              }
              internal Builder(Duel cloneFrom) {
                result = cloneFrom;
                resultIsReadOnly = true;
              }
              
              private bool resultIsReadOnly;
              private Duel result;
              
              private Duel PrepareBuilder() {
                if (resultIsReadOnly) {
                  Duel original = result;
                  result = new Duel();
                  resultIsReadOnly = false;
                  MergeFrom(original);
                }
                return result;
              }
              
              public override bool IsInitialized {
                get { return result.IsInitialized; }
              }
              
              protected override Duel MessageBeingBuilt {
                get { return PrepareBuilder(); }
              }
              
              public override Builder Clear() {
                result = DefaultInstance;
                resultIsReadOnly = true;
                return this;
              }
              
              public override Builder Clone() {
                if (resultIsReadOnly) {
                  return new Builder(result);
                } else {
                  return new Builder().MergeFrom(result);
                }
              }
              
              public override pbd::MessageDescriptor DescriptorForType {
                get { return global::protos.Public.Types.Stc.Types.Duel.Descriptor; }
              }
              
              public override Duel DefaultInstanceForType {
                get { return global::protos.Public.Types.Stc.Types.Duel.DefaultInstance; }
              }
              
              public override Duel BuildPartial() {
                if (resultIsReadOnly) {
                  return result;
                }
                resultIsReadOnly = true;
                return result.MakeReadOnly();
              }
              
              public override Builder MergeFrom(pb::IMessage other) {
                if (other is Duel) {
                  return MergeFrom((Duel) other);
                } else {
                  base.MergeFrom(other);
                  return this;
                }
              }
              
              public override Builder MergeFrom(Duel other) {
                if (other == global::protos.Public.Types.Stc.Types.Duel.DefaultInstance) return this;
                PrepareBuilder();
                if (other.HasData) {
                  Data = other.Data;
                }
                this.MergeUnknownFields(other.UnknownFields);
                return this;
              }
              
              public override Builder MergeFrom(pb::ICodedInputStream input) {
                return MergeFrom(input, pb::ExtensionRegistry.Empty);
              }
              
              public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
                PrepareBuilder();
                pb::UnknownFieldSet.Builder unknownFields = null;
                uint tag;
                string field_name;
                while (input.ReadTag(out tag, out field_name)) {
                  if(tag == 0 && field_name != null) {
                    int field_ordinal = global::System.Array.BinarySearch(_duelFieldNames, field_name, global::System.StringComparer.Ordinal);
                    if(field_ordinal >= 0)
                      tag = _duelFieldTags[field_ordinal];
                    else {
                      if (unknownFields == null) {
                        unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                      }
                      ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                      continue;
                    }
                  }
                  switch (tag) {
                    case 0: {
                      throw pb::InvalidProtocolBufferException.InvalidTag();
                    }
                    default: {
                      if (pb::WireFormat.IsEndGroupTag(tag)) {
                        if (unknownFields != null) {
                          this.UnknownFields = unknownFields.Build();
                        }
                        return this;
                      }
                      if (unknownFields == null) {
                        unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                      }
                      ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                      break;
                    }
                    case 10: {
                      result.hasData = input.ReadBytes(ref result.data_);
                      break;
                    }
                  }
                }
                
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              
              
              public bool HasData {
                get { return result.hasData; }
              }
              public pb::ByteString Data {
                get { return result.Data; }
                set { SetData(value); }
              }
              public Builder SetData(pb::ByteString value) {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasData = true;
                result.data_ = value;
                return this;
              }
              public Builder ClearData() {
                PrepareBuilder();
                result.hasData = false;
                result.data_ = pb::ByteString.Empty;
                return this;
              }
            }
            static Duel() {
              object.ReferenceEquals(global::protos.Proto.Gilgamesh.Descriptor, null);
            }
          }
          
        }
        #endregion
        
        public override bool IsInitialized {
          get {
            return true;
          }
        }
        
        public override void WriteTo(pb::ICodedOutputStream output) {
          CalcSerializedSize();
          string[] field_names = _stcFieldNames;
          UnknownFields.WriteTo(output);
        }
        
        private int memoizedSerializedSize = -1;
        public override int SerializedSize {
          get {
            int size = memoizedSerializedSize;
            if (size != -1) return size;
            return CalcSerializedSize();
          }
        }
        
        private int CalcSerializedSize() {
          int size = memoizedSerializedSize;
          if (size != -1) return size;
          
          size = 0;
          size += UnknownFields.SerializedSize;
          memoizedSerializedSize = size;
          return size;
        }
        public static Stc ParseFrom(pb::ByteString data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static Stc ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static Stc ParseFrom(byte[] data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static Stc ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static Stc ParseFrom(global::System.IO.Stream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static Stc ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static Stc ParseDelimitedFrom(global::System.IO.Stream input) {
          return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static Stc ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static Stc ParseFrom(pb::ICodedInputStream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static Stc ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private Stc MakeReadOnly() {
          return this;
        }
        
        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(Stc prototype) {
          return new Builder(prototype);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Builder : pb::GeneratedBuilder<Stc, Builder> {
          protected override Builder ThisBuilder {
            get { return this; }
          }
          public Builder() {
            result = DefaultInstance;
            resultIsReadOnly = true;
          }
          internal Builder(Stc cloneFrom) {
            result = cloneFrom;
            resultIsReadOnly = true;
          }
          
          private bool resultIsReadOnly;
          private Stc result;
          
          private Stc PrepareBuilder() {
            if (resultIsReadOnly) {
              Stc original = result;
              result = new Stc();
              resultIsReadOnly = false;
              MergeFrom(original);
            }
            return result;
          }
          
          public override bool IsInitialized {
            get { return result.IsInitialized; }
          }
          
          protected override Stc MessageBeingBuilt {
            get { return PrepareBuilder(); }
          }
          
          public override Builder Clear() {
            result = DefaultInstance;
            resultIsReadOnly = true;
            return this;
          }
          
          public override Builder Clone() {
            if (resultIsReadOnly) {
              return new Builder(result);
            } else {
              return new Builder().MergeFrom(result);
            }
          }
          
          public override pbd::MessageDescriptor DescriptorForType {
            get { return global::protos.Public.Types.Stc.Descriptor; }
          }
          
          public override Stc DefaultInstanceForType {
            get { return global::protos.Public.Types.Stc.DefaultInstance; }
          }
          
          public override Stc BuildPartial() {
            if (resultIsReadOnly) {
              return result;
            }
            resultIsReadOnly = true;
            return result.MakeReadOnly();
          }
          
          public override Builder MergeFrom(pb::IMessage other) {
            if (other is Stc) {
              return MergeFrom((Stc) other);
            } else {
              base.MergeFrom(other);
              return this;
            }
          }
          
          public override Builder MergeFrom(Stc other) {
            if (other == global::protos.Public.Types.Stc.DefaultInstance) return this;
            PrepareBuilder();
            this.MergeUnknownFields(other.UnknownFields);
            return this;
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input) {
            return MergeFrom(input, pb::ExtensionRegistry.Empty);
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
            PrepareBuilder();
            pb::UnknownFieldSet.Builder unknownFields = null;
            uint tag;
            string field_name;
            while (input.ReadTag(out tag, out field_name)) {
              if(tag == 0 && field_name != null) {
                int field_ordinal = global::System.Array.BinarySearch(_stcFieldNames, field_name, global::System.StringComparer.Ordinal);
                if(field_ordinal >= 0)
                  tag = _stcFieldTags[field_ordinal];
                else {
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  continue;
                }
              }
              switch (tag) {
                case 0: {
                  throw pb::InvalidProtocolBufferException.InvalidTag();
                }
                default: {
                  if (pb::WireFormat.IsEndGroupTag(tag)) {
                    if (unknownFields != null) {
                      this.UnknownFields = unknownFields.Build();
                    }
                    return this;
                  }
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  break;
                }
              }
            }
            
            if (unknownFields != null) {
              this.UnknownFields = unknownFields.Build();
            }
            return this;
          }
          
        }
        static Stc() {
          object.ReferenceEquals(global::protos.Proto.Gilgamesh.Descriptor, null);
        }
      }
      
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class Cts : pb::GeneratedMessage<Cts, Cts.Builder> {
        private Cts() { }
        private static readonly Cts defaultInstance = new Cts().MakeReadOnly();
        private static readonly string[] _ctsFieldNames = new string[] {  };
        private static readonly uint[] _ctsFieldTags = new uint[] {  };
        public static Cts DefaultInstance {
          get { return defaultInstance; }
        }
        
        public override Cts DefaultInstanceForType {
          get { return DefaultInstance; }
        }
        
        protected override Cts ThisMessage {
          get { return this; }
        }
        
        public static pbd::MessageDescriptor Descriptor {
          get { return global::protos.Proto.Gilgamesh.internal__static_protos_Public_Cts__Descriptor; }
        }
        
        protected override pb::FieldAccess.FieldAccessorTable<Cts, Cts.Builder> InternalFieldAccessors {
          get { return global::protos.Proto.Gilgamesh.internal__static_protos_Public_Cts__FieldAccessorTable; }
        }
        
        #region Nested types
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static partial class Types {
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
          public sealed partial class Login : pb::GeneratedMessage<Login, Login.Builder> {
            private Login() { }
            private static readonly Login defaultInstance = new Login().MakeReadOnly();
            private static readonly string[] _loginFieldNames = new string[] { "Account", "Password" };
            private static readonly uint[] _loginFieldTags = new uint[] { 10, 18 };
            public static Login DefaultInstance {
              get { return defaultInstance; }
            }
            
            public override Login DefaultInstanceForType {
              get { return DefaultInstance; }
            }
            
            protected override Login ThisMessage {
              get { return this; }
            }
            
            public static pbd::MessageDescriptor Descriptor {
              get { return global::protos.Proto.Gilgamesh.internal__static_protos_Public_Cts_Login__Descriptor; }
            }
            
            protected override pb::FieldAccess.FieldAccessorTable<Login, Login.Builder> InternalFieldAccessors {
              get { return global::protos.Proto.Gilgamesh.internal__static_protos_Public_Cts_Login__FieldAccessorTable; }
            }
            
            public const int AccountFieldNumber = 1;
            private bool hasAccount;
            private string account_ = "";
            public bool HasAccount {
              get { return hasAccount; }
            }
            public string Account {
              get { return account_; }
            }
            
            public const int PasswordFieldNumber = 2;
            private bool hasPassword;
            private pb::ByteString password_ = pb::ByteString.Empty;
            public bool HasPassword {
              get { return hasPassword; }
            }
            public pb::ByteString Password {
              get { return password_; }
            }
            
            public override bool IsInitialized {
              get {
                return true;
              }
            }
            
            public override void WriteTo(pb::ICodedOutputStream output) {
              CalcSerializedSize();
              string[] field_names = _loginFieldNames;
              if (hasAccount) {
                output.WriteString(1, field_names[0], Account);
              }
              if (hasPassword) {
                output.WriteBytes(2, field_names[1], Password);
              }
              UnknownFields.WriteTo(output);
            }
            
            private int memoizedSerializedSize = -1;
            public override int SerializedSize {
              get {
                int size = memoizedSerializedSize;
                if (size != -1) return size;
                return CalcSerializedSize();
              }
            }
            
            private int CalcSerializedSize() {
              int size = memoizedSerializedSize;
              if (size != -1) return size;
              
              size = 0;
              if (hasAccount) {
                size += pb::CodedOutputStream.ComputeStringSize(1, Account);
              }
              if (hasPassword) {
                size += pb::CodedOutputStream.ComputeBytesSize(2, Password);
              }
              size += UnknownFields.SerializedSize;
              memoizedSerializedSize = size;
              return size;
            }
            public static Login ParseFrom(pb::ByteString data) {
              return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
            }
            public static Login ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
              return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
            }
            public static Login ParseFrom(byte[] data) {
              return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
            }
            public static Login ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
              return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
            }
            public static Login ParseFrom(global::System.IO.Stream input) {
              return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
            }
            public static Login ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
              return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
            }
            public static Login ParseDelimitedFrom(global::System.IO.Stream input) {
              return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
            }
            public static Login ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
              return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
            }
            public static Login ParseFrom(pb::ICodedInputStream input) {
              return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
            }
            public static Login ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
              return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
            }
            private Login MakeReadOnly() {
              return this;
            }
            
            public static Builder CreateBuilder() { return new Builder(); }
            public override Builder ToBuilder() { return CreateBuilder(this); }
            public override Builder CreateBuilderForType() { return new Builder(); }
            public static Builder CreateBuilder(Login prototype) {
              return new Builder(prototype);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sealed partial class Builder : pb::GeneratedBuilder<Login, Builder> {
              protected override Builder ThisBuilder {
                get { return this; }
              }
              public Builder() {
                result = DefaultInstance;
                resultIsReadOnly = true;
              }
              internal Builder(Login cloneFrom) {
                result = cloneFrom;
                resultIsReadOnly = true;
              }
              
              private bool resultIsReadOnly;
              private Login result;
              
              private Login PrepareBuilder() {
                if (resultIsReadOnly) {
                  Login original = result;
                  result = new Login();
                  resultIsReadOnly = false;
                  MergeFrom(original);
                }
                return result;
              }
              
              public override bool IsInitialized {
                get { return result.IsInitialized; }
              }
              
              protected override Login MessageBeingBuilt {
                get { return PrepareBuilder(); }
              }
              
              public override Builder Clear() {
                result = DefaultInstance;
                resultIsReadOnly = true;
                return this;
              }
              
              public override Builder Clone() {
                if (resultIsReadOnly) {
                  return new Builder(result);
                } else {
                  return new Builder().MergeFrom(result);
                }
              }
              
              public override pbd::MessageDescriptor DescriptorForType {
                get { return global::protos.Public.Types.Cts.Types.Login.Descriptor; }
              }
              
              public override Login DefaultInstanceForType {
                get { return global::protos.Public.Types.Cts.Types.Login.DefaultInstance; }
              }
              
              public override Login BuildPartial() {
                if (resultIsReadOnly) {
                  return result;
                }
                resultIsReadOnly = true;
                return result.MakeReadOnly();
              }
              
              public override Builder MergeFrom(pb::IMessage other) {
                if (other is Login) {
                  return MergeFrom((Login) other);
                } else {
                  base.MergeFrom(other);
                  return this;
                }
              }
              
              public override Builder MergeFrom(Login other) {
                if (other == global::protos.Public.Types.Cts.Types.Login.DefaultInstance) return this;
                PrepareBuilder();
                if (other.HasAccount) {
                  Account = other.Account;
                }
                if (other.HasPassword) {
                  Password = other.Password;
                }
                this.MergeUnknownFields(other.UnknownFields);
                return this;
              }
              
              public override Builder MergeFrom(pb::ICodedInputStream input) {
                return MergeFrom(input, pb::ExtensionRegistry.Empty);
              }
              
              public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
                PrepareBuilder();
                pb::UnknownFieldSet.Builder unknownFields = null;
                uint tag;
                string field_name;
                while (input.ReadTag(out tag, out field_name)) {
                  if(tag == 0 && field_name != null) {
                    int field_ordinal = global::System.Array.BinarySearch(_loginFieldNames, field_name, global::System.StringComparer.Ordinal);
                    if(field_ordinal >= 0)
                      tag = _loginFieldTags[field_ordinal];
                    else {
                      if (unknownFields == null) {
                        unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                      }
                      ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                      continue;
                    }
                  }
                  switch (tag) {
                    case 0: {
                      throw pb::InvalidProtocolBufferException.InvalidTag();
                    }
                    default: {
                      if (pb::WireFormat.IsEndGroupTag(tag)) {
                        if (unknownFields != null) {
                          this.UnknownFields = unknownFields.Build();
                        }
                        return this;
                      }
                      if (unknownFields == null) {
                        unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                      }
                      ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                      break;
                    }
                    case 10: {
                      result.hasAccount = input.ReadString(ref result.account_);
                      break;
                    }
                    case 18: {
                      result.hasPassword = input.ReadBytes(ref result.password_);
                      break;
                    }
                  }
                }
                
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              
              
              public bool HasAccount {
                get { return result.hasAccount; }
              }
              public string Account {
                get { return result.Account; }
                set { SetAccount(value); }
              }
              public Builder SetAccount(string value) {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasAccount = true;
                result.account_ = value;
                return this;
              }
              public Builder ClearAccount() {
                PrepareBuilder();
                result.hasAccount = false;
                result.account_ = "";
                return this;
              }
              
              public bool HasPassword {
                get { return result.hasPassword; }
              }
              public pb::ByteString Password {
                get { return result.Password; }
                set { SetPassword(value); }
              }
              public Builder SetPassword(pb::ByteString value) {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasPassword = true;
                result.password_ = value;
                return this;
              }
              public Builder ClearPassword() {
                PrepareBuilder();
                result.hasPassword = false;
                result.password_ = pb::ByteString.Empty;
                return this;
              }
            }
            static Login() {
              object.ReferenceEquals(global::protos.Proto.Gilgamesh.Descriptor, null);
            }
          }
          
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
          public sealed partial class Register : pb::GeneratedMessage<Register, Register.Builder> {
            private Register() { }
            private static readonly Register defaultInstance = new Register().MakeReadOnly();
            private static readonly string[] _registerFieldNames = new string[] { "Account", "Password" };
            private static readonly uint[] _registerFieldTags = new uint[] { 10, 18 };
            public static Register DefaultInstance {
              get { return defaultInstance; }
            }
            
            public override Register DefaultInstanceForType {
              get { return DefaultInstance; }
            }
            
            protected override Register ThisMessage {
              get { return this; }
            }
            
            public static pbd::MessageDescriptor Descriptor {
              get { return global::protos.Proto.Gilgamesh.internal__static_protos_Public_Cts_Register__Descriptor; }
            }
            
            protected override pb::FieldAccess.FieldAccessorTable<Register, Register.Builder> InternalFieldAccessors {
              get { return global::protos.Proto.Gilgamesh.internal__static_protos_Public_Cts_Register__FieldAccessorTable; }
            }
            
            public const int AccountFieldNumber = 1;
            private bool hasAccount;
            private string account_ = "";
            public bool HasAccount {
              get { return hasAccount; }
            }
            public string Account {
              get { return account_; }
            }
            
            public const int PasswordFieldNumber = 2;
            private bool hasPassword;
            private pb::ByteString password_ = pb::ByteString.Empty;
            public bool HasPassword {
              get { return hasPassword; }
            }
            public pb::ByteString Password {
              get { return password_; }
            }
            
            public override bool IsInitialized {
              get {
                return true;
              }
            }
            
            public override void WriteTo(pb::ICodedOutputStream output) {
              CalcSerializedSize();
              string[] field_names = _registerFieldNames;
              if (hasAccount) {
                output.WriteString(1, field_names[0], Account);
              }
              if (hasPassword) {
                output.WriteBytes(2, field_names[1], Password);
              }
              UnknownFields.WriteTo(output);
            }
            
            private int memoizedSerializedSize = -1;
            public override int SerializedSize {
              get {
                int size = memoizedSerializedSize;
                if (size != -1) return size;
                return CalcSerializedSize();
              }
            }
            
            private int CalcSerializedSize() {
              int size = memoizedSerializedSize;
              if (size != -1) return size;
              
              size = 0;
              if (hasAccount) {
                size += pb::CodedOutputStream.ComputeStringSize(1, Account);
              }
              if (hasPassword) {
                size += pb::CodedOutputStream.ComputeBytesSize(2, Password);
              }
              size += UnknownFields.SerializedSize;
              memoizedSerializedSize = size;
              return size;
            }
            public static Register ParseFrom(pb::ByteString data) {
              return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
            }
            public static Register ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
              return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
            }
            public static Register ParseFrom(byte[] data) {
              return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
            }
            public static Register ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
              return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
            }
            public static Register ParseFrom(global::System.IO.Stream input) {
              return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
            }
            public static Register ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
              return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
            }
            public static Register ParseDelimitedFrom(global::System.IO.Stream input) {
              return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
            }
            public static Register ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
              return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
            }
            public static Register ParseFrom(pb::ICodedInputStream input) {
              return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
            }
            public static Register ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
              return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
            }
            private Register MakeReadOnly() {
              return this;
            }
            
            public static Builder CreateBuilder() { return new Builder(); }
            public override Builder ToBuilder() { return CreateBuilder(this); }
            public override Builder CreateBuilderForType() { return new Builder(); }
            public static Builder CreateBuilder(Register prototype) {
              return new Builder(prototype);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sealed partial class Builder : pb::GeneratedBuilder<Register, Builder> {
              protected override Builder ThisBuilder {
                get { return this; }
              }
              public Builder() {
                result = DefaultInstance;
                resultIsReadOnly = true;
              }
              internal Builder(Register cloneFrom) {
                result = cloneFrom;
                resultIsReadOnly = true;
              }
              
              private bool resultIsReadOnly;
              private Register result;
              
              private Register PrepareBuilder() {
                if (resultIsReadOnly) {
                  Register original = result;
                  result = new Register();
                  resultIsReadOnly = false;
                  MergeFrom(original);
                }
                return result;
              }
              
              public override bool IsInitialized {
                get { return result.IsInitialized; }
              }
              
              protected override Register MessageBeingBuilt {
                get { return PrepareBuilder(); }
              }
              
              public override Builder Clear() {
                result = DefaultInstance;
                resultIsReadOnly = true;
                return this;
              }
              
              public override Builder Clone() {
                if (resultIsReadOnly) {
                  return new Builder(result);
                } else {
                  return new Builder().MergeFrom(result);
                }
              }
              
              public override pbd::MessageDescriptor DescriptorForType {
                get { return global::protos.Public.Types.Cts.Types.Register.Descriptor; }
              }
              
              public override Register DefaultInstanceForType {
                get { return global::protos.Public.Types.Cts.Types.Register.DefaultInstance; }
              }
              
              public override Register BuildPartial() {
                if (resultIsReadOnly) {
                  return result;
                }
                resultIsReadOnly = true;
                return result.MakeReadOnly();
              }
              
              public override Builder MergeFrom(pb::IMessage other) {
                if (other is Register) {
                  return MergeFrom((Register) other);
                } else {
                  base.MergeFrom(other);
                  return this;
                }
              }
              
              public override Builder MergeFrom(Register other) {
                if (other == global::protos.Public.Types.Cts.Types.Register.DefaultInstance) return this;
                PrepareBuilder();
                if (other.HasAccount) {
                  Account = other.Account;
                }
                if (other.HasPassword) {
                  Password = other.Password;
                }
                this.MergeUnknownFields(other.UnknownFields);
                return this;
              }
              
              public override Builder MergeFrom(pb::ICodedInputStream input) {
                return MergeFrom(input, pb::ExtensionRegistry.Empty);
              }
              
              public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
                PrepareBuilder();
                pb::UnknownFieldSet.Builder unknownFields = null;
                uint tag;
                string field_name;
                while (input.ReadTag(out tag, out field_name)) {
                  if(tag == 0 && field_name != null) {
                    int field_ordinal = global::System.Array.BinarySearch(_registerFieldNames, field_name, global::System.StringComparer.Ordinal);
                    if(field_ordinal >= 0)
                      tag = _registerFieldTags[field_ordinal];
                    else {
                      if (unknownFields == null) {
                        unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                      }
                      ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                      continue;
                    }
                  }
                  switch (tag) {
                    case 0: {
                      throw pb::InvalidProtocolBufferException.InvalidTag();
                    }
                    default: {
                      if (pb::WireFormat.IsEndGroupTag(tag)) {
                        if (unknownFields != null) {
                          this.UnknownFields = unknownFields.Build();
                        }
                        return this;
                      }
                      if (unknownFields == null) {
                        unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                      }
                      ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                      break;
                    }
                    case 10: {
                      result.hasAccount = input.ReadString(ref result.account_);
                      break;
                    }
                    case 18: {
                      result.hasPassword = input.ReadBytes(ref result.password_);
                      break;
                    }
                  }
                }
                
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              
              
              public bool HasAccount {
                get { return result.hasAccount; }
              }
              public string Account {
                get { return result.Account; }
                set { SetAccount(value); }
              }
              public Builder SetAccount(string value) {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasAccount = true;
                result.account_ = value;
                return this;
              }
              public Builder ClearAccount() {
                PrepareBuilder();
                result.hasAccount = false;
                result.account_ = "";
                return this;
              }
              
              public bool HasPassword {
                get { return result.hasPassword; }
              }
              public pb::ByteString Password {
                get { return result.Password; }
                set { SetPassword(value); }
              }
              public Builder SetPassword(pb::ByteString value) {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasPassword = true;
                result.password_ = value;
                return this;
              }
              public Builder ClearPassword() {
                PrepareBuilder();
                result.hasPassword = false;
                result.password_ = pb::ByteString.Empty;
                return this;
              }
            }
            static Register() {
              object.ReferenceEquals(global::protos.Proto.Gilgamesh.Descriptor, null);
            }
          }
          
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
          public sealed partial class Hall : pb::GeneratedMessage<Hall, Hall.Builder> {
            private Hall() { }
            private static readonly Hall defaultInstance = new Hall().MakeReadOnly();
            private static readonly string[] _hallFieldNames = new string[] {  };
            private static readonly uint[] _hallFieldTags = new uint[] {  };
            public static Hall DefaultInstance {
              get { return defaultInstance; }
            }
            
            public override Hall DefaultInstanceForType {
              get { return DefaultInstance; }
            }
            
            protected override Hall ThisMessage {
              get { return this; }
            }
            
            public static pbd::MessageDescriptor Descriptor {
              get { return global::protos.Proto.Gilgamesh.internal__static_protos_Public_Cts_Hall__Descriptor; }
            }
            
            protected override pb::FieldAccess.FieldAccessorTable<Hall, Hall.Builder> InternalFieldAccessors {
              get { return global::protos.Proto.Gilgamesh.internal__static_protos_Public_Cts_Hall__FieldAccessorTable; }
            }
            
            #region Nested types
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static partial class Types {
              [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
              public sealed partial class CreateRoom : pb::GeneratedMessage<CreateRoom, CreateRoom.Builder> {
                private CreateRoom() { }
                private static readonly CreateRoom defaultInstance = new CreateRoom().MakeReadOnly();
                private static readonly string[] _createRoomFieldNames = new string[] { "Option" };
                private static readonly uint[] _createRoomFieldTags = new uint[] { 10 };
                public static CreateRoom DefaultInstance {
                  get { return defaultInstance; }
                }
                
                public override CreateRoom DefaultInstanceForType {
                  get { return DefaultInstance; }
                }
                
                protected override CreateRoom ThisMessage {
                  get { return this; }
                }
                
                public static pbd::MessageDescriptor Descriptor {
                  get { return global::protos.Proto.Gilgamesh.internal__static_protos_Public_Cts_Hall_CreateRoom__Descriptor; }
                }
                
                protected override pb::FieldAccess.FieldAccessorTable<CreateRoom, CreateRoom.Builder> InternalFieldAccessors {
                  get { return global::protos.Proto.Gilgamesh.internal__static_protos_Public_Cts_Hall_CreateRoom__FieldAccessorTable; }
                }
                
                public const int OptionFieldNumber = 1;
                private bool hasOption;
                private global::protos.Public.Types.RoomOption option_;
                public bool HasOption {
                  get { return hasOption; }
                }
                public global::protos.Public.Types.RoomOption Option {
                  get { return option_ ?? global::protos.Public.Types.RoomOption.DefaultInstance; }
                }
                
                public override bool IsInitialized {
                  get {
                    return true;
                  }
                }
                
                public override void WriteTo(pb::ICodedOutputStream output) {
                  CalcSerializedSize();
                  string[] field_names = _createRoomFieldNames;
                  if (hasOption) {
                    output.WriteMessage(1, field_names[0], Option);
                  }
                  UnknownFields.WriteTo(output);
                }
                
                private int memoizedSerializedSize = -1;
                public override int SerializedSize {
                  get {
                    int size = memoizedSerializedSize;
                    if (size != -1) return size;
                    return CalcSerializedSize();
                  }
                }
                
                private int CalcSerializedSize() {
                  int size = memoizedSerializedSize;
                  if (size != -1) return size;
                  
                  size = 0;
                  if (hasOption) {
                    size += pb::CodedOutputStream.ComputeMessageSize(1, Option);
                  }
                  size += UnknownFields.SerializedSize;
                  memoizedSerializedSize = size;
                  return size;
                }
                public static CreateRoom ParseFrom(pb::ByteString data) {
                  return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
                }
                public static CreateRoom ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
                  return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
                }
                public static CreateRoom ParseFrom(byte[] data) {
                  return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
                }
                public static CreateRoom ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
                  return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
                }
                public static CreateRoom ParseFrom(global::System.IO.Stream input) {
                  return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
                }
                public static CreateRoom ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
                  return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
                }
                public static CreateRoom ParseDelimitedFrom(global::System.IO.Stream input) {
                  return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
                }
                public static CreateRoom ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
                  return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
                }
                public static CreateRoom ParseFrom(pb::ICodedInputStream input) {
                  return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
                }
                public static CreateRoom ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
                  return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
                }
                private CreateRoom MakeReadOnly() {
                  return this;
                }
                
                public static Builder CreateBuilder() { return new Builder(); }
                public override Builder ToBuilder() { return CreateBuilder(this); }
                public override Builder CreateBuilderForType() { return new Builder(); }
                public static Builder CreateBuilder(CreateRoom prototype) {
                  return new Builder(prototype);
                }
                
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
                public sealed partial class Builder : pb::GeneratedBuilder<CreateRoom, Builder> {
                  protected override Builder ThisBuilder {
                    get { return this; }
                  }
                  public Builder() {
                    result = DefaultInstance;
                    resultIsReadOnly = true;
                  }
                  internal Builder(CreateRoom cloneFrom) {
                    result = cloneFrom;
                    resultIsReadOnly = true;
                  }
                  
                  private bool resultIsReadOnly;
                  private CreateRoom result;
                  
                  private CreateRoom PrepareBuilder() {
                    if (resultIsReadOnly) {
                      CreateRoom original = result;
                      result = new CreateRoom();
                      resultIsReadOnly = false;
                      MergeFrom(original);
                    }
                    return result;
                  }
                  
                  public override bool IsInitialized {
                    get { return result.IsInitialized; }
                  }
                  
                  protected override CreateRoom MessageBeingBuilt {
                    get { return PrepareBuilder(); }
                  }
                  
                  public override Builder Clear() {
                    result = DefaultInstance;
                    resultIsReadOnly = true;
                    return this;
                  }
                  
                  public override Builder Clone() {
                    if (resultIsReadOnly) {
                      return new Builder(result);
                    } else {
                      return new Builder().MergeFrom(result);
                    }
                  }
                  
                  public override pbd::MessageDescriptor DescriptorForType {
                    get { return global::protos.Public.Types.Cts.Types.Hall.Types.CreateRoom.Descriptor; }
                  }
                  
                  public override CreateRoom DefaultInstanceForType {
                    get { return global::protos.Public.Types.Cts.Types.Hall.Types.CreateRoom.DefaultInstance; }
                  }
                  
                  public override CreateRoom BuildPartial() {
                    if (resultIsReadOnly) {
                      return result;
                    }
                    resultIsReadOnly = true;
                    return result.MakeReadOnly();
                  }
                  
                  public override Builder MergeFrom(pb::IMessage other) {
                    if (other is CreateRoom) {
                      return MergeFrom((CreateRoom) other);
                    } else {
                      base.MergeFrom(other);
                      return this;
                    }
                  }
                  
                  public override Builder MergeFrom(CreateRoom other) {
                    if (other == global::protos.Public.Types.Cts.Types.Hall.Types.CreateRoom.DefaultInstance) return this;
                    PrepareBuilder();
                    if (other.HasOption) {
                      MergeOption(other.Option);
                    }
                    this.MergeUnknownFields(other.UnknownFields);
                    return this;
                  }
                  
                  public override Builder MergeFrom(pb::ICodedInputStream input) {
                    return MergeFrom(input, pb::ExtensionRegistry.Empty);
                  }
                  
                  public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
                    PrepareBuilder();
                    pb::UnknownFieldSet.Builder unknownFields = null;
                    uint tag;
                    string field_name;
                    while (input.ReadTag(out tag, out field_name)) {
                      if(tag == 0 && field_name != null) {
                        int field_ordinal = global::System.Array.BinarySearch(_createRoomFieldNames, field_name, global::System.StringComparer.Ordinal);
                        if(field_ordinal >= 0)
                          tag = _createRoomFieldTags[field_ordinal];
                        else {
                          if (unknownFields == null) {
                            unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                          }
                          ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                          continue;
                        }
                      }
                      switch (tag) {
                        case 0: {
                          throw pb::InvalidProtocolBufferException.InvalidTag();
                        }
                        default: {
                          if (pb::WireFormat.IsEndGroupTag(tag)) {
                            if (unknownFields != null) {
                              this.UnknownFields = unknownFields.Build();
                            }
                            return this;
                          }
                          if (unknownFields == null) {
                            unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                          }
                          ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                          break;
                        }
                        case 10: {
                          global::protos.Public.Types.RoomOption.Builder subBuilder = global::protos.Public.Types.RoomOption.CreateBuilder();
                          if (result.hasOption) {
                            subBuilder.MergeFrom(Option);
                          }
                          input.ReadMessage(subBuilder, extensionRegistry);
                          Option = subBuilder.BuildPartial();
                          break;
                        }
                      }
                    }
                    
                    if (unknownFields != null) {
                      this.UnknownFields = unknownFields.Build();
                    }
                    return this;
                  }
                  
                  
                  public bool HasOption {
                   get { return result.hasOption; }
                  }
                  public global::protos.Public.Types.RoomOption Option {
                    get { return result.Option; }
                    set { SetOption(value); }
                  }
                  public Builder SetOption(global::protos.Public.Types.RoomOption value) {
                    pb::ThrowHelper.ThrowIfNull(value, "value");
                    PrepareBuilder();
                    result.hasOption = true;
                    result.option_ = value;
                    return this;
                  }
                  public Builder SetOption(global::protos.Public.Types.RoomOption.Builder builderForValue) {
                    pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                    PrepareBuilder();
                    result.hasOption = true;
                    result.option_ = builderForValue.Build();
                    return this;
                  }
                  public Builder MergeOption(global::protos.Public.Types.RoomOption value) {
                    pb::ThrowHelper.ThrowIfNull(value, "value");
                    PrepareBuilder();
                    if (result.hasOption &&
                        result.option_ != global::protos.Public.Types.RoomOption.DefaultInstance) {
                        result.option_ = global::protos.Public.Types.RoomOption.CreateBuilder(result.option_).MergeFrom(value).BuildPartial();
                    } else {
                      result.option_ = value;
                    }
                    result.hasOption = true;
                    return this;
                  }
                  public Builder ClearOption() {
                    PrepareBuilder();
                    result.hasOption = false;
                    result.option_ = null;
                    return this;
                  }
                }
                static CreateRoom() {
                  object.ReferenceEquals(global::protos.Proto.Gilgamesh.Descriptor, null);
                }
              }
              
              [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
              public sealed partial class EnterRoom : pb::GeneratedMessage<EnterRoom, EnterRoom.Builder> {
                private EnterRoom() { }
                private static readonly EnterRoom defaultInstance = new EnterRoom().MakeReadOnly();
                private static readonly string[] _enterRoomFieldNames = new string[] { "Id", "Password" };
                private static readonly uint[] _enterRoomFieldTags = new uint[] { 8, 18 };
                public static EnterRoom DefaultInstance {
                  get { return defaultInstance; }
                }
                
                public override EnterRoom DefaultInstanceForType {
                  get { return DefaultInstance; }
                }
                
                protected override EnterRoom ThisMessage {
                  get { return this; }
                }
                
                public static pbd::MessageDescriptor Descriptor {
                  get { return global::protos.Proto.Gilgamesh.internal__static_protos_Public_Cts_Hall_EnterRoom__Descriptor; }
                }
                
                protected override pb::FieldAccess.FieldAccessorTable<EnterRoom, EnterRoom.Builder> InternalFieldAccessors {
                  get { return global::protos.Proto.Gilgamesh.internal__static_protos_Public_Cts_Hall_EnterRoom__FieldAccessorTable; }
                }
                
                public const int IdFieldNumber = 1;
                private bool hasId;
                private ulong id_;
                public bool HasId {
                  get { return hasId; }
                }
                [global::System.CLSCompliant(false)]
                public ulong Id {
                  get { return id_; }
                }
                
                public const int PasswordFieldNumber = 2;
                private bool hasPassword;
                private string password_ = "";
                public bool HasPassword {
                  get { return hasPassword; }
                }
                public string Password {
                  get { return password_; }
                }
                
                public override bool IsInitialized {
                  get {
                    return true;
                  }
                }
                
                public override void WriteTo(pb::ICodedOutputStream output) {
                  CalcSerializedSize();
                  string[] field_names = _enterRoomFieldNames;
                  if (hasId) {
                    output.WriteUInt64(1, field_names[0], Id);
                  }
                  if (hasPassword) {
                    output.WriteString(2, field_names[1], Password);
                  }
                  UnknownFields.WriteTo(output);
                }
                
                private int memoizedSerializedSize = -1;
                public override int SerializedSize {
                  get {
                    int size = memoizedSerializedSize;
                    if (size != -1) return size;
                    return CalcSerializedSize();
                  }
                }
                
                private int CalcSerializedSize() {
                  int size = memoizedSerializedSize;
                  if (size != -1) return size;
                  
                  size = 0;
                  if (hasId) {
                    size += pb::CodedOutputStream.ComputeUInt64Size(1, Id);
                  }
                  if (hasPassword) {
                    size += pb::CodedOutputStream.ComputeStringSize(2, Password);
                  }
                  size += UnknownFields.SerializedSize;
                  memoizedSerializedSize = size;
                  return size;
                }
                public static EnterRoom ParseFrom(pb::ByteString data) {
                  return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
                }
                public static EnterRoom ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
                  return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
                }
                public static EnterRoom ParseFrom(byte[] data) {
                  return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
                }
                public static EnterRoom ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
                  return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
                }
                public static EnterRoom ParseFrom(global::System.IO.Stream input) {
                  return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
                }
                public static EnterRoom ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
                  return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
                }
                public static EnterRoom ParseDelimitedFrom(global::System.IO.Stream input) {
                  return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
                }
                public static EnterRoom ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
                  return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
                }
                public static EnterRoom ParseFrom(pb::ICodedInputStream input) {
                  return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
                }
                public static EnterRoom ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
                  return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
                }
                private EnterRoom MakeReadOnly() {
                  return this;
                }
                
                public static Builder CreateBuilder() { return new Builder(); }
                public override Builder ToBuilder() { return CreateBuilder(this); }
                public override Builder CreateBuilderForType() { return new Builder(); }
                public static Builder CreateBuilder(EnterRoom prototype) {
                  return new Builder(prototype);
                }
                
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
                public sealed partial class Builder : pb::GeneratedBuilder<EnterRoom, Builder> {
                  protected override Builder ThisBuilder {
                    get { return this; }
                  }
                  public Builder() {
                    result = DefaultInstance;
                    resultIsReadOnly = true;
                  }
                  internal Builder(EnterRoom cloneFrom) {
                    result = cloneFrom;
                    resultIsReadOnly = true;
                  }
                  
                  private bool resultIsReadOnly;
                  private EnterRoom result;
                  
                  private EnterRoom PrepareBuilder() {
                    if (resultIsReadOnly) {
                      EnterRoom original = result;
                      result = new EnterRoom();
                      resultIsReadOnly = false;
                      MergeFrom(original);
                    }
                    return result;
                  }
                  
                  public override bool IsInitialized {
                    get { return result.IsInitialized; }
                  }
                  
                  protected override EnterRoom MessageBeingBuilt {
                    get { return PrepareBuilder(); }
                  }
                  
                  public override Builder Clear() {
                    result = DefaultInstance;
                    resultIsReadOnly = true;
                    return this;
                  }
                  
                  public override Builder Clone() {
                    if (resultIsReadOnly) {
                      return new Builder(result);
                    } else {
                      return new Builder().MergeFrom(result);
                    }
                  }
                  
                  public override pbd::MessageDescriptor DescriptorForType {
                    get { return global::protos.Public.Types.Cts.Types.Hall.Types.EnterRoom.Descriptor; }
                  }
                  
                  public override EnterRoom DefaultInstanceForType {
                    get { return global::protos.Public.Types.Cts.Types.Hall.Types.EnterRoom.DefaultInstance; }
                  }
                  
                  public override EnterRoom BuildPartial() {
                    if (resultIsReadOnly) {
                      return result;
                    }
                    resultIsReadOnly = true;
                    return result.MakeReadOnly();
                  }
                  
                  public override Builder MergeFrom(pb::IMessage other) {
                    if (other is EnterRoom) {
                      return MergeFrom((EnterRoom) other);
                    } else {
                      base.MergeFrom(other);
                      return this;
                    }
                  }
                  
                  public override Builder MergeFrom(EnterRoom other) {
                    if (other == global::protos.Public.Types.Cts.Types.Hall.Types.EnterRoom.DefaultInstance) return this;
                    PrepareBuilder();
                    if (other.HasId) {
                      Id = other.Id;
                    }
                    if (other.HasPassword) {
                      Password = other.Password;
                    }
                    this.MergeUnknownFields(other.UnknownFields);
                    return this;
                  }
                  
                  public override Builder MergeFrom(pb::ICodedInputStream input) {
                    return MergeFrom(input, pb::ExtensionRegistry.Empty);
                  }
                  
                  public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
                    PrepareBuilder();
                    pb::UnknownFieldSet.Builder unknownFields = null;
                    uint tag;
                    string field_name;
                    while (input.ReadTag(out tag, out field_name)) {
                      if(tag == 0 && field_name != null) {
                        int field_ordinal = global::System.Array.BinarySearch(_enterRoomFieldNames, field_name, global::System.StringComparer.Ordinal);
                        if(field_ordinal >= 0)
                          tag = _enterRoomFieldTags[field_ordinal];
                        else {
                          if (unknownFields == null) {
                            unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                          }
                          ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                          continue;
                        }
                      }
                      switch (tag) {
                        case 0: {
                          throw pb::InvalidProtocolBufferException.InvalidTag();
                        }
                        default: {
                          if (pb::WireFormat.IsEndGroupTag(tag)) {
                            if (unknownFields != null) {
                              this.UnknownFields = unknownFields.Build();
                            }
                            return this;
                          }
                          if (unknownFields == null) {
                            unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                          }
                          ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                          break;
                        }
                        case 8: {
                          result.hasId = input.ReadUInt64(ref result.id_);
                          break;
                        }
                        case 18: {
                          result.hasPassword = input.ReadString(ref result.password_);
                          break;
                        }
                      }
                    }
                    
                    if (unknownFields != null) {
                      this.UnknownFields = unknownFields.Build();
                    }
                    return this;
                  }
                  
                  
                  public bool HasId {
                    get { return result.hasId; }
                  }
                  [global::System.CLSCompliant(false)]
                  public ulong Id {
                    get { return result.Id; }
                    set { SetId(value); }
                  }
                  [global::System.CLSCompliant(false)]
                  public Builder SetId(ulong value) {
                    PrepareBuilder();
                    result.hasId = true;
                    result.id_ = value;
                    return this;
                  }
                  public Builder ClearId() {
                    PrepareBuilder();
                    result.hasId = false;
                    result.id_ = 0UL;
                    return this;
                  }
                  
                  public bool HasPassword {
                    get { return result.hasPassword; }
                  }
                  public string Password {
                    get { return result.Password; }
                    set { SetPassword(value); }
                  }
                  public Builder SetPassword(string value) {
                    pb::ThrowHelper.ThrowIfNull(value, "value");
                    PrepareBuilder();
                    result.hasPassword = true;
                    result.password_ = value;
                    return this;
                  }
                  public Builder ClearPassword() {
                    PrepareBuilder();
                    result.hasPassword = false;
                    result.password_ = "";
                    return this;
                  }
                }
                static EnterRoom() {
                  object.ReferenceEquals(global::protos.Proto.Gilgamesh.Descriptor, null);
                }
              }
              
            }
            #endregion
            
            public override bool IsInitialized {
              get {
                return true;
              }
            }
            
            public override void WriteTo(pb::ICodedOutputStream output) {
              CalcSerializedSize();
              string[] field_names = _hallFieldNames;
              UnknownFields.WriteTo(output);
            }
            
            private int memoizedSerializedSize = -1;
            public override int SerializedSize {
              get {
                int size = memoizedSerializedSize;
                if (size != -1) return size;
                return CalcSerializedSize();
              }
            }
            
            private int CalcSerializedSize() {
              int size = memoizedSerializedSize;
              if (size != -1) return size;
              
              size = 0;
              size += UnknownFields.SerializedSize;
              memoizedSerializedSize = size;
              return size;
            }
            public static Hall ParseFrom(pb::ByteString data) {
              return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
            }
            public static Hall ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
              return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
            }
            public static Hall ParseFrom(byte[] data) {
              return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
            }
            public static Hall ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
              return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
            }
            public static Hall ParseFrom(global::System.IO.Stream input) {
              return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
            }
            public static Hall ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
              return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
            }
            public static Hall ParseDelimitedFrom(global::System.IO.Stream input) {
              return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
            }
            public static Hall ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
              return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
            }
            public static Hall ParseFrom(pb::ICodedInputStream input) {
              return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
            }
            public static Hall ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
              return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
            }
            private Hall MakeReadOnly() {
              return this;
            }
            
            public static Builder CreateBuilder() { return new Builder(); }
            public override Builder ToBuilder() { return CreateBuilder(this); }
            public override Builder CreateBuilderForType() { return new Builder(); }
            public static Builder CreateBuilder(Hall prototype) {
              return new Builder(prototype);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sealed partial class Builder : pb::GeneratedBuilder<Hall, Builder> {
              protected override Builder ThisBuilder {
                get { return this; }
              }
              public Builder() {
                result = DefaultInstance;
                resultIsReadOnly = true;
              }
              internal Builder(Hall cloneFrom) {
                result = cloneFrom;
                resultIsReadOnly = true;
              }
              
              private bool resultIsReadOnly;
              private Hall result;
              
              private Hall PrepareBuilder() {
                if (resultIsReadOnly) {
                  Hall original = result;
                  result = new Hall();
                  resultIsReadOnly = false;
                  MergeFrom(original);
                }
                return result;
              }
              
              public override bool IsInitialized {
                get { return result.IsInitialized; }
              }
              
              protected override Hall MessageBeingBuilt {
                get { return PrepareBuilder(); }
              }
              
              public override Builder Clear() {
                result = DefaultInstance;
                resultIsReadOnly = true;
                return this;
              }
              
              public override Builder Clone() {
                if (resultIsReadOnly) {
                  return new Builder(result);
                } else {
                  return new Builder().MergeFrom(result);
                }
              }
              
              public override pbd::MessageDescriptor DescriptorForType {
                get { return global::protos.Public.Types.Cts.Types.Hall.Descriptor; }
              }
              
              public override Hall DefaultInstanceForType {
                get { return global::protos.Public.Types.Cts.Types.Hall.DefaultInstance; }
              }
              
              public override Hall BuildPartial() {
                if (resultIsReadOnly) {
                  return result;
                }
                resultIsReadOnly = true;
                return result.MakeReadOnly();
              }
              
              public override Builder MergeFrom(pb::IMessage other) {
                if (other is Hall) {
                  return MergeFrom((Hall) other);
                } else {
                  base.MergeFrom(other);
                  return this;
                }
              }
              
              public override Builder MergeFrom(Hall other) {
                if (other == global::protos.Public.Types.Cts.Types.Hall.DefaultInstance) return this;
                PrepareBuilder();
                this.MergeUnknownFields(other.UnknownFields);
                return this;
              }
              
              public override Builder MergeFrom(pb::ICodedInputStream input) {
                return MergeFrom(input, pb::ExtensionRegistry.Empty);
              }
              
              public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
                PrepareBuilder();
                pb::UnknownFieldSet.Builder unknownFields = null;
                uint tag;
                string field_name;
                while (input.ReadTag(out tag, out field_name)) {
                  if(tag == 0 && field_name != null) {
                    int field_ordinal = global::System.Array.BinarySearch(_hallFieldNames, field_name, global::System.StringComparer.Ordinal);
                    if(field_ordinal >= 0)
                      tag = _hallFieldTags[field_ordinal];
                    else {
                      if (unknownFields == null) {
                        unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                      }
                      ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                      continue;
                    }
                  }
                  switch (tag) {
                    case 0: {
                      throw pb::InvalidProtocolBufferException.InvalidTag();
                    }
                    default: {
                      if (pb::WireFormat.IsEndGroupTag(tag)) {
                        if (unknownFields != null) {
                          this.UnknownFields = unknownFields.Build();
                        }
                        return this;
                      }
                      if (unknownFields == null) {
                        unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                      }
                      ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                      break;
                    }
                  }
                }
                
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              
            }
            static Hall() {
              object.ReferenceEquals(global::protos.Proto.Gilgamesh.Descriptor, null);
            }
          }
          
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
          public sealed partial class Duel : pb::GeneratedMessage<Duel, Duel.Builder> {
            private Duel() { }
            private static readonly Duel defaultInstance = new Duel().MakeReadOnly();
            private static readonly string[] _duelFieldNames = new string[] { "Data" };
            private static readonly uint[] _duelFieldTags = new uint[] { 10 };
            public static Duel DefaultInstance {
              get { return defaultInstance; }
            }
            
            public override Duel DefaultInstanceForType {
              get { return DefaultInstance; }
            }
            
            protected override Duel ThisMessage {
              get { return this; }
            }
            
            public static pbd::MessageDescriptor Descriptor {
              get { return global::protos.Proto.Gilgamesh.internal__static_protos_Public_Cts_Duel__Descriptor; }
            }
            
            protected override pb::FieldAccess.FieldAccessorTable<Duel, Duel.Builder> InternalFieldAccessors {
              get { return global::protos.Proto.Gilgamesh.internal__static_protos_Public_Cts_Duel__FieldAccessorTable; }
            }
            
            public const int DataFieldNumber = 1;
            private bool hasData;
            private pb::ByteString data_ = pb::ByteString.Empty;
            public bool HasData {
              get { return hasData; }
            }
            public pb::ByteString Data {
              get { return data_; }
            }
            
            public override bool IsInitialized {
              get {
                return true;
              }
            }
            
            public override void WriteTo(pb::ICodedOutputStream output) {
              CalcSerializedSize();
              string[] field_names = _duelFieldNames;
              if (hasData) {
                output.WriteBytes(1, field_names[0], Data);
              }
              UnknownFields.WriteTo(output);
            }
            
            private int memoizedSerializedSize = -1;
            public override int SerializedSize {
              get {
                int size = memoizedSerializedSize;
                if (size != -1) return size;
                return CalcSerializedSize();
              }
            }
            
            private int CalcSerializedSize() {
              int size = memoizedSerializedSize;
              if (size != -1) return size;
              
              size = 0;
              if (hasData) {
                size += pb::CodedOutputStream.ComputeBytesSize(1, Data);
              }
              size += UnknownFields.SerializedSize;
              memoizedSerializedSize = size;
              return size;
            }
            public static Duel ParseFrom(pb::ByteString data) {
              return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
            }
            public static Duel ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
              return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
            }
            public static Duel ParseFrom(byte[] data) {
              return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
            }
            public static Duel ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
              return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
            }
            public static Duel ParseFrom(global::System.IO.Stream input) {
              return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
            }
            public static Duel ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
              return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
            }
            public static Duel ParseDelimitedFrom(global::System.IO.Stream input) {
              return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
            }
            public static Duel ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
              return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
            }
            public static Duel ParseFrom(pb::ICodedInputStream input) {
              return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
            }
            public static Duel ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
              return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
            }
            private Duel MakeReadOnly() {
              return this;
            }
            
            public static Builder CreateBuilder() { return new Builder(); }
            public override Builder ToBuilder() { return CreateBuilder(this); }
            public override Builder CreateBuilderForType() { return new Builder(); }
            public static Builder CreateBuilder(Duel prototype) {
              return new Builder(prototype);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sealed partial class Builder : pb::GeneratedBuilder<Duel, Builder> {
              protected override Builder ThisBuilder {
                get { return this; }
              }
              public Builder() {
                result = DefaultInstance;
                resultIsReadOnly = true;
              }
              internal Builder(Duel cloneFrom) {
                result = cloneFrom;
                resultIsReadOnly = true;
              }
              
              private bool resultIsReadOnly;
              private Duel result;
              
              private Duel PrepareBuilder() {
                if (resultIsReadOnly) {
                  Duel original = result;
                  result = new Duel();
                  resultIsReadOnly = false;
                  MergeFrom(original);
                }
                return result;
              }
              
              public override bool IsInitialized {
                get { return result.IsInitialized; }
              }
              
              protected override Duel MessageBeingBuilt {
                get { return PrepareBuilder(); }
              }
              
              public override Builder Clear() {
                result = DefaultInstance;
                resultIsReadOnly = true;
                return this;
              }
              
              public override Builder Clone() {
                if (resultIsReadOnly) {
                  return new Builder(result);
                } else {
                  return new Builder().MergeFrom(result);
                }
              }
              
              public override pbd::MessageDescriptor DescriptorForType {
                get { return global::protos.Public.Types.Cts.Types.Duel.Descriptor; }
              }
              
              public override Duel DefaultInstanceForType {
                get { return global::protos.Public.Types.Cts.Types.Duel.DefaultInstance; }
              }
              
              public override Duel BuildPartial() {
                if (resultIsReadOnly) {
                  return result;
                }
                resultIsReadOnly = true;
                return result.MakeReadOnly();
              }
              
              public override Builder MergeFrom(pb::IMessage other) {
                if (other is Duel) {
                  return MergeFrom((Duel) other);
                } else {
                  base.MergeFrom(other);
                  return this;
                }
              }
              
              public override Builder MergeFrom(Duel other) {
                if (other == global::protos.Public.Types.Cts.Types.Duel.DefaultInstance) return this;
                PrepareBuilder();
                if (other.HasData) {
                  Data = other.Data;
                }
                this.MergeUnknownFields(other.UnknownFields);
                return this;
              }
              
              public override Builder MergeFrom(pb::ICodedInputStream input) {
                return MergeFrom(input, pb::ExtensionRegistry.Empty);
              }
              
              public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
                PrepareBuilder();
                pb::UnknownFieldSet.Builder unknownFields = null;
                uint tag;
                string field_name;
                while (input.ReadTag(out tag, out field_name)) {
                  if(tag == 0 && field_name != null) {
                    int field_ordinal = global::System.Array.BinarySearch(_duelFieldNames, field_name, global::System.StringComparer.Ordinal);
                    if(field_ordinal >= 0)
                      tag = _duelFieldTags[field_ordinal];
                    else {
                      if (unknownFields == null) {
                        unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                      }
                      ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                      continue;
                    }
                  }
                  switch (tag) {
                    case 0: {
                      throw pb::InvalidProtocolBufferException.InvalidTag();
                    }
                    default: {
                      if (pb::WireFormat.IsEndGroupTag(tag)) {
                        if (unknownFields != null) {
                          this.UnknownFields = unknownFields.Build();
                        }
                        return this;
                      }
                      if (unknownFields == null) {
                        unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                      }
                      ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                      break;
                    }
                    case 10: {
                      result.hasData = input.ReadBytes(ref result.data_);
                      break;
                    }
                  }
                }
                
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              
              
              public bool HasData {
                get { return result.hasData; }
              }
              public pb::ByteString Data {
                get { return result.Data; }
                set { SetData(value); }
              }
              public Builder SetData(pb::ByteString value) {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasData = true;
                result.data_ = value;
                return this;
              }
              public Builder ClearData() {
                PrepareBuilder();
                result.hasData = false;
                result.data_ = pb::ByteString.Empty;
                return this;
              }
            }
            static Duel() {
              object.ReferenceEquals(global::protos.Proto.Gilgamesh.Descriptor, null);
            }
          }
          
        }
        #endregion
        
        public override bool IsInitialized {
          get {
            return true;
          }
        }
        
        public override void WriteTo(pb::ICodedOutputStream output) {
          CalcSerializedSize();
          string[] field_names = _ctsFieldNames;
          UnknownFields.WriteTo(output);
        }
        
        private int memoizedSerializedSize = -1;
        public override int SerializedSize {
          get {
            int size = memoizedSerializedSize;
            if (size != -1) return size;
            return CalcSerializedSize();
          }
        }
        
        private int CalcSerializedSize() {
          int size = memoizedSerializedSize;
          if (size != -1) return size;
          
          size = 0;
          size += UnknownFields.SerializedSize;
          memoizedSerializedSize = size;
          return size;
        }
        public static Cts ParseFrom(pb::ByteString data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static Cts ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static Cts ParseFrom(byte[] data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static Cts ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static Cts ParseFrom(global::System.IO.Stream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static Cts ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static Cts ParseDelimitedFrom(global::System.IO.Stream input) {
          return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static Cts ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static Cts ParseFrom(pb::ICodedInputStream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static Cts ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private Cts MakeReadOnly() {
          return this;
        }
        
        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(Cts prototype) {
          return new Builder(prototype);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Builder : pb::GeneratedBuilder<Cts, Builder> {
          protected override Builder ThisBuilder {
            get { return this; }
          }
          public Builder() {
            result = DefaultInstance;
            resultIsReadOnly = true;
          }
          internal Builder(Cts cloneFrom) {
            result = cloneFrom;
            resultIsReadOnly = true;
          }
          
          private bool resultIsReadOnly;
          private Cts result;
          
          private Cts PrepareBuilder() {
            if (resultIsReadOnly) {
              Cts original = result;
              result = new Cts();
              resultIsReadOnly = false;
              MergeFrom(original);
            }
            return result;
          }
          
          public override bool IsInitialized {
            get { return result.IsInitialized; }
          }
          
          protected override Cts MessageBeingBuilt {
            get { return PrepareBuilder(); }
          }
          
          public override Builder Clear() {
            result = DefaultInstance;
            resultIsReadOnly = true;
            return this;
          }
          
          public override Builder Clone() {
            if (resultIsReadOnly) {
              return new Builder(result);
            } else {
              return new Builder().MergeFrom(result);
            }
          }
          
          public override pbd::MessageDescriptor DescriptorForType {
            get { return global::protos.Public.Types.Cts.Descriptor; }
          }
          
          public override Cts DefaultInstanceForType {
            get { return global::protos.Public.Types.Cts.DefaultInstance; }
          }
          
          public override Cts BuildPartial() {
            if (resultIsReadOnly) {
              return result;
            }
            resultIsReadOnly = true;
            return result.MakeReadOnly();
          }
          
          public override Builder MergeFrom(pb::IMessage other) {
            if (other is Cts) {
              return MergeFrom((Cts) other);
            } else {
              base.MergeFrom(other);
              return this;
            }
          }
          
          public override Builder MergeFrom(Cts other) {
            if (other == global::protos.Public.Types.Cts.DefaultInstance) return this;
            PrepareBuilder();
            this.MergeUnknownFields(other.UnknownFields);
            return this;
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input) {
            return MergeFrom(input, pb::ExtensionRegistry.Empty);
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
            PrepareBuilder();
            pb::UnknownFieldSet.Builder unknownFields = null;
            uint tag;
            string field_name;
            while (input.ReadTag(out tag, out field_name)) {
              if(tag == 0 && field_name != null) {
                int field_ordinal = global::System.Array.BinarySearch(_ctsFieldNames, field_name, global::System.StringComparer.Ordinal);
                if(field_ordinal >= 0)
                  tag = _ctsFieldTags[field_ordinal];
                else {
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  continue;
                }
              }
              switch (tag) {
                case 0: {
                  throw pb::InvalidProtocolBufferException.InvalidTag();
                }
                default: {
                  if (pb::WireFormat.IsEndGroupTag(tag)) {
                    if (unknownFields != null) {
                      this.UnknownFields = unknownFields.Build();
                    }
                    return this;
                  }
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  break;
                }
              }
            }
            
            if (unknownFields != null) {
              this.UnknownFields = unknownFields.Build();
            }
            return this;
          }
          
        }
        static Cts() {
          object.ReferenceEquals(global::protos.Proto.Gilgamesh.Descriptor, null);
        }
      }
      
    }
    #endregion
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _publicFieldNames;
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static Public ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Public ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Public ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Public ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Public ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Public ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Public ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Public ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Public ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Public ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Public MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Public prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<Public, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Public cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Public result;
      
      private Public PrepareBuilder() {
        if (resultIsReadOnly) {
          Public original = result;
          result = new Public();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Public MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::protos.Public.Descriptor; }
      }
      
      public override Public DefaultInstanceForType {
        get { return global::protos.Public.DefaultInstance; }
      }
      
      public override Public BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Public) {
          return MergeFrom((Public) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Public other) {
        if (other == global::protos.Public.DefaultInstance) return this;
        PrepareBuilder();
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_publicFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _publicFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
    }
    static Public() {
      object.ReferenceEquals(global::protos.Proto.Gilgamesh.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Internal : pb::GeneratedMessage<Internal, Internal.Builder> {
    private Internal() { }
    private static readonly Internal defaultInstance = new Internal().MakeReadOnly();
    private static readonly string[] _internalFieldNames = new string[] {  };
    private static readonly uint[] _internalFieldTags = new uint[] {  };
    public static Internal DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Internal DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Internal ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::protos.Proto.Gilgamesh.internal__static_protos_Internal__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Internal, Internal.Builder> InternalFieldAccessors {
      get { return global::protos.Proto.Gilgamesh.internal__static_protos_Internal__FieldAccessorTable; }
    }
    
    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class Global : pb::GeneratedMessage<Global, Global.Builder> {
        private Global() { }
        private static readonly Global defaultInstance = new Global().MakeReadOnly();
        private static readonly string[] _globalFieldNames = new string[] {  };
        private static readonly uint[] _globalFieldTags = new uint[] {  };
        public static Global DefaultInstance {
          get { return defaultInstance; }
        }
        
        public override Global DefaultInstanceForType {
          get { return DefaultInstance; }
        }
        
        protected override Global ThisMessage {
          get { return this; }
        }
        
        public static pbd::MessageDescriptor Descriptor {
          get { return global::protos.Proto.Gilgamesh.internal__static_protos_Internal_Global__Descriptor; }
        }
        
        protected override pb::FieldAccess.FieldAccessorTable<Global, Global.Builder> InternalFieldAccessors {
          get { return global::protos.Proto.Gilgamesh.internal__static_protos_Internal_Global__FieldAccessorTable; }
        }
        
        #region Nested types
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static partial class Types {
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
          public sealed partial class Locker : pb::GeneratedMessage<Locker, Locker.Builder> {
            private Locker() { }
            private static readonly Locker defaultInstance = new Locker().MakeReadOnly();
            private static readonly string[] _lockerFieldNames = new string[] {  };
            private static readonly uint[] _lockerFieldTags = new uint[] {  };
            public static Locker DefaultInstance {
              get { return defaultInstance; }
            }
            
            public override Locker DefaultInstanceForType {
              get { return DefaultInstance; }
            }
            
            protected override Locker ThisMessage {
              get { return this; }
            }
            
            public static pbd::MessageDescriptor Descriptor {
              get { return global::protos.Proto.Gilgamesh.internal__static_protos_Internal_Global_Locker__Descriptor; }
            }
            
            protected override pb::FieldAccess.FieldAccessorTable<Locker, Locker.Builder> InternalFieldAccessors {
              get { return global::protos.Proto.Gilgamesh.internal__static_protos_Internal_Global_Locker__FieldAccessorTable; }
            }
            
            #region Nested types
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static partial class Types {
              [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
              public sealed partial class Acquire : pb::GeneratedMessage<Acquire, Acquire.Builder> {
                private Acquire() { }
                private static readonly Acquire defaultInstance = new Acquire().MakeReadOnly();
                private static readonly string[] _acquireFieldNames = new string[] { "Account", "lock" };
                private static readonly uint[] _acquireFieldTags = new uint[] { 10, 16 };
                public static Acquire DefaultInstance {
                  get { return defaultInstance; }
                }
                
                public override Acquire DefaultInstanceForType {
                  get { return DefaultInstance; }
                }
                
                protected override Acquire ThisMessage {
                  get { return this; }
                }
                
                public static pbd::MessageDescriptor Descriptor {
                  get { return global::protos.Proto.Gilgamesh.internal__static_protos_Internal_Global_Locker_Acquire__Descriptor; }
                }
                
                protected override pb::FieldAccess.FieldAccessorTable<Acquire, Acquire.Builder> InternalFieldAccessors {
                  get { return global::protos.Proto.Gilgamesh.internal__static_protos_Internal_Global_Locker_Acquire__FieldAccessorTable; }
                }
                
                public const int AccountFieldNumber = 1;
                private bool hasAccount;
                private string account_ = "";
                public bool HasAccount {
                  get { return hasAccount; }
                }
                public string Account {
                  get { return account_; }
                }
                
                public const int LockFieldNumber = 2;
                private bool hasLock;
                private bool lock_;
                public bool HasLock {
                  get { return hasLock; }
                }
                public bool Lock {
                  get { return lock_; }
                }
                
                public override bool IsInitialized {
                  get {
                    return true;
                  }
                }
                
                public override void WriteTo(pb::ICodedOutputStream output) {
                  CalcSerializedSize();
                  string[] field_names = _acquireFieldNames;
                  if (hasAccount) {
                    output.WriteString(1, field_names[0], Account);
                  }
                  if (hasLock) {
                    output.WriteBool(2, field_names[1], Lock);
                  }
                  UnknownFields.WriteTo(output);
                }
                
                private int memoizedSerializedSize = -1;
                public override int SerializedSize {
                  get {
                    int size = memoizedSerializedSize;
                    if (size != -1) return size;
                    return CalcSerializedSize();
                  }
                }
                
                private int CalcSerializedSize() {
                  int size = memoizedSerializedSize;
                  if (size != -1) return size;
                  
                  size = 0;
                  if (hasAccount) {
                    size += pb::CodedOutputStream.ComputeStringSize(1, Account);
                  }
                  if (hasLock) {
                    size += pb::CodedOutputStream.ComputeBoolSize(2, Lock);
                  }
                  size += UnknownFields.SerializedSize;
                  memoizedSerializedSize = size;
                  return size;
                }
                public static Acquire ParseFrom(pb::ByteString data) {
                  return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
                }
                public static Acquire ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
                  return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
                }
                public static Acquire ParseFrom(byte[] data) {
                  return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
                }
                public static Acquire ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
                  return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
                }
                public static Acquire ParseFrom(global::System.IO.Stream input) {
                  return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
                }
                public static Acquire ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
                  return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
                }
                public static Acquire ParseDelimitedFrom(global::System.IO.Stream input) {
                  return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
                }
                public static Acquire ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
                  return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
                }
                public static Acquire ParseFrom(pb::ICodedInputStream input) {
                  return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
                }
                public static Acquire ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
                  return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
                }
                private Acquire MakeReadOnly() {
                  return this;
                }
                
                public static Builder CreateBuilder() { return new Builder(); }
                public override Builder ToBuilder() { return CreateBuilder(this); }
                public override Builder CreateBuilderForType() { return new Builder(); }
                public static Builder CreateBuilder(Acquire prototype) {
                  return new Builder(prototype);
                }
                
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
                public sealed partial class Builder : pb::GeneratedBuilder<Acquire, Builder> {
                  protected override Builder ThisBuilder {
                    get { return this; }
                  }
                  public Builder() {
                    result = DefaultInstance;
                    resultIsReadOnly = true;
                  }
                  internal Builder(Acquire cloneFrom) {
                    result = cloneFrom;
                    resultIsReadOnly = true;
                  }
                  
                  private bool resultIsReadOnly;
                  private Acquire result;
                  
                  private Acquire PrepareBuilder() {
                    if (resultIsReadOnly) {
                      Acquire original = result;
                      result = new Acquire();
                      resultIsReadOnly = false;
                      MergeFrom(original);
                    }
                    return result;
                  }
                  
                  public override bool IsInitialized {
                    get { return result.IsInitialized; }
                  }
                  
                  protected override Acquire MessageBeingBuilt {
                    get { return PrepareBuilder(); }
                  }
                  
                  public override Builder Clear() {
                    result = DefaultInstance;
                    resultIsReadOnly = true;
                    return this;
                  }
                  
                  public override Builder Clone() {
                    if (resultIsReadOnly) {
                      return new Builder(result);
                    } else {
                      return new Builder().MergeFrom(result);
                    }
                  }
                  
                  public override pbd::MessageDescriptor DescriptorForType {
                    get { return global::protos.Internal.Types.Global.Types.Locker.Types.Acquire.Descriptor; }
                  }
                  
                  public override Acquire DefaultInstanceForType {
                    get { return global::protos.Internal.Types.Global.Types.Locker.Types.Acquire.DefaultInstance; }
                  }
                  
                  public override Acquire BuildPartial() {
                    if (resultIsReadOnly) {
                      return result;
                    }
                    resultIsReadOnly = true;
                    return result.MakeReadOnly();
                  }
                  
                  public override Builder MergeFrom(pb::IMessage other) {
                    if (other is Acquire) {
                      return MergeFrom((Acquire) other);
                    } else {
                      base.MergeFrom(other);
                      return this;
                    }
                  }
                  
                  public override Builder MergeFrom(Acquire other) {
                    if (other == global::protos.Internal.Types.Global.Types.Locker.Types.Acquire.DefaultInstance) return this;
                    PrepareBuilder();
                    if (other.HasAccount) {
                      Account = other.Account;
                    }
                    if (other.HasLock) {
                      Lock = other.Lock;
                    }
                    this.MergeUnknownFields(other.UnknownFields);
                    return this;
                  }
                  
                  public override Builder MergeFrom(pb::ICodedInputStream input) {
                    return MergeFrom(input, pb::ExtensionRegistry.Empty);
                  }
                  
                  public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
                    PrepareBuilder();
                    pb::UnknownFieldSet.Builder unknownFields = null;
                    uint tag;
                    string field_name;
                    while (input.ReadTag(out tag, out field_name)) {
                      if(tag == 0 && field_name != null) {
                        int field_ordinal = global::System.Array.BinarySearch(_acquireFieldNames, field_name, global::System.StringComparer.Ordinal);
                        if(field_ordinal >= 0)
                          tag = _acquireFieldTags[field_ordinal];
                        else {
                          if (unknownFields == null) {
                            unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                          }
                          ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                          continue;
                        }
                      }
                      switch (tag) {
                        case 0: {
                          throw pb::InvalidProtocolBufferException.InvalidTag();
                        }
                        default: {
                          if (pb::WireFormat.IsEndGroupTag(tag)) {
                            if (unknownFields != null) {
                              this.UnknownFields = unknownFields.Build();
                            }
                            return this;
                          }
                          if (unknownFields == null) {
                            unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                          }
                          ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                          break;
                        }
                        case 10: {
                          result.hasAccount = input.ReadString(ref result.account_);
                          break;
                        }
                        case 16: {
                          result.hasLock = input.ReadBool(ref result.lock_);
                          break;
                        }
                      }
                    }
                    
                    if (unknownFields != null) {
                      this.UnknownFields = unknownFields.Build();
                    }
                    return this;
                  }
                  
                  
                  public bool HasAccount {
                    get { return result.hasAccount; }
                  }
                  public string Account {
                    get { return result.Account; }
                    set { SetAccount(value); }
                  }
                  public Builder SetAccount(string value) {
                    pb::ThrowHelper.ThrowIfNull(value, "value");
                    PrepareBuilder();
                    result.hasAccount = true;
                    result.account_ = value;
                    return this;
                  }
                  public Builder ClearAccount() {
                    PrepareBuilder();
                    result.hasAccount = false;
                    result.account_ = "";
                    return this;
                  }
                  
                  public bool HasLock {
                    get { return result.hasLock; }
                  }
                  public bool Lock {
                    get { return result.Lock; }
                    set { SetLock(value); }
                  }
                  public Builder SetLock(bool value) {
                    PrepareBuilder();
                    result.hasLock = true;
                    result.lock_ = value;
                    return this;
                  }
                  public Builder ClearLock() {
                    PrepareBuilder();
                    result.hasLock = false;
                    result.lock_ = false;
                    return this;
                  }
                }
                static Acquire() {
                  object.ReferenceEquals(global::protos.Proto.Gilgamesh.Descriptor, null);
                }
              }
              
            }
            #endregion
            
            public override bool IsInitialized {
              get {
                return true;
              }
            }
            
            public override void WriteTo(pb::ICodedOutputStream output) {
              CalcSerializedSize();
              string[] field_names = _lockerFieldNames;
              UnknownFields.WriteTo(output);
            }
            
            private int memoizedSerializedSize = -1;
            public override int SerializedSize {
              get {
                int size = memoizedSerializedSize;
                if (size != -1) return size;
                return CalcSerializedSize();
              }
            }
            
            private int CalcSerializedSize() {
              int size = memoizedSerializedSize;
              if (size != -1) return size;
              
              size = 0;
              size += UnknownFields.SerializedSize;
              memoizedSerializedSize = size;
              return size;
            }
            public static Locker ParseFrom(pb::ByteString data) {
              return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
            }
            public static Locker ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
              return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
            }
            public static Locker ParseFrom(byte[] data) {
              return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
            }
            public static Locker ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
              return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
            }
            public static Locker ParseFrom(global::System.IO.Stream input) {
              return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
            }
            public static Locker ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
              return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
            }
            public static Locker ParseDelimitedFrom(global::System.IO.Stream input) {
              return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
            }
            public static Locker ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
              return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
            }
            public static Locker ParseFrom(pb::ICodedInputStream input) {
              return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
            }
            public static Locker ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
              return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
            }
            private Locker MakeReadOnly() {
              return this;
            }
            
            public static Builder CreateBuilder() { return new Builder(); }
            public override Builder ToBuilder() { return CreateBuilder(this); }
            public override Builder CreateBuilderForType() { return new Builder(); }
            public static Builder CreateBuilder(Locker prototype) {
              return new Builder(prototype);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sealed partial class Builder : pb::GeneratedBuilder<Locker, Builder> {
              protected override Builder ThisBuilder {
                get { return this; }
              }
              public Builder() {
                result = DefaultInstance;
                resultIsReadOnly = true;
              }
              internal Builder(Locker cloneFrom) {
                result = cloneFrom;
                resultIsReadOnly = true;
              }
              
              private bool resultIsReadOnly;
              private Locker result;
              
              private Locker PrepareBuilder() {
                if (resultIsReadOnly) {
                  Locker original = result;
                  result = new Locker();
                  resultIsReadOnly = false;
                  MergeFrom(original);
                }
                return result;
              }
              
              public override bool IsInitialized {
                get { return result.IsInitialized; }
              }
              
              protected override Locker MessageBeingBuilt {
                get { return PrepareBuilder(); }
              }
              
              public override Builder Clear() {
                result = DefaultInstance;
                resultIsReadOnly = true;
                return this;
              }
              
              public override Builder Clone() {
                if (resultIsReadOnly) {
                  return new Builder(result);
                } else {
                  return new Builder().MergeFrom(result);
                }
              }
              
              public override pbd::MessageDescriptor DescriptorForType {
                get { return global::protos.Internal.Types.Global.Types.Locker.Descriptor; }
              }
              
              public override Locker DefaultInstanceForType {
                get { return global::protos.Internal.Types.Global.Types.Locker.DefaultInstance; }
              }
              
              public override Locker BuildPartial() {
                if (resultIsReadOnly) {
                  return result;
                }
                resultIsReadOnly = true;
                return result.MakeReadOnly();
              }
              
              public override Builder MergeFrom(pb::IMessage other) {
                if (other is Locker) {
                  return MergeFrom((Locker) other);
                } else {
                  base.MergeFrom(other);
                  return this;
                }
              }
              
              public override Builder MergeFrom(Locker other) {
                if (other == global::protos.Internal.Types.Global.Types.Locker.DefaultInstance) return this;
                PrepareBuilder();
                this.MergeUnknownFields(other.UnknownFields);
                return this;
              }
              
              public override Builder MergeFrom(pb::ICodedInputStream input) {
                return MergeFrom(input, pb::ExtensionRegistry.Empty);
              }
              
              public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
                PrepareBuilder();
                pb::UnknownFieldSet.Builder unknownFields = null;
                uint tag;
                string field_name;
                while (input.ReadTag(out tag, out field_name)) {
                  if(tag == 0 && field_name != null) {
                    int field_ordinal = global::System.Array.BinarySearch(_lockerFieldNames, field_name, global::System.StringComparer.Ordinal);
                    if(field_ordinal >= 0)
                      tag = _lockerFieldTags[field_ordinal];
                    else {
                      if (unknownFields == null) {
                        unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                      }
                      ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                      continue;
                    }
                  }
                  switch (tag) {
                    case 0: {
                      throw pb::InvalidProtocolBufferException.InvalidTag();
                    }
                    default: {
                      if (pb::WireFormat.IsEndGroupTag(tag)) {
                        if (unknownFields != null) {
                          this.UnknownFields = unknownFields.Build();
                        }
                        return this;
                      }
                      if (unknownFields == null) {
                        unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                      }
                      ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                      break;
                    }
                  }
                }
                
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              
            }
            static Locker() {
              object.ReferenceEquals(global::protos.Proto.Gilgamesh.Descriptor, null);
            }
          }
          
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
          public sealed partial class Online : pb::GeneratedMessage<Online, Online.Builder> {
            private Online() { }
            private static readonly Online defaultInstance = new Online().MakeReadOnly();
            private static readonly string[] _onlineFieldNames = new string[] {  };
            private static readonly uint[] _onlineFieldTags = new uint[] {  };
            public static Online DefaultInstance {
              get { return defaultInstance; }
            }
            
            public override Online DefaultInstanceForType {
              get { return DefaultInstance; }
            }
            
            protected override Online ThisMessage {
              get { return this; }
            }
            
            public static pbd::MessageDescriptor Descriptor {
              get { return global::protos.Proto.Gilgamesh.internal__static_protos_Internal_Global_Online__Descriptor; }
            }
            
            protected override pb::FieldAccess.FieldAccessorTable<Online, Online.Builder> InternalFieldAccessors {
              get { return global::protos.Proto.Gilgamesh.internal__static_protos_Internal_Global_Online__FieldAccessorTable; }
            }
            
            #region Nested types
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static partial class Types {
              [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
              public sealed partial class Query : pb::GeneratedMessage<Query, Query.Builder> {
                private Query() { }
                private static readonly Query defaultInstance = new Query().MakeReadOnly();
                private static readonly string[] _queryFieldNames = new string[] { "Account" };
                private static readonly uint[] _queryFieldTags = new uint[] { 10 };
                public static Query DefaultInstance {
                  get { return defaultInstance; }
                }
                
                public override Query DefaultInstanceForType {
                  get { return DefaultInstance; }
                }
                
                protected override Query ThisMessage {
                  get { return this; }
                }
                
                public static pbd::MessageDescriptor Descriptor {
                  get { return global::protos.Proto.Gilgamesh.internal__static_protos_Internal_Global_Online_Query__Descriptor; }
                }
                
                protected override pb::FieldAccess.FieldAccessorTable<Query, Query.Builder> InternalFieldAccessors {
                  get { return global::protos.Proto.Gilgamesh.internal__static_protos_Internal_Global_Online_Query__FieldAccessorTable; }
                }
                
                public const int AccountFieldNumber = 1;
                private bool hasAccount;
                private string account_ = "";
                public bool HasAccount {
                  get { return hasAccount; }
                }
                public string Account {
                  get { return account_; }
                }
                
                public override bool IsInitialized {
                  get {
                    return true;
                  }
                }
                
                public override void WriteTo(pb::ICodedOutputStream output) {
                  CalcSerializedSize();
                  string[] field_names = _queryFieldNames;
                  if (hasAccount) {
                    output.WriteString(1, field_names[0], Account);
                  }
                  UnknownFields.WriteTo(output);
                }
                
                private int memoizedSerializedSize = -1;
                public override int SerializedSize {
                  get {
                    int size = memoizedSerializedSize;
                    if (size != -1) return size;
                    return CalcSerializedSize();
                  }
                }
                
                private int CalcSerializedSize() {
                  int size = memoizedSerializedSize;
                  if (size != -1) return size;
                  
                  size = 0;
                  if (hasAccount) {
                    size += pb::CodedOutputStream.ComputeStringSize(1, Account);
                  }
                  size += UnknownFields.SerializedSize;
                  memoizedSerializedSize = size;
                  return size;
                }
                public static Query ParseFrom(pb::ByteString data) {
                  return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
                }
                public static Query ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
                  return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
                }
                public static Query ParseFrom(byte[] data) {
                  return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
                }
                public static Query ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
                  return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
                }
                public static Query ParseFrom(global::System.IO.Stream input) {
                  return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
                }
                public static Query ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
                  return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
                }
                public static Query ParseDelimitedFrom(global::System.IO.Stream input) {
                  return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
                }
                public static Query ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
                  return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
                }
                public static Query ParseFrom(pb::ICodedInputStream input) {
                  return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
                }
                public static Query ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
                  return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
                }
                private Query MakeReadOnly() {
                  return this;
                }
                
                public static Builder CreateBuilder() { return new Builder(); }
                public override Builder ToBuilder() { return CreateBuilder(this); }
                public override Builder CreateBuilderForType() { return new Builder(); }
                public static Builder CreateBuilder(Query prototype) {
                  return new Builder(prototype);
                }
                
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
                public sealed partial class Builder : pb::GeneratedBuilder<Query, Builder> {
                  protected override Builder ThisBuilder {
                    get { return this; }
                  }
                  public Builder() {
                    result = DefaultInstance;
                    resultIsReadOnly = true;
                  }
                  internal Builder(Query cloneFrom) {
                    result = cloneFrom;
                    resultIsReadOnly = true;
                  }
                  
                  private bool resultIsReadOnly;
                  private Query result;
                  
                  private Query PrepareBuilder() {
                    if (resultIsReadOnly) {
                      Query original = result;
                      result = new Query();
                      resultIsReadOnly = false;
                      MergeFrom(original);
                    }
                    return result;
                  }
                  
                  public override bool IsInitialized {
                    get { return result.IsInitialized; }
                  }
                  
                  protected override Query MessageBeingBuilt {
                    get { return PrepareBuilder(); }
                  }
                  
                  public override Builder Clear() {
                    result = DefaultInstance;
                    resultIsReadOnly = true;
                    return this;
                  }
                  
                  public override Builder Clone() {
                    if (resultIsReadOnly) {
                      return new Builder(result);
                    } else {
                      return new Builder().MergeFrom(result);
                    }
                  }
                  
                  public override pbd::MessageDescriptor DescriptorForType {
                    get { return global::protos.Internal.Types.Global.Types.Online.Types.Query.Descriptor; }
                  }
                  
                  public override Query DefaultInstanceForType {
                    get { return global::protos.Internal.Types.Global.Types.Online.Types.Query.DefaultInstance; }
                  }
                  
                  public override Query BuildPartial() {
                    if (resultIsReadOnly) {
                      return result;
                    }
                    resultIsReadOnly = true;
                    return result.MakeReadOnly();
                  }
                  
                  public override Builder MergeFrom(pb::IMessage other) {
                    if (other is Query) {
                      return MergeFrom((Query) other);
                    } else {
                      base.MergeFrom(other);
                      return this;
                    }
                  }
                  
                  public override Builder MergeFrom(Query other) {
                    if (other == global::protos.Internal.Types.Global.Types.Online.Types.Query.DefaultInstance) return this;
                    PrepareBuilder();
                    if (other.HasAccount) {
                      Account = other.Account;
                    }
                    this.MergeUnknownFields(other.UnknownFields);
                    return this;
                  }
                  
                  public override Builder MergeFrom(pb::ICodedInputStream input) {
                    return MergeFrom(input, pb::ExtensionRegistry.Empty);
                  }
                  
                  public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
                    PrepareBuilder();
                    pb::UnknownFieldSet.Builder unknownFields = null;
                    uint tag;
                    string field_name;
                    while (input.ReadTag(out tag, out field_name)) {
                      if(tag == 0 && field_name != null) {
                        int field_ordinal = global::System.Array.BinarySearch(_queryFieldNames, field_name, global::System.StringComparer.Ordinal);
                        if(field_ordinal >= 0)
                          tag = _queryFieldTags[field_ordinal];
                        else {
                          if (unknownFields == null) {
                            unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                          }
                          ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                          continue;
                        }
                      }
                      switch (tag) {
                        case 0: {
                          throw pb::InvalidProtocolBufferException.InvalidTag();
                        }
                        default: {
                          if (pb::WireFormat.IsEndGroupTag(tag)) {
                            if (unknownFields != null) {
                              this.UnknownFields = unknownFields.Build();
                            }
                            return this;
                          }
                          if (unknownFields == null) {
                            unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                          }
                          ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                          break;
                        }
                        case 10: {
                          result.hasAccount = input.ReadString(ref result.account_);
                          break;
                        }
                      }
                    }
                    
                    if (unknownFields != null) {
                      this.UnknownFields = unknownFields.Build();
                    }
                    return this;
                  }
                  
                  
                  public bool HasAccount {
                    get { return result.hasAccount; }
                  }
                  public string Account {
                    get { return result.Account; }
                    set { SetAccount(value); }
                  }
                  public Builder SetAccount(string value) {
                    pb::ThrowHelper.ThrowIfNull(value, "value");
                    PrepareBuilder();
                    result.hasAccount = true;
                    result.account_ = value;
                    return this;
                  }
                  public Builder ClearAccount() {
                    PrepareBuilder();
                    result.hasAccount = false;
                    result.account_ = "";
                    return this;
                  }
                }
                static Query() {
                  object.ReferenceEquals(global::protos.Proto.Gilgamesh.Descriptor, null);
                }
              }
              
              [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
              public sealed partial class QueryResponse : pb::GeneratedMessage<QueryResponse, QueryResponse.Builder> {
                private QueryResponse() { }
                private static readonly QueryResponse defaultInstance = new QueryResponse().MakeReadOnly();
                private static readonly string[] _queryResponseFieldNames = new string[] { "Session", "State", "Where" };
                private static readonly uint[] _queryResponseFieldTags = new uint[] { 24, 8, 18 };
                public static QueryResponse DefaultInstance {
                  get { return defaultInstance; }
                }
                
                public override QueryResponse DefaultInstanceForType {
                  get { return DefaultInstance; }
                }
                
                protected override QueryResponse ThisMessage {
                  get { return this; }
                }
                
                public static pbd::MessageDescriptor Descriptor {
                  get { return global::protos.Proto.Gilgamesh.internal__static_protos_Internal_Global_Online_QueryResponse__Descriptor; }
                }
                
                protected override pb::FieldAccess.FieldAccessorTable<QueryResponse, QueryResponse.Builder> InternalFieldAccessors {
                  get { return global::protos.Proto.Gilgamesh.internal__static_protos_Internal_Global_Online_QueryResponse__FieldAccessorTable; }
                }
                
                public const int StateFieldNumber = 1;
                private bool hasState;
                private bool state_;
                public bool HasState {
                  get { return hasState; }
                }
                public bool State {
                  get { return state_; }
                }
                
                public const int WhereFieldNumber = 2;
                private bool hasWhere;
                private string where_ = "";
                public bool HasWhere {
                  get { return hasWhere; }
                }
                public string Where {
                  get { return where_; }
                }
                
                public const int SessionFieldNumber = 3;
                private bool hasSession;
                private ulong session_;
                public bool HasSession {
                  get { return hasSession; }
                }
                [global::System.CLSCompliant(false)]
                public ulong Session {
                  get { return session_; }
                }
                
                public override bool IsInitialized {
                  get {
                    return true;
                  }
                }
                
                public override void WriteTo(pb::ICodedOutputStream output) {
                  CalcSerializedSize();
                  string[] field_names = _queryResponseFieldNames;
                  if (hasState) {
                    output.WriteBool(1, field_names[1], State);
                  }
                  if (hasWhere) {
                    output.WriteString(2, field_names[2], Where);
                  }
                  if (hasSession) {
                    output.WriteUInt64(3, field_names[0], Session);
                  }
                  UnknownFields.WriteTo(output);
                }
                
                private int memoizedSerializedSize = -1;
                public override int SerializedSize {
                  get {
                    int size = memoizedSerializedSize;
                    if (size != -1) return size;
                    return CalcSerializedSize();
                  }
                }
                
                private int CalcSerializedSize() {
                  int size = memoizedSerializedSize;
                  if (size != -1) return size;
                  
                  size = 0;
                  if (hasState) {
                    size += pb::CodedOutputStream.ComputeBoolSize(1, State);
                  }
                  if (hasWhere) {
                    size += pb::CodedOutputStream.ComputeStringSize(2, Where);
                  }
                  if (hasSession) {
                    size += pb::CodedOutputStream.ComputeUInt64Size(3, Session);
                  }
                  size += UnknownFields.SerializedSize;
                  memoizedSerializedSize = size;
                  return size;
                }
                public static QueryResponse ParseFrom(pb::ByteString data) {
                  return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
                }
                public static QueryResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
                  return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
                }
                public static QueryResponse ParseFrom(byte[] data) {
                  return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
                }
                public static QueryResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
                  return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
                }
                public static QueryResponse ParseFrom(global::System.IO.Stream input) {
                  return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
                }
                public static QueryResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
                  return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
                }
                public static QueryResponse ParseDelimitedFrom(global::System.IO.Stream input) {
                  return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
                }
                public static QueryResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
                  return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
                }
                public static QueryResponse ParseFrom(pb::ICodedInputStream input) {
                  return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
                }
                public static QueryResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
                  return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
                }
                private QueryResponse MakeReadOnly() {
                  return this;
                }
                
                public static Builder CreateBuilder() { return new Builder(); }
                public override Builder ToBuilder() { return CreateBuilder(this); }
                public override Builder CreateBuilderForType() { return new Builder(); }
                public static Builder CreateBuilder(QueryResponse prototype) {
                  return new Builder(prototype);
                }
                
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
                public sealed partial class Builder : pb::GeneratedBuilder<QueryResponse, Builder> {
                  protected override Builder ThisBuilder {
                    get { return this; }
                  }
                  public Builder() {
                    result = DefaultInstance;
                    resultIsReadOnly = true;
                  }
                  internal Builder(QueryResponse cloneFrom) {
                    result = cloneFrom;
                    resultIsReadOnly = true;
                  }
                  
                  private bool resultIsReadOnly;
                  private QueryResponse result;
                  
                  private QueryResponse PrepareBuilder() {
                    if (resultIsReadOnly) {
                      QueryResponse original = result;
                      result = new QueryResponse();
                      resultIsReadOnly = false;
                      MergeFrom(original);
                    }
                    return result;
                  }
                  
                  public override bool IsInitialized {
                    get { return result.IsInitialized; }
                  }
                  
                  protected override QueryResponse MessageBeingBuilt {
                    get { return PrepareBuilder(); }
                  }
                  
                  public override Builder Clear() {
                    result = DefaultInstance;
                    resultIsReadOnly = true;
                    return this;
                  }
                  
                  public override Builder Clone() {
                    if (resultIsReadOnly) {
                      return new Builder(result);
                    } else {
                      return new Builder().MergeFrom(result);
                    }
                  }
                  
                  public override pbd::MessageDescriptor DescriptorForType {
                    get { return global::protos.Internal.Types.Global.Types.Online.Types.QueryResponse.Descriptor; }
                  }
                  
                  public override QueryResponse DefaultInstanceForType {
                    get { return global::protos.Internal.Types.Global.Types.Online.Types.QueryResponse.DefaultInstance; }
                  }
                  
                  public override QueryResponse BuildPartial() {
                    if (resultIsReadOnly) {
                      return result;
                    }
                    resultIsReadOnly = true;
                    return result.MakeReadOnly();
                  }
                  
                  public override Builder MergeFrom(pb::IMessage other) {
                    if (other is QueryResponse) {
                      return MergeFrom((QueryResponse) other);
                    } else {
                      base.MergeFrom(other);
                      return this;
                    }
                  }
                  
                  public override Builder MergeFrom(QueryResponse other) {
                    if (other == global::protos.Internal.Types.Global.Types.Online.Types.QueryResponse.DefaultInstance) return this;
                    PrepareBuilder();
                    if (other.HasState) {
                      State = other.State;
                    }
                    if (other.HasWhere) {
                      Where = other.Where;
                    }
                    if (other.HasSession) {
                      Session = other.Session;
                    }
                    this.MergeUnknownFields(other.UnknownFields);
                    return this;
                  }
                  
                  public override Builder MergeFrom(pb::ICodedInputStream input) {
                    return MergeFrom(input, pb::ExtensionRegistry.Empty);
                  }
                  
                  public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
                    PrepareBuilder();
                    pb::UnknownFieldSet.Builder unknownFields = null;
                    uint tag;
                    string field_name;
                    while (input.ReadTag(out tag, out field_name)) {
                      if(tag == 0 && field_name != null) {
                        int field_ordinal = global::System.Array.BinarySearch(_queryResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
                        if(field_ordinal >= 0)
                          tag = _queryResponseFieldTags[field_ordinal];
                        else {
                          if (unknownFields == null) {
                            unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                          }
                          ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                          continue;
                        }
                      }
                      switch (tag) {
                        case 0: {
                          throw pb::InvalidProtocolBufferException.InvalidTag();
                        }
                        default: {
                          if (pb::WireFormat.IsEndGroupTag(tag)) {
                            if (unknownFields != null) {
                              this.UnknownFields = unknownFields.Build();
                            }
                            return this;
                          }
                          if (unknownFields == null) {
                            unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                          }
                          ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                          break;
                        }
                        case 8: {
                          result.hasState = input.ReadBool(ref result.state_);
                          break;
                        }
                        case 18: {
                          result.hasWhere = input.ReadString(ref result.where_);
                          break;
                        }
                        case 24: {
                          result.hasSession = input.ReadUInt64(ref result.session_);
                          break;
                        }
                      }
                    }
                    
                    if (unknownFields != null) {
                      this.UnknownFields = unknownFields.Build();
                    }
                    return this;
                  }
                  
                  
                  public bool HasState {
                    get { return result.hasState; }
                  }
                  public bool State {
                    get { return result.State; }
                    set { SetState(value); }
                  }
                  public Builder SetState(bool value) {
                    PrepareBuilder();
                    result.hasState = true;
                    result.state_ = value;
                    return this;
                  }
                  public Builder ClearState() {
                    PrepareBuilder();
                    result.hasState = false;
                    result.state_ = false;
                    return this;
                  }
                  
                  public bool HasWhere {
                    get { return result.hasWhere; }
                  }
                  public string Where {
                    get { return result.Where; }
                    set { SetWhere(value); }
                  }
                  public Builder SetWhere(string value) {
                    pb::ThrowHelper.ThrowIfNull(value, "value");
                    PrepareBuilder();
                    result.hasWhere = true;
                    result.where_ = value;
                    return this;
                  }
                  public Builder ClearWhere() {
                    PrepareBuilder();
                    result.hasWhere = false;
                    result.where_ = "";
                    return this;
                  }
                  
                  public bool HasSession {
                    get { return result.hasSession; }
                  }
                  [global::System.CLSCompliant(false)]
                  public ulong Session {
                    get { return result.Session; }
                    set { SetSession(value); }
                  }
                  [global::System.CLSCompliant(false)]
                  public Builder SetSession(ulong value) {
                    PrepareBuilder();
                    result.hasSession = true;
                    result.session_ = value;
                    return this;
                  }
                  public Builder ClearSession() {
                    PrepareBuilder();
                    result.hasSession = false;
                    result.session_ = 0UL;
                    return this;
                  }
                }
                static QueryResponse() {
                  object.ReferenceEquals(global::protos.Proto.Gilgamesh.Descriptor, null);
                }
              }
              
              [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
              public sealed partial class Set : pb::GeneratedMessage<Set, Set.Builder> {
                private Set() { }
                private static readonly Set defaultInstance = new Set().MakeReadOnly();
                private static readonly string[] _setFieldNames = new string[] { "Account", "State" };
                private static readonly uint[] _setFieldTags = new uint[] { 10, 16 };
                public static Set DefaultInstance {
                  get { return defaultInstance; }
                }
                
                public override Set DefaultInstanceForType {
                  get { return DefaultInstance; }
                }
                
                protected override Set ThisMessage {
                  get { return this; }
                }
                
                public static pbd::MessageDescriptor Descriptor {
                  get { return global::protos.Proto.Gilgamesh.internal__static_protos_Internal_Global_Online_Set__Descriptor; }
                }
                
                protected override pb::FieldAccess.FieldAccessorTable<Set, Set.Builder> InternalFieldAccessors {
                  get { return global::protos.Proto.Gilgamesh.internal__static_protos_Internal_Global_Online_Set__FieldAccessorTable; }
                }
                
                public const int AccountFieldNumber = 1;
                private bool hasAccount;
                private string account_ = "";
                public bool HasAccount {
                  get { return hasAccount; }
                }
                public string Account {
                  get { return account_; }
                }
                
                public const int StateFieldNumber = 2;
                private bool hasState;
                private bool state_;
                public bool HasState {
                  get { return hasState; }
                }
                public bool State {
                  get { return state_; }
                }
                
                public override bool IsInitialized {
                  get {
                    return true;
                  }
                }
                
                public override void WriteTo(pb::ICodedOutputStream output) {
                  CalcSerializedSize();
                  string[] field_names = _setFieldNames;
                  if (hasAccount) {
                    output.WriteString(1, field_names[0], Account);
                  }
                  if (hasState) {
                    output.WriteBool(2, field_names[1], State);
                  }
                  UnknownFields.WriteTo(output);
                }
                
                private int memoizedSerializedSize = -1;
                public override int SerializedSize {
                  get {
                    int size = memoizedSerializedSize;
                    if (size != -1) return size;
                    return CalcSerializedSize();
                  }
                }
                
                private int CalcSerializedSize() {
                  int size = memoizedSerializedSize;
                  if (size != -1) return size;
                  
                  size = 0;
                  if (hasAccount) {
                    size += pb::CodedOutputStream.ComputeStringSize(1, Account);
                  }
                  if (hasState) {
                    size += pb::CodedOutputStream.ComputeBoolSize(2, State);
                  }
                  size += UnknownFields.SerializedSize;
                  memoizedSerializedSize = size;
                  return size;
                }
                public static Set ParseFrom(pb::ByteString data) {
                  return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
                }
                public static Set ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
                  return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
                }
                public static Set ParseFrom(byte[] data) {
                  return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
                }
                public static Set ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
                  return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
                }
                public static Set ParseFrom(global::System.IO.Stream input) {
                  return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
                }
                public static Set ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
                  return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
                }
                public static Set ParseDelimitedFrom(global::System.IO.Stream input) {
                  return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
                }
                public static Set ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
                  return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
                }
                public static Set ParseFrom(pb::ICodedInputStream input) {
                  return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
                }
                public static Set ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
                  return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
                }
                private Set MakeReadOnly() {
                  return this;
                }
                
                public static Builder CreateBuilder() { return new Builder(); }
                public override Builder ToBuilder() { return CreateBuilder(this); }
                public override Builder CreateBuilderForType() { return new Builder(); }
                public static Builder CreateBuilder(Set prototype) {
                  return new Builder(prototype);
                }
                
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
                public sealed partial class Builder : pb::GeneratedBuilder<Set, Builder> {
                  protected override Builder ThisBuilder {
                    get { return this; }
                  }
                  public Builder() {
                    result = DefaultInstance;
                    resultIsReadOnly = true;
                  }
                  internal Builder(Set cloneFrom) {
                    result = cloneFrom;
                    resultIsReadOnly = true;
                  }
                  
                  private bool resultIsReadOnly;
                  private Set result;
                  
                  private Set PrepareBuilder() {
                    if (resultIsReadOnly) {
                      Set original = result;
                      result = new Set();
                      resultIsReadOnly = false;
                      MergeFrom(original);
                    }
                    return result;
                  }
                  
                  public override bool IsInitialized {
                    get { return result.IsInitialized; }
                  }
                  
                  protected override Set MessageBeingBuilt {
                    get { return PrepareBuilder(); }
                  }
                  
                  public override Builder Clear() {
                    result = DefaultInstance;
                    resultIsReadOnly = true;
                    return this;
                  }
                  
                  public override Builder Clone() {
                    if (resultIsReadOnly) {
                      return new Builder(result);
                    } else {
                      return new Builder().MergeFrom(result);
                    }
                  }
                  
                  public override pbd::MessageDescriptor DescriptorForType {
                    get { return global::protos.Internal.Types.Global.Types.Online.Types.Set.Descriptor; }
                  }
                  
                  public override Set DefaultInstanceForType {
                    get { return global::protos.Internal.Types.Global.Types.Online.Types.Set.DefaultInstance; }
                  }
                  
                  public override Set BuildPartial() {
                    if (resultIsReadOnly) {
                      return result;
                    }
                    resultIsReadOnly = true;
                    return result.MakeReadOnly();
                  }
                  
                  public override Builder MergeFrom(pb::IMessage other) {
                    if (other is Set) {
                      return MergeFrom((Set) other);
                    } else {
                      base.MergeFrom(other);
                      return this;
                    }
                  }
                  
                  public override Builder MergeFrom(Set other) {
                    if (other == global::protos.Internal.Types.Global.Types.Online.Types.Set.DefaultInstance) return this;
                    PrepareBuilder();
                    if (other.HasAccount) {
                      Account = other.Account;
                    }
                    if (other.HasState) {
                      State = other.State;
                    }
                    this.MergeUnknownFields(other.UnknownFields);
                    return this;
                  }
                  
                  public override Builder MergeFrom(pb::ICodedInputStream input) {
                    return MergeFrom(input, pb::ExtensionRegistry.Empty);
                  }
                  
                  public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
                    PrepareBuilder();
                    pb::UnknownFieldSet.Builder unknownFields = null;
                    uint tag;
                    string field_name;
                    while (input.ReadTag(out tag, out field_name)) {
                      if(tag == 0 && field_name != null) {
                        int field_ordinal = global::System.Array.BinarySearch(_setFieldNames, field_name, global::System.StringComparer.Ordinal);
                        if(field_ordinal >= 0)
                          tag = _setFieldTags[field_ordinal];
                        else {
                          if (unknownFields == null) {
                            unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                          }
                          ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                          continue;
                        }
                      }
                      switch (tag) {
                        case 0: {
                          throw pb::InvalidProtocolBufferException.InvalidTag();
                        }
                        default: {
                          if (pb::WireFormat.IsEndGroupTag(tag)) {
                            if (unknownFields != null) {
                              this.UnknownFields = unknownFields.Build();
                            }
                            return this;
                          }
                          if (unknownFields == null) {
                            unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                          }
                          ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                          break;
                        }
                        case 10: {
                          result.hasAccount = input.ReadString(ref result.account_);
                          break;
                        }
                        case 16: {
                          result.hasState = input.ReadBool(ref result.state_);
                          break;
                        }
                      }
                    }
                    
                    if (unknownFields != null) {
                      this.UnknownFields = unknownFields.Build();
                    }
                    return this;
                  }
                  
                  
                  public bool HasAccount {
                    get { return result.hasAccount; }
                  }
                  public string Account {
                    get { return result.Account; }
                    set { SetAccount(value); }
                  }
                  public Builder SetAccount(string value) {
                    pb::ThrowHelper.ThrowIfNull(value, "value");
                    PrepareBuilder();
                    result.hasAccount = true;
                    result.account_ = value;
                    return this;
                  }
                  public Builder ClearAccount() {
                    PrepareBuilder();
                    result.hasAccount = false;
                    result.account_ = "";
                    return this;
                  }
                  
                  public bool HasState {
                    get { return result.hasState; }
                  }
                  public bool State {
                    get { return result.State; }
                    set { SetState(value); }
                  }
                  public Builder SetState(bool value) {
                    PrepareBuilder();
                    result.hasState = true;
                    result.state_ = value;
                    return this;
                  }
                  public Builder ClearState() {
                    PrepareBuilder();
                    result.hasState = false;
                    result.state_ = false;
                    return this;
                  }
                }
                static Set() {
                  object.ReferenceEquals(global::protos.Proto.Gilgamesh.Descriptor, null);
                }
              }
              
            }
            #endregion
            
            public override bool IsInitialized {
              get {
                return true;
              }
            }
            
            public override void WriteTo(pb::ICodedOutputStream output) {
              CalcSerializedSize();
              string[] field_names = _onlineFieldNames;
              UnknownFields.WriteTo(output);
            }
            
            private int memoizedSerializedSize = -1;
            public override int SerializedSize {
              get {
                int size = memoizedSerializedSize;
                if (size != -1) return size;
                return CalcSerializedSize();
              }
            }
            
            private int CalcSerializedSize() {
              int size = memoizedSerializedSize;
              if (size != -1) return size;
              
              size = 0;
              size += UnknownFields.SerializedSize;
              memoizedSerializedSize = size;
              return size;
            }
            public static Online ParseFrom(pb::ByteString data) {
              return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
            }
            public static Online ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
              return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
            }
            public static Online ParseFrom(byte[] data) {
              return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
            }
            public static Online ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
              return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
            }
            public static Online ParseFrom(global::System.IO.Stream input) {
              return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
            }
            public static Online ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
              return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
            }
            public static Online ParseDelimitedFrom(global::System.IO.Stream input) {
              return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
            }
            public static Online ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
              return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
            }
            public static Online ParseFrom(pb::ICodedInputStream input) {
              return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
            }
            public static Online ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
              return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
            }
            private Online MakeReadOnly() {
              return this;
            }
            
            public static Builder CreateBuilder() { return new Builder(); }
            public override Builder ToBuilder() { return CreateBuilder(this); }
            public override Builder CreateBuilderForType() { return new Builder(); }
            public static Builder CreateBuilder(Online prototype) {
              return new Builder(prototype);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sealed partial class Builder : pb::GeneratedBuilder<Online, Builder> {
              protected override Builder ThisBuilder {
                get { return this; }
              }
              public Builder() {
                result = DefaultInstance;
                resultIsReadOnly = true;
              }
              internal Builder(Online cloneFrom) {
                result = cloneFrom;
                resultIsReadOnly = true;
              }
              
              private bool resultIsReadOnly;
              private Online result;
              
              private Online PrepareBuilder() {
                if (resultIsReadOnly) {
                  Online original = result;
                  result = new Online();
                  resultIsReadOnly = false;
                  MergeFrom(original);
                }
                return result;
              }
              
              public override bool IsInitialized {
                get { return result.IsInitialized; }
              }
              
              protected override Online MessageBeingBuilt {
                get { return PrepareBuilder(); }
              }
              
              public override Builder Clear() {
                result = DefaultInstance;
                resultIsReadOnly = true;
                return this;
              }
              
              public override Builder Clone() {
                if (resultIsReadOnly) {
                  return new Builder(result);
                } else {
                  return new Builder().MergeFrom(result);
                }
              }
              
              public override pbd::MessageDescriptor DescriptorForType {
                get { return global::protos.Internal.Types.Global.Types.Online.Descriptor; }
              }
              
              public override Online DefaultInstanceForType {
                get { return global::protos.Internal.Types.Global.Types.Online.DefaultInstance; }
              }
              
              public override Online BuildPartial() {
                if (resultIsReadOnly) {
                  return result;
                }
                resultIsReadOnly = true;
                return result.MakeReadOnly();
              }
              
              public override Builder MergeFrom(pb::IMessage other) {
                if (other is Online) {
                  return MergeFrom((Online) other);
                } else {
                  base.MergeFrom(other);
                  return this;
                }
              }
              
              public override Builder MergeFrom(Online other) {
                if (other == global::protos.Internal.Types.Global.Types.Online.DefaultInstance) return this;
                PrepareBuilder();
                this.MergeUnknownFields(other.UnknownFields);
                return this;
              }
              
              public override Builder MergeFrom(pb::ICodedInputStream input) {
                return MergeFrom(input, pb::ExtensionRegistry.Empty);
              }
              
              public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
                PrepareBuilder();
                pb::UnknownFieldSet.Builder unknownFields = null;
                uint tag;
                string field_name;
                while (input.ReadTag(out tag, out field_name)) {
                  if(tag == 0 && field_name != null) {
                    int field_ordinal = global::System.Array.BinarySearch(_onlineFieldNames, field_name, global::System.StringComparer.Ordinal);
                    if(field_ordinal >= 0)
                      tag = _onlineFieldTags[field_ordinal];
                    else {
                      if (unknownFields == null) {
                        unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                      }
                      ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                      continue;
                    }
                  }
                  switch (tag) {
                    case 0: {
                      throw pb::InvalidProtocolBufferException.InvalidTag();
                    }
                    default: {
                      if (pb::WireFormat.IsEndGroupTag(tag)) {
                        if (unknownFields != null) {
                          this.UnknownFields = unknownFields.Build();
                        }
                        return this;
                      }
                      if (unknownFields == null) {
                        unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                      }
                      ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                      break;
                    }
                  }
                }
                
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              
            }
            static Online() {
              object.ReferenceEquals(global::protos.Proto.Gilgamesh.Descriptor, null);
            }
          }
          
        }
        #endregion
        
        public override bool IsInitialized {
          get {
            return true;
          }
        }
        
        public override void WriteTo(pb::ICodedOutputStream output) {
          CalcSerializedSize();
          string[] field_names = _globalFieldNames;
          UnknownFields.WriteTo(output);
        }
        
        private int memoizedSerializedSize = -1;
        public override int SerializedSize {
          get {
            int size = memoizedSerializedSize;
            if (size != -1) return size;
            return CalcSerializedSize();
          }
        }
        
        private int CalcSerializedSize() {
          int size = memoizedSerializedSize;
          if (size != -1) return size;
          
          size = 0;
          size += UnknownFields.SerializedSize;
          memoizedSerializedSize = size;
          return size;
        }
        public static Global ParseFrom(pb::ByteString data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static Global ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static Global ParseFrom(byte[] data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static Global ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static Global ParseFrom(global::System.IO.Stream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static Global ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static Global ParseDelimitedFrom(global::System.IO.Stream input) {
          return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static Global ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static Global ParseFrom(pb::ICodedInputStream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static Global ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private Global MakeReadOnly() {
          return this;
        }
        
        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(Global prototype) {
          return new Builder(prototype);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Builder : pb::GeneratedBuilder<Global, Builder> {
          protected override Builder ThisBuilder {
            get { return this; }
          }
          public Builder() {
            result = DefaultInstance;
            resultIsReadOnly = true;
          }
          internal Builder(Global cloneFrom) {
            result = cloneFrom;
            resultIsReadOnly = true;
          }
          
          private bool resultIsReadOnly;
          private Global result;
          
          private Global PrepareBuilder() {
            if (resultIsReadOnly) {
              Global original = result;
              result = new Global();
              resultIsReadOnly = false;
              MergeFrom(original);
            }
            return result;
          }
          
          public override bool IsInitialized {
            get { return result.IsInitialized; }
          }
          
          protected override Global MessageBeingBuilt {
            get { return PrepareBuilder(); }
          }
          
          public override Builder Clear() {
            result = DefaultInstance;
            resultIsReadOnly = true;
            return this;
          }
          
          public override Builder Clone() {
            if (resultIsReadOnly) {
              return new Builder(result);
            } else {
              return new Builder().MergeFrom(result);
            }
          }
          
          public override pbd::MessageDescriptor DescriptorForType {
            get { return global::protos.Internal.Types.Global.Descriptor; }
          }
          
          public override Global DefaultInstanceForType {
            get { return global::protos.Internal.Types.Global.DefaultInstance; }
          }
          
          public override Global BuildPartial() {
            if (resultIsReadOnly) {
              return result;
            }
            resultIsReadOnly = true;
            return result.MakeReadOnly();
          }
          
          public override Builder MergeFrom(pb::IMessage other) {
            if (other is Global) {
              return MergeFrom((Global) other);
            } else {
              base.MergeFrom(other);
              return this;
            }
          }
          
          public override Builder MergeFrom(Global other) {
            if (other == global::protos.Internal.Types.Global.DefaultInstance) return this;
            PrepareBuilder();
            this.MergeUnknownFields(other.UnknownFields);
            return this;
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input) {
            return MergeFrom(input, pb::ExtensionRegistry.Empty);
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
            PrepareBuilder();
            pb::UnknownFieldSet.Builder unknownFields = null;
            uint tag;
            string field_name;
            while (input.ReadTag(out tag, out field_name)) {
              if(tag == 0 && field_name != null) {
                int field_ordinal = global::System.Array.BinarySearch(_globalFieldNames, field_name, global::System.StringComparer.Ordinal);
                if(field_ordinal >= 0)
                  tag = _globalFieldTags[field_ordinal];
                else {
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  continue;
                }
              }
              switch (tag) {
                case 0: {
                  throw pb::InvalidProtocolBufferException.InvalidTag();
                }
                default: {
                  if (pb::WireFormat.IsEndGroupTag(tag)) {
                    if (unknownFields != null) {
                      this.UnknownFields = unknownFields.Build();
                    }
                    return this;
                  }
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  break;
                }
              }
            }
            
            if (unknownFields != null) {
              this.UnknownFields = unknownFields.Build();
            }
            return this;
          }
          
        }
        static Global() {
          object.ReferenceEquals(global::protos.Proto.Gilgamesh.Descriptor, null);
        }
      }
      
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class Gate : pb::GeneratedMessage<Gate, Gate.Builder> {
        private Gate() { }
        private static readonly Gate defaultInstance = new Gate().MakeReadOnly();
        private static readonly string[] _gateFieldNames = new string[] {  };
        private static readonly uint[] _gateFieldTags = new uint[] {  };
        public static Gate DefaultInstance {
          get { return defaultInstance; }
        }
        
        public override Gate DefaultInstanceForType {
          get { return DefaultInstance; }
        }
        
        protected override Gate ThisMessage {
          get { return this; }
        }
        
        public static pbd::MessageDescriptor Descriptor {
          get { return global::protos.Proto.Gilgamesh.internal__static_protos_Internal_Gate__Descriptor; }
        }
        
        protected override pb::FieldAccess.FieldAccessorTable<Gate, Gate.Builder> InternalFieldAccessors {
          get { return global::protos.Proto.Gilgamesh.internal__static_protos_Internal_Gate__FieldAccessorTable; }
        }
        
        #region Nested types
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static partial class Types {
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
          public sealed partial class Kick : pb::GeneratedMessage<Kick, Kick.Builder> {
            private Kick() { }
            private static readonly Kick defaultInstance = new Kick().MakeReadOnly();
            private static readonly string[] _kickFieldNames = new string[] { "Session" };
            private static readonly uint[] _kickFieldTags = new uint[] { 8 };
            public static Kick DefaultInstance {
              get { return defaultInstance; }
            }
            
            public override Kick DefaultInstanceForType {
              get { return DefaultInstance; }
            }
            
            protected override Kick ThisMessage {
              get { return this; }
            }
            
            public static pbd::MessageDescriptor Descriptor {
              get { return global::protos.Proto.Gilgamesh.internal__static_protos_Internal_Gate_Kick__Descriptor; }
            }
            
            protected override pb::FieldAccess.FieldAccessorTable<Kick, Kick.Builder> InternalFieldAccessors {
              get { return global::protos.Proto.Gilgamesh.internal__static_protos_Internal_Gate_Kick__FieldAccessorTable; }
            }
            
            public const int SessionFieldNumber = 1;
            private bool hasSession;
            private ulong session_;
            public bool HasSession {
              get { return hasSession; }
            }
            [global::System.CLSCompliant(false)]
            public ulong Session {
              get { return session_; }
            }
            
            public override bool IsInitialized {
              get {
                return true;
              }
            }
            
            public override void WriteTo(pb::ICodedOutputStream output) {
              CalcSerializedSize();
              string[] field_names = _kickFieldNames;
              if (hasSession) {
                output.WriteUInt64(1, field_names[0], Session);
              }
              UnknownFields.WriteTo(output);
            }
            
            private int memoizedSerializedSize = -1;
            public override int SerializedSize {
              get {
                int size = memoizedSerializedSize;
                if (size != -1) return size;
                return CalcSerializedSize();
              }
            }
            
            private int CalcSerializedSize() {
              int size = memoizedSerializedSize;
              if (size != -1) return size;
              
              size = 0;
              if (hasSession) {
                size += pb::CodedOutputStream.ComputeUInt64Size(1, Session);
              }
              size += UnknownFields.SerializedSize;
              memoizedSerializedSize = size;
              return size;
            }
            public static Kick ParseFrom(pb::ByteString data) {
              return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
            }
            public static Kick ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
              return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
            }
            public static Kick ParseFrom(byte[] data) {
              return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
            }
            public static Kick ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
              return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
            }
            public static Kick ParseFrom(global::System.IO.Stream input) {
              return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
            }
            public static Kick ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
              return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
            }
            public static Kick ParseDelimitedFrom(global::System.IO.Stream input) {
              return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
            }
            public static Kick ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
              return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
            }
            public static Kick ParseFrom(pb::ICodedInputStream input) {
              return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
            }
            public static Kick ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
              return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
            }
            private Kick MakeReadOnly() {
              return this;
            }
            
            public static Builder CreateBuilder() { return new Builder(); }
            public override Builder ToBuilder() { return CreateBuilder(this); }
            public override Builder CreateBuilderForType() { return new Builder(); }
            public static Builder CreateBuilder(Kick prototype) {
              return new Builder(prototype);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sealed partial class Builder : pb::GeneratedBuilder<Kick, Builder> {
              protected override Builder ThisBuilder {
                get { return this; }
              }
              public Builder() {
                result = DefaultInstance;
                resultIsReadOnly = true;
              }
              internal Builder(Kick cloneFrom) {
                result = cloneFrom;
                resultIsReadOnly = true;
              }
              
              private bool resultIsReadOnly;
              private Kick result;
              
              private Kick PrepareBuilder() {
                if (resultIsReadOnly) {
                  Kick original = result;
                  result = new Kick();
                  resultIsReadOnly = false;
                  MergeFrom(original);
                }
                return result;
              }
              
              public override bool IsInitialized {
                get { return result.IsInitialized; }
              }
              
              protected override Kick MessageBeingBuilt {
                get { return PrepareBuilder(); }
              }
              
              public override Builder Clear() {
                result = DefaultInstance;
                resultIsReadOnly = true;
                return this;
              }
              
              public override Builder Clone() {
                if (resultIsReadOnly) {
                  return new Builder(result);
                } else {
                  return new Builder().MergeFrom(result);
                }
              }
              
              public override pbd::MessageDescriptor DescriptorForType {
                get { return global::protos.Internal.Types.Gate.Types.Kick.Descriptor; }
              }
              
              public override Kick DefaultInstanceForType {
                get { return global::protos.Internal.Types.Gate.Types.Kick.DefaultInstance; }
              }
              
              public override Kick BuildPartial() {
                if (resultIsReadOnly) {
                  return result;
                }
                resultIsReadOnly = true;
                return result.MakeReadOnly();
              }
              
              public override Builder MergeFrom(pb::IMessage other) {
                if (other is Kick) {
                  return MergeFrom((Kick) other);
                } else {
                  base.MergeFrom(other);
                  return this;
                }
              }
              
              public override Builder MergeFrom(Kick other) {
                if (other == global::protos.Internal.Types.Gate.Types.Kick.DefaultInstance) return this;
                PrepareBuilder();
                if (other.HasSession) {
                  Session = other.Session;
                }
                this.MergeUnknownFields(other.UnknownFields);
                return this;
              }
              
              public override Builder MergeFrom(pb::ICodedInputStream input) {
                return MergeFrom(input, pb::ExtensionRegistry.Empty);
              }
              
              public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
                PrepareBuilder();
                pb::UnknownFieldSet.Builder unknownFields = null;
                uint tag;
                string field_name;
                while (input.ReadTag(out tag, out field_name)) {
                  if(tag == 0 && field_name != null) {
                    int field_ordinal = global::System.Array.BinarySearch(_kickFieldNames, field_name, global::System.StringComparer.Ordinal);
                    if(field_ordinal >= 0)
                      tag = _kickFieldTags[field_ordinal];
                    else {
                      if (unknownFields == null) {
                        unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                      }
                      ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                      continue;
                    }
                  }
                  switch (tag) {
                    case 0: {
                      throw pb::InvalidProtocolBufferException.InvalidTag();
                    }
                    default: {
                      if (pb::WireFormat.IsEndGroupTag(tag)) {
                        if (unknownFields != null) {
                          this.UnknownFields = unknownFields.Build();
                        }
                        return this;
                      }
                      if (unknownFields == null) {
                        unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                      }
                      ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                      break;
                    }
                    case 8: {
                      result.hasSession = input.ReadUInt64(ref result.session_);
                      break;
                    }
                  }
                }
                
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              
              
              public bool HasSession {
                get { return result.hasSession; }
              }
              [global::System.CLSCompliant(false)]
              public ulong Session {
                get { return result.Session; }
                set { SetSession(value); }
              }
              [global::System.CLSCompliant(false)]
              public Builder SetSession(ulong value) {
                PrepareBuilder();
                result.hasSession = true;
                result.session_ = value;
                return this;
              }
              public Builder ClearSession() {
                PrepareBuilder();
                result.hasSession = false;
                result.session_ = 0UL;
                return this;
              }
            }
            static Kick() {
              object.ReferenceEquals(global::protos.Proto.Gilgamesh.Descriptor, null);
            }
          }
          
        }
        #endregion
        
        public override bool IsInitialized {
          get {
            return true;
          }
        }
        
        public override void WriteTo(pb::ICodedOutputStream output) {
          CalcSerializedSize();
          string[] field_names = _gateFieldNames;
          UnknownFields.WriteTo(output);
        }
        
        private int memoizedSerializedSize = -1;
        public override int SerializedSize {
          get {
            int size = memoizedSerializedSize;
            if (size != -1) return size;
            return CalcSerializedSize();
          }
        }
        
        private int CalcSerializedSize() {
          int size = memoizedSerializedSize;
          if (size != -1) return size;
          
          size = 0;
          size += UnknownFields.SerializedSize;
          memoizedSerializedSize = size;
          return size;
        }
        public static Gate ParseFrom(pb::ByteString data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static Gate ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static Gate ParseFrom(byte[] data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static Gate ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static Gate ParseFrom(global::System.IO.Stream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static Gate ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static Gate ParseDelimitedFrom(global::System.IO.Stream input) {
          return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static Gate ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static Gate ParseFrom(pb::ICodedInputStream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static Gate ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private Gate MakeReadOnly() {
          return this;
        }
        
        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(Gate prototype) {
          return new Builder(prototype);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Builder : pb::GeneratedBuilder<Gate, Builder> {
          protected override Builder ThisBuilder {
            get { return this; }
          }
          public Builder() {
            result = DefaultInstance;
            resultIsReadOnly = true;
          }
          internal Builder(Gate cloneFrom) {
            result = cloneFrom;
            resultIsReadOnly = true;
          }
          
          private bool resultIsReadOnly;
          private Gate result;
          
          private Gate PrepareBuilder() {
            if (resultIsReadOnly) {
              Gate original = result;
              result = new Gate();
              resultIsReadOnly = false;
              MergeFrom(original);
            }
            return result;
          }
          
          public override bool IsInitialized {
            get { return result.IsInitialized; }
          }
          
          protected override Gate MessageBeingBuilt {
            get { return PrepareBuilder(); }
          }
          
          public override Builder Clear() {
            result = DefaultInstance;
            resultIsReadOnly = true;
            return this;
          }
          
          public override Builder Clone() {
            if (resultIsReadOnly) {
              return new Builder(result);
            } else {
              return new Builder().MergeFrom(result);
            }
          }
          
          public override pbd::MessageDescriptor DescriptorForType {
            get { return global::protos.Internal.Types.Gate.Descriptor; }
          }
          
          public override Gate DefaultInstanceForType {
            get { return global::protos.Internal.Types.Gate.DefaultInstance; }
          }
          
          public override Gate BuildPartial() {
            if (resultIsReadOnly) {
              return result;
            }
            resultIsReadOnly = true;
            return result.MakeReadOnly();
          }
          
          public override Builder MergeFrom(pb::IMessage other) {
            if (other is Gate) {
              return MergeFrom((Gate) other);
            } else {
              base.MergeFrom(other);
              return this;
            }
          }
          
          public override Builder MergeFrom(Gate other) {
            if (other == global::protos.Internal.Types.Gate.DefaultInstance) return this;
            PrepareBuilder();
            this.MergeUnknownFields(other.UnknownFields);
            return this;
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input) {
            return MergeFrom(input, pb::ExtensionRegistry.Empty);
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
            PrepareBuilder();
            pb::UnknownFieldSet.Builder unknownFields = null;
            uint tag;
            string field_name;
            while (input.ReadTag(out tag, out field_name)) {
              if(tag == 0 && field_name != null) {
                int field_ordinal = global::System.Array.BinarySearch(_gateFieldNames, field_name, global::System.StringComparer.Ordinal);
                if(field_ordinal >= 0)
                  tag = _gateFieldTags[field_ordinal];
                else {
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  continue;
                }
              }
              switch (tag) {
                case 0: {
                  throw pb::InvalidProtocolBufferException.InvalidTag();
                }
                default: {
                  if (pb::WireFormat.IsEndGroupTag(tag)) {
                    if (unknownFields != null) {
                      this.UnknownFields = unknownFields.Build();
                    }
                    return this;
                  }
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  break;
                }
              }
            }
            
            if (unknownFields != null) {
              this.UnknownFields = unknownFields.Build();
            }
            return this;
          }
          
        }
        static Gate() {
          object.ReferenceEquals(global::protos.Proto.Gilgamesh.Descriptor, null);
        }
      }
      
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class Hall : pb::GeneratedMessage<Hall, Hall.Builder> {
        private Hall() { }
        private static readonly Hall defaultInstance = new Hall().MakeReadOnly();
        private static readonly string[] _hallFieldNames = new string[] {  };
        private static readonly uint[] _hallFieldTags = new uint[] {  };
        public static Hall DefaultInstance {
          get { return defaultInstance; }
        }
        
        public override Hall DefaultInstanceForType {
          get { return DefaultInstance; }
        }
        
        protected override Hall ThisMessage {
          get { return this; }
        }
        
        public static pbd::MessageDescriptor Descriptor {
          get { return global::protos.Proto.Gilgamesh.internal__static_protos_Internal_Hall__Descriptor; }
        }
        
        protected override pb::FieldAccess.FieldAccessorTable<Hall, Hall.Builder> InternalFieldAccessors {
          get { return global::protos.Proto.Gilgamesh.internal__static_protos_Internal_Hall__FieldAccessorTable; }
        }
        
        #region Nested types
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static partial class Types {
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
          public sealed partial class Enter : pb::GeneratedMessage<Enter, Enter.Builder> {
            private Enter() { }
            private static readonly Enter defaultInstance = new Enter().MakeReadOnly();
            private static readonly string[] _enterFieldNames = new string[] { "Account" };
            private static readonly uint[] _enterFieldTags = new uint[] { 10 };
            public static Enter DefaultInstance {
              get { return defaultInstance; }
            }
            
            public override Enter DefaultInstanceForType {
              get { return DefaultInstance; }
            }
            
            protected override Enter ThisMessage {
              get { return this; }
            }
            
            public static pbd::MessageDescriptor Descriptor {
              get { return global::protos.Proto.Gilgamesh.internal__static_protos_Internal_Hall_Enter__Descriptor; }
            }
            
            protected override pb::FieldAccess.FieldAccessorTable<Enter, Enter.Builder> InternalFieldAccessors {
              get { return global::protos.Proto.Gilgamesh.internal__static_protos_Internal_Hall_Enter__FieldAccessorTable; }
            }
            
            public const int AccountFieldNumber = 1;
            private bool hasAccount;
            private string account_ = "";
            public bool HasAccount {
              get { return hasAccount; }
            }
            public string Account {
              get { return account_; }
            }
            
            public override bool IsInitialized {
              get {
                return true;
              }
            }
            
            public override void WriteTo(pb::ICodedOutputStream output) {
              CalcSerializedSize();
              string[] field_names = _enterFieldNames;
              if (hasAccount) {
                output.WriteString(1, field_names[0], Account);
              }
              UnknownFields.WriteTo(output);
            }
            
            private int memoizedSerializedSize = -1;
            public override int SerializedSize {
              get {
                int size = memoizedSerializedSize;
                if (size != -1) return size;
                return CalcSerializedSize();
              }
            }
            
            private int CalcSerializedSize() {
              int size = memoizedSerializedSize;
              if (size != -1) return size;
              
              size = 0;
              if (hasAccount) {
                size += pb::CodedOutputStream.ComputeStringSize(1, Account);
              }
              size += UnknownFields.SerializedSize;
              memoizedSerializedSize = size;
              return size;
            }
            public static Enter ParseFrom(pb::ByteString data) {
              return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
            }
            public static Enter ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
              return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
            }
            public static Enter ParseFrom(byte[] data) {
              return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
            }
            public static Enter ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
              return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
            }
            public static Enter ParseFrom(global::System.IO.Stream input) {
              return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
            }
            public static Enter ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
              return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
            }
            public static Enter ParseDelimitedFrom(global::System.IO.Stream input) {
              return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
            }
            public static Enter ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
              return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
            }
            public static Enter ParseFrom(pb::ICodedInputStream input) {
              return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
            }
            public static Enter ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
              return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
            }
            private Enter MakeReadOnly() {
              return this;
            }
            
            public static Builder CreateBuilder() { return new Builder(); }
            public override Builder ToBuilder() { return CreateBuilder(this); }
            public override Builder CreateBuilderForType() { return new Builder(); }
            public static Builder CreateBuilder(Enter prototype) {
              return new Builder(prototype);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sealed partial class Builder : pb::GeneratedBuilder<Enter, Builder> {
              protected override Builder ThisBuilder {
                get { return this; }
              }
              public Builder() {
                result = DefaultInstance;
                resultIsReadOnly = true;
              }
              internal Builder(Enter cloneFrom) {
                result = cloneFrom;
                resultIsReadOnly = true;
              }
              
              private bool resultIsReadOnly;
              private Enter result;
              
              private Enter PrepareBuilder() {
                if (resultIsReadOnly) {
                  Enter original = result;
                  result = new Enter();
                  resultIsReadOnly = false;
                  MergeFrom(original);
                }
                return result;
              }
              
              public override bool IsInitialized {
                get { return result.IsInitialized; }
              }
              
              protected override Enter MessageBeingBuilt {
                get { return PrepareBuilder(); }
              }
              
              public override Builder Clear() {
                result = DefaultInstance;
                resultIsReadOnly = true;
                return this;
              }
              
              public override Builder Clone() {
                if (resultIsReadOnly) {
                  return new Builder(result);
                } else {
                  return new Builder().MergeFrom(result);
                }
              }
              
              public override pbd::MessageDescriptor DescriptorForType {
                get { return global::protos.Internal.Types.Hall.Types.Enter.Descriptor; }
              }
              
              public override Enter DefaultInstanceForType {
                get { return global::protos.Internal.Types.Hall.Types.Enter.DefaultInstance; }
              }
              
              public override Enter BuildPartial() {
                if (resultIsReadOnly) {
                  return result;
                }
                resultIsReadOnly = true;
                return result.MakeReadOnly();
              }
              
              public override Builder MergeFrom(pb::IMessage other) {
                if (other is Enter) {
                  return MergeFrom((Enter) other);
                } else {
                  base.MergeFrom(other);
                  return this;
                }
              }
              
              public override Builder MergeFrom(Enter other) {
                if (other == global::protos.Internal.Types.Hall.Types.Enter.DefaultInstance) return this;
                PrepareBuilder();
                if (other.HasAccount) {
                  Account = other.Account;
                }
                this.MergeUnknownFields(other.UnknownFields);
                return this;
              }
              
              public override Builder MergeFrom(pb::ICodedInputStream input) {
                return MergeFrom(input, pb::ExtensionRegistry.Empty);
              }
              
              public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
                PrepareBuilder();
                pb::UnknownFieldSet.Builder unknownFields = null;
                uint tag;
                string field_name;
                while (input.ReadTag(out tag, out field_name)) {
                  if(tag == 0 && field_name != null) {
                    int field_ordinal = global::System.Array.BinarySearch(_enterFieldNames, field_name, global::System.StringComparer.Ordinal);
                    if(field_ordinal >= 0)
                      tag = _enterFieldTags[field_ordinal];
                    else {
                      if (unknownFields == null) {
                        unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                      }
                      ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                      continue;
                    }
                  }
                  switch (tag) {
                    case 0: {
                      throw pb::InvalidProtocolBufferException.InvalidTag();
                    }
                    default: {
                      if (pb::WireFormat.IsEndGroupTag(tag)) {
                        if (unknownFields != null) {
                          this.UnknownFields = unknownFields.Build();
                        }
                        return this;
                      }
                      if (unknownFields == null) {
                        unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                      }
                      ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                      break;
                    }
                    case 10: {
                      result.hasAccount = input.ReadString(ref result.account_);
                      break;
                    }
                  }
                }
                
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              
              
              public bool HasAccount {
                get { return result.hasAccount; }
              }
              public string Account {
                get { return result.Account; }
                set { SetAccount(value); }
              }
              public Builder SetAccount(string value) {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasAccount = true;
                result.account_ = value;
                return this;
              }
              public Builder ClearAccount() {
                PrepareBuilder();
                result.hasAccount = false;
                result.account_ = "";
                return this;
              }
            }
            static Enter() {
              object.ReferenceEquals(global::protos.Proto.Gilgamesh.Descriptor, null);
            }
          }
          
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
          public sealed partial class Leave : pb::GeneratedMessage<Leave, Leave.Builder> {
            private Leave() { }
            private static readonly Leave defaultInstance = new Leave().MakeReadOnly();
            private static readonly string[] _leaveFieldNames = new string[] { "Account" };
            private static readonly uint[] _leaveFieldTags = new uint[] { 10 };
            public static Leave DefaultInstance {
              get { return defaultInstance; }
            }
            
            public override Leave DefaultInstanceForType {
              get { return DefaultInstance; }
            }
            
            protected override Leave ThisMessage {
              get { return this; }
            }
            
            public static pbd::MessageDescriptor Descriptor {
              get { return global::protos.Proto.Gilgamesh.internal__static_protos_Internal_Hall_Leave__Descriptor; }
            }
            
            protected override pb::FieldAccess.FieldAccessorTable<Leave, Leave.Builder> InternalFieldAccessors {
              get { return global::protos.Proto.Gilgamesh.internal__static_protos_Internal_Hall_Leave__FieldAccessorTable; }
            }
            
            public const int AccountFieldNumber = 1;
            private bool hasAccount;
            private string account_ = "";
            public bool HasAccount {
              get { return hasAccount; }
            }
            public string Account {
              get { return account_; }
            }
            
            public override bool IsInitialized {
              get {
                return true;
              }
            }
            
            public override void WriteTo(pb::ICodedOutputStream output) {
              CalcSerializedSize();
              string[] field_names = _leaveFieldNames;
              if (hasAccount) {
                output.WriteString(1, field_names[0], Account);
              }
              UnknownFields.WriteTo(output);
            }
            
            private int memoizedSerializedSize = -1;
            public override int SerializedSize {
              get {
                int size = memoizedSerializedSize;
                if (size != -1) return size;
                return CalcSerializedSize();
              }
            }
            
            private int CalcSerializedSize() {
              int size = memoizedSerializedSize;
              if (size != -1) return size;
              
              size = 0;
              if (hasAccount) {
                size += pb::CodedOutputStream.ComputeStringSize(1, Account);
              }
              size += UnknownFields.SerializedSize;
              memoizedSerializedSize = size;
              return size;
            }
            public static Leave ParseFrom(pb::ByteString data) {
              return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
            }
            public static Leave ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
              return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
            }
            public static Leave ParseFrom(byte[] data) {
              return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
            }
            public static Leave ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
              return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
            }
            public static Leave ParseFrom(global::System.IO.Stream input) {
              return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
            }
            public static Leave ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
              return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
            }
            public static Leave ParseDelimitedFrom(global::System.IO.Stream input) {
              return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
            }
            public static Leave ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
              return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
            }
            public static Leave ParseFrom(pb::ICodedInputStream input) {
              return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
            }
            public static Leave ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
              return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
            }
            private Leave MakeReadOnly() {
              return this;
            }
            
            public static Builder CreateBuilder() { return new Builder(); }
            public override Builder ToBuilder() { return CreateBuilder(this); }
            public override Builder CreateBuilderForType() { return new Builder(); }
            public static Builder CreateBuilder(Leave prototype) {
              return new Builder(prototype);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sealed partial class Builder : pb::GeneratedBuilder<Leave, Builder> {
              protected override Builder ThisBuilder {
                get { return this; }
              }
              public Builder() {
                result = DefaultInstance;
                resultIsReadOnly = true;
              }
              internal Builder(Leave cloneFrom) {
                result = cloneFrom;
                resultIsReadOnly = true;
              }
              
              private bool resultIsReadOnly;
              private Leave result;
              
              private Leave PrepareBuilder() {
                if (resultIsReadOnly) {
                  Leave original = result;
                  result = new Leave();
                  resultIsReadOnly = false;
                  MergeFrom(original);
                }
                return result;
              }
              
              public override bool IsInitialized {
                get { return result.IsInitialized; }
              }
              
              protected override Leave MessageBeingBuilt {
                get { return PrepareBuilder(); }
              }
              
              public override Builder Clear() {
                result = DefaultInstance;
                resultIsReadOnly = true;
                return this;
              }
              
              public override Builder Clone() {
                if (resultIsReadOnly) {
                  return new Builder(result);
                } else {
                  return new Builder().MergeFrom(result);
                }
              }
              
              public override pbd::MessageDescriptor DescriptorForType {
                get { return global::protos.Internal.Types.Hall.Types.Leave.Descriptor; }
              }
              
              public override Leave DefaultInstanceForType {
                get { return global::protos.Internal.Types.Hall.Types.Leave.DefaultInstance; }
              }
              
              public override Leave BuildPartial() {
                if (resultIsReadOnly) {
                  return result;
                }
                resultIsReadOnly = true;
                return result.MakeReadOnly();
              }
              
              public override Builder MergeFrom(pb::IMessage other) {
                if (other is Leave) {
                  return MergeFrom((Leave) other);
                } else {
                  base.MergeFrom(other);
                  return this;
                }
              }
              
              public override Builder MergeFrom(Leave other) {
                if (other == global::protos.Internal.Types.Hall.Types.Leave.DefaultInstance) return this;
                PrepareBuilder();
                if (other.HasAccount) {
                  Account = other.Account;
                }
                this.MergeUnknownFields(other.UnknownFields);
                return this;
              }
              
              public override Builder MergeFrom(pb::ICodedInputStream input) {
                return MergeFrom(input, pb::ExtensionRegistry.Empty);
              }
              
              public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
                PrepareBuilder();
                pb::UnknownFieldSet.Builder unknownFields = null;
                uint tag;
                string field_name;
                while (input.ReadTag(out tag, out field_name)) {
                  if(tag == 0 && field_name != null) {
                    int field_ordinal = global::System.Array.BinarySearch(_leaveFieldNames, field_name, global::System.StringComparer.Ordinal);
                    if(field_ordinal >= 0)
                      tag = _leaveFieldTags[field_ordinal];
                    else {
                      if (unknownFields == null) {
                        unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                      }
                      ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                      continue;
                    }
                  }
                  switch (tag) {
                    case 0: {
                      throw pb::InvalidProtocolBufferException.InvalidTag();
                    }
                    default: {
                      if (pb::WireFormat.IsEndGroupTag(tag)) {
                        if (unknownFields != null) {
                          this.UnknownFields = unknownFields.Build();
                        }
                        return this;
                      }
                      if (unknownFields == null) {
                        unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                      }
                      ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                      break;
                    }
                    case 10: {
                      result.hasAccount = input.ReadString(ref result.account_);
                      break;
                    }
                  }
                }
                
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              
              
              public bool HasAccount {
                get { return result.hasAccount; }
              }
              public string Account {
                get { return result.Account; }
                set { SetAccount(value); }
              }
              public Builder SetAccount(string value) {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasAccount = true;
                result.account_ = value;
                return this;
              }
              public Builder ClearAccount() {
                PrepareBuilder();
                result.hasAccount = false;
                result.account_ = "";
                return this;
              }
            }
            static Leave() {
              object.ReferenceEquals(global::protos.Proto.Gilgamesh.Descriptor, null);
            }
          }
          
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
          public sealed partial class CreateRoom : pb::GeneratedMessage<CreateRoom, CreateRoom.Builder> {
            private CreateRoom() { }
            private static readonly CreateRoom defaultInstance = new CreateRoom().MakeReadOnly();
            private static readonly string[] _createRoomFieldNames = new string[] { "Account", "Option" };
            private static readonly uint[] _createRoomFieldTags = new uint[] { 10, 18 };
            public static CreateRoom DefaultInstance {
              get { return defaultInstance; }
            }
            
            public override CreateRoom DefaultInstanceForType {
              get { return DefaultInstance; }
            }
            
            protected override CreateRoom ThisMessage {
              get { return this; }
            }
            
            public static pbd::MessageDescriptor Descriptor {
              get { return global::protos.Proto.Gilgamesh.internal__static_protos_Internal_Hall_CreateRoom__Descriptor; }
            }
            
            protected override pb::FieldAccess.FieldAccessorTable<CreateRoom, CreateRoom.Builder> InternalFieldAccessors {
              get { return global::protos.Proto.Gilgamesh.internal__static_protos_Internal_Hall_CreateRoom__FieldAccessorTable; }
            }
            
            public const int AccountFieldNumber = 1;
            private bool hasAccount;
            private string account_ = "";
            public bool HasAccount {
              get { return hasAccount; }
            }
            public string Account {
              get { return account_; }
            }
            
            public const int OptionFieldNumber = 2;
            private bool hasOption;
            private global::protos.Public.Types.RoomOption option_;
            public bool HasOption {
              get { return hasOption; }
            }
            public global::protos.Public.Types.RoomOption Option {
              get { return option_ ?? global::protos.Public.Types.RoomOption.DefaultInstance; }
            }
            
            public override bool IsInitialized {
              get {
                return true;
              }
            }
            
            public override void WriteTo(pb::ICodedOutputStream output) {
              CalcSerializedSize();
              string[] field_names = _createRoomFieldNames;
              if (hasAccount) {
                output.WriteString(1, field_names[0], Account);
              }
              if (hasOption) {
                output.WriteMessage(2, field_names[1], Option);
              }
              UnknownFields.WriteTo(output);
            }
            
            private int memoizedSerializedSize = -1;
            public override int SerializedSize {
              get {
                int size = memoizedSerializedSize;
                if (size != -1) return size;
                return CalcSerializedSize();
              }
            }
            
            private int CalcSerializedSize() {
              int size = memoizedSerializedSize;
              if (size != -1) return size;
              
              size = 0;
              if (hasAccount) {
                size += pb::CodedOutputStream.ComputeStringSize(1, Account);
              }
              if (hasOption) {
                size += pb::CodedOutputStream.ComputeMessageSize(2, Option);
              }
              size += UnknownFields.SerializedSize;
              memoizedSerializedSize = size;
              return size;
            }
            public static CreateRoom ParseFrom(pb::ByteString data) {
              return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
            }
            public static CreateRoom ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
              return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
            }
            public static CreateRoom ParseFrom(byte[] data) {
              return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
            }
            public static CreateRoom ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
              return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
            }
            public static CreateRoom ParseFrom(global::System.IO.Stream input) {
              return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
            }
            public static CreateRoom ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
              return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
            }
            public static CreateRoom ParseDelimitedFrom(global::System.IO.Stream input) {
              return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
            }
            public static CreateRoom ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
              return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
            }
            public static CreateRoom ParseFrom(pb::ICodedInputStream input) {
              return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
            }
            public static CreateRoom ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
              return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
            }
            private CreateRoom MakeReadOnly() {
              return this;
            }
            
            public static Builder CreateBuilder() { return new Builder(); }
            public override Builder ToBuilder() { return CreateBuilder(this); }
            public override Builder CreateBuilderForType() { return new Builder(); }
            public static Builder CreateBuilder(CreateRoom prototype) {
              return new Builder(prototype);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sealed partial class Builder : pb::GeneratedBuilder<CreateRoom, Builder> {
              protected override Builder ThisBuilder {
                get { return this; }
              }
              public Builder() {
                result = DefaultInstance;
                resultIsReadOnly = true;
              }
              internal Builder(CreateRoom cloneFrom) {
                result = cloneFrom;
                resultIsReadOnly = true;
              }
              
              private bool resultIsReadOnly;
              private CreateRoom result;
              
              private CreateRoom PrepareBuilder() {
                if (resultIsReadOnly) {
                  CreateRoom original = result;
                  result = new CreateRoom();
                  resultIsReadOnly = false;
                  MergeFrom(original);
                }
                return result;
              }
              
              public override bool IsInitialized {
                get { return result.IsInitialized; }
              }
              
              protected override CreateRoom MessageBeingBuilt {
                get { return PrepareBuilder(); }
              }
              
              public override Builder Clear() {
                result = DefaultInstance;
                resultIsReadOnly = true;
                return this;
              }
              
              public override Builder Clone() {
                if (resultIsReadOnly) {
                  return new Builder(result);
                } else {
                  return new Builder().MergeFrom(result);
                }
              }
              
              public override pbd::MessageDescriptor DescriptorForType {
                get { return global::protos.Internal.Types.Hall.Types.CreateRoom.Descriptor; }
              }
              
              public override CreateRoom DefaultInstanceForType {
                get { return global::protos.Internal.Types.Hall.Types.CreateRoom.DefaultInstance; }
              }
              
              public override CreateRoom BuildPartial() {
                if (resultIsReadOnly) {
                  return result;
                }
                resultIsReadOnly = true;
                return result.MakeReadOnly();
              }
              
              public override Builder MergeFrom(pb::IMessage other) {
                if (other is CreateRoom) {
                  return MergeFrom((CreateRoom) other);
                } else {
                  base.MergeFrom(other);
                  return this;
                }
              }
              
              public override Builder MergeFrom(CreateRoom other) {
                if (other == global::protos.Internal.Types.Hall.Types.CreateRoom.DefaultInstance) return this;
                PrepareBuilder();
                if (other.HasAccount) {
                  Account = other.Account;
                }
                if (other.HasOption) {
                  MergeOption(other.Option);
                }
                this.MergeUnknownFields(other.UnknownFields);
                return this;
              }
              
              public override Builder MergeFrom(pb::ICodedInputStream input) {
                return MergeFrom(input, pb::ExtensionRegistry.Empty);
              }
              
              public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
                PrepareBuilder();
                pb::UnknownFieldSet.Builder unknownFields = null;
                uint tag;
                string field_name;
                while (input.ReadTag(out tag, out field_name)) {
                  if(tag == 0 && field_name != null) {
                    int field_ordinal = global::System.Array.BinarySearch(_createRoomFieldNames, field_name, global::System.StringComparer.Ordinal);
                    if(field_ordinal >= 0)
                      tag = _createRoomFieldTags[field_ordinal];
                    else {
                      if (unknownFields == null) {
                        unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                      }
                      ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                      continue;
                    }
                  }
                  switch (tag) {
                    case 0: {
                      throw pb::InvalidProtocolBufferException.InvalidTag();
                    }
                    default: {
                      if (pb::WireFormat.IsEndGroupTag(tag)) {
                        if (unknownFields != null) {
                          this.UnknownFields = unknownFields.Build();
                        }
                        return this;
                      }
                      if (unknownFields == null) {
                        unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                      }
                      ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                      break;
                    }
                    case 10: {
                      result.hasAccount = input.ReadString(ref result.account_);
                      break;
                    }
                    case 18: {
                      global::protos.Public.Types.RoomOption.Builder subBuilder = global::protos.Public.Types.RoomOption.CreateBuilder();
                      if (result.hasOption) {
                        subBuilder.MergeFrom(Option);
                      }
                      input.ReadMessage(subBuilder, extensionRegistry);
                      Option = subBuilder.BuildPartial();
                      break;
                    }
                  }
                }
                
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              
              
              public bool HasAccount {
                get { return result.hasAccount; }
              }
              public string Account {
                get { return result.Account; }
                set { SetAccount(value); }
              }
              public Builder SetAccount(string value) {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasAccount = true;
                result.account_ = value;
                return this;
              }
              public Builder ClearAccount() {
                PrepareBuilder();
                result.hasAccount = false;
                result.account_ = "";
                return this;
              }
              
              public bool HasOption {
               get { return result.hasOption; }
              }
              public global::protos.Public.Types.RoomOption Option {
                get { return result.Option; }
                set { SetOption(value); }
              }
              public Builder SetOption(global::protos.Public.Types.RoomOption value) {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasOption = true;
                result.option_ = value;
                return this;
              }
              public Builder SetOption(global::protos.Public.Types.RoomOption.Builder builderForValue) {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.hasOption = true;
                result.option_ = builderForValue.Build();
                return this;
              }
              public Builder MergeOption(global::protos.Public.Types.RoomOption value) {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                if (result.hasOption &&
                    result.option_ != global::protos.Public.Types.RoomOption.DefaultInstance) {
                    result.option_ = global::protos.Public.Types.RoomOption.CreateBuilder(result.option_).MergeFrom(value).BuildPartial();
                } else {
                  result.option_ = value;
                }
                result.hasOption = true;
                return this;
              }
              public Builder ClearOption() {
                PrepareBuilder();
                result.hasOption = false;
                result.option_ = null;
                return this;
              }
            }
            static CreateRoom() {
              object.ReferenceEquals(global::protos.Proto.Gilgamesh.Descriptor, null);
            }
          }
          
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
          public sealed partial class EnterRoom : pb::GeneratedMessage<EnterRoom, EnterRoom.Builder> {
            private EnterRoom() { }
            private static readonly EnterRoom defaultInstance = new EnterRoom().MakeReadOnly();
            private static readonly string[] _enterRoomFieldNames = new string[] { "Account", "RoomPassword" };
            private static readonly uint[] _enterRoomFieldTags = new uint[] { 10, 18 };
            public static EnterRoom DefaultInstance {
              get { return defaultInstance; }
            }
            
            public override EnterRoom DefaultInstanceForType {
              get { return DefaultInstance; }
            }
            
            protected override EnterRoom ThisMessage {
              get { return this; }
            }
            
            public static pbd::MessageDescriptor Descriptor {
              get { return global::protos.Proto.Gilgamesh.internal__static_protos_Internal_Hall_EnterRoom__Descriptor; }
            }
            
            protected override pb::FieldAccess.FieldAccessorTable<EnterRoom, EnterRoom.Builder> InternalFieldAccessors {
              get { return global::protos.Proto.Gilgamesh.internal__static_protos_Internal_Hall_EnterRoom__FieldAccessorTable; }
            }
            
            public const int AccountFieldNumber = 1;
            private bool hasAccount;
            private string account_ = "";
            public bool HasAccount {
              get { return hasAccount; }
            }
            public string Account {
              get { return account_; }
            }
            
            public const int RoomPasswordFieldNumber = 2;
            private bool hasRoomPassword;
            private string roomPassword_ = "";
            public bool HasRoomPassword {
              get { return hasRoomPassword; }
            }
            public string RoomPassword {
              get { return roomPassword_; }
            }
            
            public override bool IsInitialized {
              get {
                return true;
              }
            }
            
            public override void WriteTo(pb::ICodedOutputStream output) {
              CalcSerializedSize();
              string[] field_names = _enterRoomFieldNames;
              if (hasAccount) {
                output.WriteString(1, field_names[0], Account);
              }
              if (hasRoomPassword) {
                output.WriteString(2, field_names[1], RoomPassword);
              }
              UnknownFields.WriteTo(output);
            }
            
            private int memoizedSerializedSize = -1;
            public override int SerializedSize {
              get {
                int size = memoizedSerializedSize;
                if (size != -1) return size;
                return CalcSerializedSize();
              }
            }
            
            private int CalcSerializedSize() {
              int size = memoizedSerializedSize;
              if (size != -1) return size;
              
              size = 0;
              if (hasAccount) {
                size += pb::CodedOutputStream.ComputeStringSize(1, Account);
              }
              if (hasRoomPassword) {
                size += pb::CodedOutputStream.ComputeStringSize(2, RoomPassword);
              }
              size += UnknownFields.SerializedSize;
              memoizedSerializedSize = size;
              return size;
            }
            public static EnterRoom ParseFrom(pb::ByteString data) {
              return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
            }
            public static EnterRoom ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
              return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
            }
            public static EnterRoom ParseFrom(byte[] data) {
              return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
            }
            public static EnterRoom ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
              return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
            }
            public static EnterRoom ParseFrom(global::System.IO.Stream input) {
              return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
            }
            public static EnterRoom ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
              return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
            }
            public static EnterRoom ParseDelimitedFrom(global::System.IO.Stream input) {
              return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
            }
            public static EnterRoom ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
              return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
            }
            public static EnterRoom ParseFrom(pb::ICodedInputStream input) {
              return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
            }
            public static EnterRoom ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
              return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
            }
            private EnterRoom MakeReadOnly() {
              return this;
            }
            
            public static Builder CreateBuilder() { return new Builder(); }
            public override Builder ToBuilder() { return CreateBuilder(this); }
            public override Builder CreateBuilderForType() { return new Builder(); }
            public static Builder CreateBuilder(EnterRoom prototype) {
              return new Builder(prototype);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sealed partial class Builder : pb::GeneratedBuilder<EnterRoom, Builder> {
              protected override Builder ThisBuilder {
                get { return this; }
              }
              public Builder() {
                result = DefaultInstance;
                resultIsReadOnly = true;
              }
              internal Builder(EnterRoom cloneFrom) {
                result = cloneFrom;
                resultIsReadOnly = true;
              }
              
              private bool resultIsReadOnly;
              private EnterRoom result;
              
              private EnterRoom PrepareBuilder() {
                if (resultIsReadOnly) {
                  EnterRoom original = result;
                  result = new EnterRoom();
                  resultIsReadOnly = false;
                  MergeFrom(original);
                }
                return result;
              }
              
              public override bool IsInitialized {
                get { return result.IsInitialized; }
              }
              
              protected override EnterRoom MessageBeingBuilt {
                get { return PrepareBuilder(); }
              }
              
              public override Builder Clear() {
                result = DefaultInstance;
                resultIsReadOnly = true;
                return this;
              }
              
              public override Builder Clone() {
                if (resultIsReadOnly) {
                  return new Builder(result);
                } else {
                  return new Builder().MergeFrom(result);
                }
              }
              
              public override pbd::MessageDescriptor DescriptorForType {
                get { return global::protos.Internal.Types.Hall.Types.EnterRoom.Descriptor; }
              }
              
              public override EnterRoom DefaultInstanceForType {
                get { return global::protos.Internal.Types.Hall.Types.EnterRoom.DefaultInstance; }
              }
              
              public override EnterRoom BuildPartial() {
                if (resultIsReadOnly) {
                  return result;
                }
                resultIsReadOnly = true;
                return result.MakeReadOnly();
              }
              
              public override Builder MergeFrom(pb::IMessage other) {
                if (other is EnterRoom) {
                  return MergeFrom((EnterRoom) other);
                } else {
                  base.MergeFrom(other);
                  return this;
                }
              }
              
              public override Builder MergeFrom(EnterRoom other) {
                if (other == global::protos.Internal.Types.Hall.Types.EnterRoom.DefaultInstance) return this;
                PrepareBuilder();
                if (other.HasAccount) {
                  Account = other.Account;
                }
                if (other.HasRoomPassword) {
                  RoomPassword = other.RoomPassword;
                }
                this.MergeUnknownFields(other.UnknownFields);
                return this;
              }
              
              public override Builder MergeFrom(pb::ICodedInputStream input) {
                return MergeFrom(input, pb::ExtensionRegistry.Empty);
              }
              
              public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
                PrepareBuilder();
                pb::UnknownFieldSet.Builder unknownFields = null;
                uint tag;
                string field_name;
                while (input.ReadTag(out tag, out field_name)) {
                  if(tag == 0 && field_name != null) {
                    int field_ordinal = global::System.Array.BinarySearch(_enterRoomFieldNames, field_name, global::System.StringComparer.Ordinal);
                    if(field_ordinal >= 0)
                      tag = _enterRoomFieldTags[field_ordinal];
                    else {
                      if (unknownFields == null) {
                        unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                      }
                      ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                      continue;
                    }
                  }
                  switch (tag) {
                    case 0: {
                      throw pb::InvalidProtocolBufferException.InvalidTag();
                    }
                    default: {
                      if (pb::WireFormat.IsEndGroupTag(tag)) {
                        if (unknownFields != null) {
                          this.UnknownFields = unknownFields.Build();
                        }
                        return this;
                      }
                      if (unknownFields == null) {
                        unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                      }
                      ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                      break;
                    }
                    case 10: {
                      result.hasAccount = input.ReadString(ref result.account_);
                      break;
                    }
                    case 18: {
                      result.hasRoomPassword = input.ReadString(ref result.roomPassword_);
                      break;
                    }
                  }
                }
                
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              
              
              public bool HasAccount {
                get { return result.hasAccount; }
              }
              public string Account {
                get { return result.Account; }
                set { SetAccount(value); }
              }
              public Builder SetAccount(string value) {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasAccount = true;
                result.account_ = value;
                return this;
              }
              public Builder ClearAccount() {
                PrepareBuilder();
                result.hasAccount = false;
                result.account_ = "";
                return this;
              }
              
              public bool HasRoomPassword {
                get { return result.hasRoomPassword; }
              }
              public string RoomPassword {
                get { return result.RoomPassword; }
                set { SetRoomPassword(value); }
              }
              public Builder SetRoomPassword(string value) {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasRoomPassword = true;
                result.roomPassword_ = value;
                return this;
              }
              public Builder ClearRoomPassword() {
                PrepareBuilder();
                result.hasRoomPassword = false;
                result.roomPassword_ = "";
                return this;
              }
            }
            static EnterRoom() {
              object.ReferenceEquals(global::protos.Proto.Gilgamesh.Descriptor, null);
            }
          }
          
        }
        #endregion
        
        public override bool IsInitialized {
          get {
            return true;
          }
        }
        
        public override void WriteTo(pb::ICodedOutputStream output) {
          CalcSerializedSize();
          string[] field_names = _hallFieldNames;
          UnknownFields.WriteTo(output);
        }
        
        private int memoizedSerializedSize = -1;
        public override int SerializedSize {
          get {
            int size = memoizedSerializedSize;
            if (size != -1) return size;
            return CalcSerializedSize();
          }
        }
        
        private int CalcSerializedSize() {
          int size = memoizedSerializedSize;
          if (size != -1) return size;
          
          size = 0;
          size += UnknownFields.SerializedSize;
          memoizedSerializedSize = size;
          return size;
        }
        public static Hall ParseFrom(pb::ByteString data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static Hall ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static Hall ParseFrom(byte[] data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static Hall ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static Hall ParseFrom(global::System.IO.Stream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static Hall ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static Hall ParseDelimitedFrom(global::System.IO.Stream input) {
          return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static Hall ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static Hall ParseFrom(pb::ICodedInputStream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static Hall ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private Hall MakeReadOnly() {
          return this;
        }
        
        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(Hall prototype) {
          return new Builder(prototype);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Builder : pb::GeneratedBuilder<Hall, Builder> {
          protected override Builder ThisBuilder {
            get { return this; }
          }
          public Builder() {
            result = DefaultInstance;
            resultIsReadOnly = true;
          }
          internal Builder(Hall cloneFrom) {
            result = cloneFrom;
            resultIsReadOnly = true;
          }
          
          private bool resultIsReadOnly;
          private Hall result;
          
          private Hall PrepareBuilder() {
            if (resultIsReadOnly) {
              Hall original = result;
              result = new Hall();
              resultIsReadOnly = false;
              MergeFrom(original);
            }
            return result;
          }
          
          public override bool IsInitialized {
            get { return result.IsInitialized; }
          }
          
          protected override Hall MessageBeingBuilt {
            get { return PrepareBuilder(); }
          }
          
          public override Builder Clear() {
            result = DefaultInstance;
            resultIsReadOnly = true;
            return this;
          }
          
          public override Builder Clone() {
            if (resultIsReadOnly) {
              return new Builder(result);
            } else {
              return new Builder().MergeFrom(result);
            }
          }
          
          public override pbd::MessageDescriptor DescriptorForType {
            get { return global::protos.Internal.Types.Hall.Descriptor; }
          }
          
          public override Hall DefaultInstanceForType {
            get { return global::protos.Internal.Types.Hall.DefaultInstance; }
          }
          
          public override Hall BuildPartial() {
            if (resultIsReadOnly) {
              return result;
            }
            resultIsReadOnly = true;
            return result.MakeReadOnly();
          }
          
          public override Builder MergeFrom(pb::IMessage other) {
            if (other is Hall) {
              return MergeFrom((Hall) other);
            } else {
              base.MergeFrom(other);
              return this;
            }
          }
          
          public override Builder MergeFrom(Hall other) {
            if (other == global::protos.Internal.Types.Hall.DefaultInstance) return this;
            PrepareBuilder();
            this.MergeUnknownFields(other.UnknownFields);
            return this;
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input) {
            return MergeFrom(input, pb::ExtensionRegistry.Empty);
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
            PrepareBuilder();
            pb::UnknownFieldSet.Builder unknownFields = null;
            uint tag;
            string field_name;
            while (input.ReadTag(out tag, out field_name)) {
              if(tag == 0 && field_name != null) {
                int field_ordinal = global::System.Array.BinarySearch(_hallFieldNames, field_name, global::System.StringComparer.Ordinal);
                if(field_ordinal >= 0)
                  tag = _hallFieldTags[field_ordinal];
                else {
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  continue;
                }
              }
              switch (tag) {
                case 0: {
                  throw pb::InvalidProtocolBufferException.InvalidTag();
                }
                default: {
                  if (pb::WireFormat.IsEndGroupTag(tag)) {
                    if (unknownFields != null) {
                      this.UnknownFields = unknownFields.Build();
                    }
                    return this;
                  }
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  break;
                }
              }
            }
            
            if (unknownFields != null) {
              this.UnknownFields = unknownFields.Build();
            }
            return this;
          }
          
        }
        static Hall() {
          object.ReferenceEquals(global::protos.Proto.Gilgamesh.Descriptor, null);
        }
      }
      
    }
    #endregion
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _internalFieldNames;
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static Internal ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Internal ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Internal ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Internal ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Internal ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Internal ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Internal ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Internal ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Internal ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Internal ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Internal MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Internal prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<Internal, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Internal cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Internal result;
      
      private Internal PrepareBuilder() {
        if (resultIsReadOnly) {
          Internal original = result;
          result = new Internal();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Internal MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::protos.Internal.Descriptor; }
      }
      
      public override Internal DefaultInstanceForType {
        get { return global::protos.Internal.DefaultInstance; }
      }
      
      public override Internal BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Internal) {
          return MergeFrom((Internal) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Internal other) {
        if (other == global::protos.Internal.DefaultInstance) return this;
        PrepareBuilder();
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_internalFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _internalFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
    }
    static Internal() {
      object.ReferenceEquals(global::protos.Proto.Gilgamesh.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
